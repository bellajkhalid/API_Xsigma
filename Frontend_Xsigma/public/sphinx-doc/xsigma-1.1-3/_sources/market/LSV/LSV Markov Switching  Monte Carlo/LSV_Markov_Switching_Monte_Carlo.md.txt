# LSV Markov Switching : Monte Carlo

## Table of Contents

1. [Executive Summary](#1-executive-summary)

2. [Scope](#2-scope)
   - [2.1 Model Purpose and Intended Usage](#21-model-purpose-and-intended-usage)
   - [2.2 Conceptual Soundness](#22-conceptual-soundness)

3. [Product / Payoff / Portfolio](#3-product-payoff-portfolio)
   - [3.1 Description](#31-description)
   - [3.2 Relationship to other approved models/payoffs](#32-relationship-to-other-approved-modelspayoffs)
   - [3.3 Inputs](#33-inputs)
   - [3.4 Outputs](#34-outputs)
   - [3.5 Payoff Analysis](#35-payoff-analysis)
   - [3.6 Portfolio description and trends](#36-portfolio-description-and-trends)

4. [Model / Methodology](#4-model-methodology)
   - [4.1 Description](#41-description)
   - [4.2 Assumptions, Limitations and Outliers](#42-assumptions-limitations-and-outliers)
   - [4.3 Model Parameters / Variables](#43-model-parameters-variables)
   - [4.4 Model Outputs](#44-model-outputs)
   - [4.5 Model Uncertainty](#45-model-uncertainty)
   - [4.6 Risk Factor](#46-risk-factor)
   - [4.7 Feeder Models](#47-feeder-models)
   - [4.8 Justification against alternative approaches](#48-justification-against-alternative-approaches)
   - [4.9 Conditions of Use](#49-conditions-of-use)

5. [Implementation / Numerical Schema Description](#5-implementation-numerical-schema-description)
   - [5.1 Description](#51-description)
   - [5.2 Inputs](#52-inputs)
   - [5.3 Quality control](#53-quality-control)
   - [5.4 Limitations](#54-limitations)

6. [Calibration](#6-calibration)
   - [6.1 Description](#61-description)
   - [6.2 Inputs](#62-inputs)
   - [6.3 Justification against alternative approaches](#63-justification-against-alternative-approaches)
   - [6.4 Quality control](#64-quality-control)
   - [6.5 Limitations and Risk Assessment](#65-limitations-and-risk-assessment)

7. [Risk (Calculated by the model/payoff)](#7-risk-calculated-by-the-modelpayoff)
   - [7.1 Description](#71-description)
   - [7.2 Inputs](#72-inputs)
   - [7.3 Limitations and Risk Assessment](#73-limitations-and-risk-assessment)

8. [Test and Outcome analyses performed on Payoff/Model/Portfolio](#8-test-and-outcome-analyses-performed-on-payoffmodelportfolio)
   - [8.1 Back-testing](#81-back-testing)
   - [8.2 Scenario and Stress-testing](#82-scenario-and-stress-testing)
   - [8.3 Statistical testing](#83-statistical-testing)
   - [8.4 Impact of Assumptions and Limitations](#84-impact-of-assumptions-and-limitations)
   - [8.5 Accuracy, convergence, stability and sensitivity](#85-accuracy-convergence-stability-and-sensitivity)
   - [8.6 Boundary Cases](#86-boundary-cases)
   - [8.7 Comparison to Other Models](#87-comparison-to-other-models)
   - [8.8 Other Outcome Analysis / Testing](#88-other-outcome-analysis--testing)

9. [General Limitations](#9-general-limitations)

10. [Model Monitoring – KPIs](#10-model-monitoring--kpis)
    - [10.1 Monitoring Tests and Key Performance Indicators (KPI)](#101-monitoring-tests-and-key-performance-indicators-kpi)
    - [10.2 Performance Exceptions](#102-performance-exceptions)
    - [10.3 Exception Mitigation Plan](#103-exception-mitigation-plan)

11. [References](#11-references)

## 1. Executive Summary

In this document, we describe the Monte Carlo scheme for Local Stochastic Volatility Markov Switching model. This model has been extensively discussed in [1], where various tests on its calibration, back-testing and a detailed study of model dynamics have been presented. All calibration routines are performed prior to pricing and thus are common and valid for both PDE and Monte Carlo pricing engine. Hence in this document we will only present key elements in model dynamics and calibration process, and concentrate on how Monte Carlo scheme is used for pricing.

The model has been implemented in QA within the UMIFX framework. The calibration routine involves a forward-induction PDE procedure and the pricing is carried by Monte Carlo engine. The tests are performed on vanilla options with a wide variety of underlying, maturities and strikes. Tests show that PV from LSV Markov Switching Monte Carlo model converges to benchmark within an acceptable error range. No bias has been observed among series of tests. Some cases are subject to higher Monte Carlo simulation error when compared to a pure Local Volatility model, but the error is usually comparable to other LSV models like the LSV Hybrid model.

We recommend using a QA version from QA2284.00 onwards.

## 2. Scope

### 2.1 Model Purpose and Intended Usage

Local Stochastic Volatility model family has a dynamic that is more interesting in terms of capturing the market behaviour. They are also more controllable than both pure Local Volatility and pure stochastic volatility models. They also provide a consistent way of pricing and hedging exotic path dependent trades together with matching current vanilla market.

LSV Markov Switching (LSV MS) model was developed & implemented by QAFX in 2013. The model has to be fast enough to enable trading desks to monitor their risk exposures in a reasonable amount of time. LSV MS has superior speed performance compared to other LSV models due to its discrete nature of volatility states. Its dynamic will be discussed in Section 4.1.

The PDE engine allows precise and fast calculation of PV as well as risks. However the payoffs covered by this technique are quite restricted, especially when applying to highly path-dependent products. Therefore connecting LSV MS to Monte Carlo engine opens the road for pricing and hedging a whole new range of products. Particularly, this allows all the PTA trades based on Padla script to be priced, booked and hedged under LSV model.

### 2.2 Conceptual Soundness

Local Stochastic Volatility model family aggregates the advantages from both pure Local Volatility model and pure Stochastic Volatility models.

* Pure Local Volatility model is known for generating an unrealistic forward volatility dynamics and hence fails to match market prices of first generation exotics (e.g. Touch options, Knock-In/Knock-Out Barriers, etc.).

* Pure Stochastic Volatility models provide more realistic forward volatility dynamics, however lack of flexibility to exactly match all available market volatility quotes.

Among Local Stochastic Volatility model family, LSV MS is selected for its stability and efficient performance.

Prior to LSV MS, there used to be an inconsistency between models used for quoting prices and for valuing/risk managing the first generation exotics book. In the past, prices were quoted using LSV Hybrid model [9] whereas the risk management was based on Local Volatility model. LSV Hybrid model was not a suitable candidate for risk management due to its speed performance. In addition, other issues such as blow-ups in valuations, instable calibration performance, etc. were observed in LSV Hybrid model. LSV MS, on the other hand, can be selected as the consistent model used by both quotations and risk management.¹

¹ As of 2016, single-underlying products priced on MC are both quoted and risk-managed by LSV MS, and multi-asset products priced on MC are managed by LC.

## 3. Product / Payoff / Portfolio

The document focuses on the pricing and performance of LSV MS Monte Carlo, rather than detailed analysis on specific products. Cash-settled European vanilla options are chosen to assess the accuracy, convergence and stability of LSV MS MC. We compare LSV MS MC pricer to both Analytic and LSV MS PDE pricer.

### 3.1 Description

A cash-settled European vanilla option has a payout, at a specified payment date $T_p$, given by:

$$P = N[c(S_T - K)]^+$$

where $S_T$ is the market settled FX spot level (noted by FORDOM) at expiry time $T$ (prior to $T_p$), $K$ is the option strike level in the same unit as the FX asset, $N$ is the notional amount in foreign currency, and $c$ is the call/put indicator (a value of +1 indicates a call and -1 indicates a put).

Note that both Analytic and LSV MS PDE pricer consume CTR schema, while LSV MS MC uses Padla script. CTR schema (version 3.1 and onwards) allows user to choose the Settlement Currency as either domestic or foreign currency. While in Padla script (see section 3.3), the domestic currency (which is defined according to the input FX underlying asset) is the default settlement currency.

### 3.2 Relationship to other approved models/payoffs

Not applicable.

### 3.3 Inputs

All tested trades are represented in Padla scripts, and priced on Monte Carlo engine.

Padla is a scripting language for representing exotic trades. It supports different algorithms such as Monte Carlo for non-callable trades and Longstaff-Schwartz algorithm for callable path-dependent trades. It enables trade management by supporting pricing of a trade at any point during its lifetime. We can price a trade by using historical data until valuation date and simulated data for future dates. The simulated data requires a model and this is where LSV MS model will be used for simulating future FX spots. Padla language allows an easy way of translating the term sheet of the trade into a series of statements which correspond to the various cash flows during the life of the trade. For example, cash settled vanilla options will be scripted as a simple cash flow of the final payout in the correct currency at maturity. For further information on Padla and how the script language works, please refer to [5].

Padla script for cash settled European vanilla is called Cash Settled Option, which can be loaded from:
Y:\SGP\mkts\apps\qadelivery\PDN\Fxp\Config\UDIPadla\Library\CashSettledVanillaOption.xml

### Table 3.1 Input of Padla Script for Cash Settled Option

| Name | Type (Example) | Comment |
|---|---|---|
| Strike | Double (1.0892) | Strike is quoted as CCY1CCY2 (same FORDOM format as FXAsset below) |
| Notional | Double (1,000,000) | Notional amount in Currency1 (FOR CCY). Negative value is allowed to represent a selling/short position. |
| OptionType | String (CALL) | Specify whether the trade is a CALL or PUT on CCY1. |
| ExpiryDate | Date Vector (29-Apr-2016)² | Expiry date of the option. |
| PayDate | Date Vector (02-May-2027)² | Date when settlement occurs. |
| FXAsset | String (EURUSD) | FX Asset quoted as CCY1CCY2 in the format FORDOM. |

In addition to trade parameters in the payoff, there is a static input block specific for Monte Carlo engine. User should pay attention to the choice of NumeraireCurrency. In general, Multi-asset Padla pricer allows any currency as NumeraireCurrency, even the chosen currency does not exist in any underlying FX assets³. However, for cash-settled vanilla, its Padla script will always force to set the domestic currency as numeraire regardless of the user input for NumeraireCurrency.

### Table 3.2 Additional static input block for Monte Carlo engine

| Static Input Name | Type (Example) | Description |
|---|---|---|
| NumeraireCurrency | String (USD) | The currency chosen as the numeraire measure, i.e. all simulated assets are valued in terms of numeraire currency. |

### 3.4 Outputs

There are no payoff specific outputs for involved trade types. However, for all trades scripted on Padla, Padla framework supports Life Cycling, Cash Reporting and Trading Event functionalities.

Full life cycling is available so that the trade can be valued on or after fixing dates and the expiry date by providing appropriate fixings or exercise decisions (see [14]).

Cash reporting is available as part of the life cycle functionality. User can refer to [15][16] for Padla for more information if expected cash flows, or potential cash flows contingent on fixings, or an exercise decision are needed.

² For a single option, the input should be a vector of size one. An input vector with size larger than one implies the trade consists of several options with a common strike on a series of dates. Exception will be thrown when the size of all vectors do not agree to each other.
³ Multi-asset Padla pricer will automatically add all additional currency pairs related to NumeraireCurrency to simulation engine.

### 3.5 Payoff Analysis

The risk of European vanillas concentrates heavily at the trade expiry, i.e. if we break down the Vega risk profile by tenor buckets, entries with tenor around trade expiries account for almost the entire risk value. In addition, there is no path-dependency feature attached.

In theory, European vanillas with delayed settlement (settled after market-standard spot settlement date) are exposed to interest-rate volatility. But in practice the interest-rate volatility exposure only matters when the delay is significant (a few years for example).

### 3.6 Portfolio description and trends

Not applicable for valuation models.

## 4. Model / Methodology

For a complete review of Local Stochastic Volatility Markov Switching model, please refer to [1].

Here we describe a new way of calculating the transition probabilities for the Markov Switching model that has been implemented in QA.

### 4.1 Description

#### 4.1.1 Model design & development

##### 4.1.1.1. A Continuous Time Markov Chain with Discrete States

The stochastic instantaneous volatility is allowed to take one of $n$ possible values. Random transitions are allowed among volatility states at any time, in other words they are described by a continuous time Markov chain process.

A continuous time Markov chain with discrete states is a stochastic process $\{\zeta(t): t \geq 0\}$ where $\zeta(t)$ takes values only in state space $\{1, ..., n\}$ and $n \in N$ is the number of states.

$$\zeta(t): t \in [0, \infty) \to \{1, ..., n\}$$

To define a continuous time Markov Chain we need to specify its $n \times n$ transition rate matrix $Q(t)$, with elements $q_{ij}(t), i, j \in \{1, ..., n\}$.

A valid instantaneous transition rate matrix $Q(t)$ at a given time $t$ must fulfil the following conditions:

* $n \times n$ matrix with $n$ being the number of states.

* $q_{ii}(t) \leq 0$ for $\forall i \in \{1, ..., n\}$. $q_i(t) = -q_{ii}(t)$ is the rate at which the process leaves the state $i$.

* $q_{ij}(t) \geq 0$ for $i \neq j$. $q_{ij}(t)$ is the instantaneous rate at which the process moves from state $i$ to $j$.

* $\sum_j q_{ij}(t) = 0$ for $\forall i \in \{1, ..., n\}$.

When considering a given time interval $[s, t]$, a Transition Generator Matrix $Q(s, t)$ is utilized and defined as:

$$Q(s, t) = \int_s^t Q(u)du$$

i.e. the integral of instantaneous transition rate matrix with respect to the given time interval.

Suppose the process is in state $i$ at time $s$, the conditional probability $p_{ij}(s, t)$ of being in state $j$ at time $t$, is given by:

$$p_{ij}(s, t) = P[\zeta(t) = j | \zeta(s) = i]$$

Where $p_{ij}(s, t)$ is an element of $n \times n$ matrix $P(s, t)$, defined via the matrix exponential of $Q(s, t)$:

$$P(s, t) = \exp(Q(s, t))$$

##### 4.1.1.2. Local Stochastic Volatility with Markov Switching

The model dynamics of LSV Markov Switching are specified by following Stochastic Differential Equations:

$\frac{dS(t)}{S(t)} = (r_d(t) - r_f(t)) dt + \Sigma(t)A(S(t), t)dW(t)$

$\Sigma(t) = \sigma_{\zeta(t)}(t)$

The notations represent:

* $S(t)$    : Underlying FX spot level at time $t$ (in units of domestic currency per foreign, FORDOM).
* $r_d, r_f$  : Instantaneous interest rate of domestic/foreign currency.
* $W(t)$    : Brownian motion under risk-neutral measure with respect to domestic currency.
* $A(S(t), t)$      : Deterministic Local Volatility correction.
* $n \in N$  : Number of volatility / Markov chain states.
* $\zeta(t)$   : A continuous time stochastic Markov chain with discrete states $\zeta(t): [0, \infty) \to \{1, ..., n\}$.
* $\Sigma(t) = \sigma_{\zeta(t)}(t)$  : A continuous time stochastic Markov chain embedded in $\zeta(t)$ with a discrete set of deterministic functions $\sigma_i(t): R^+ \to R^+$ defined on each state $i \in \{1, ..., n\}$.
* $Q$       : Instantaneous transition rate matrix of Markov chain $\{\zeta(t): t \geq 0\}$.

Note that $W(t)$ is independent of $\zeta(t)$, which extends to the independency of $\Sigma(t)$.

To further specify the dynamics of stochastic instantaneous volatility in Markov Switching, we assume that the instantaneous transition rate matrix is of the form

$Q(t) = \tilde{Q} \cdot q(t)$

$Q(s, t) = \int_s^t Q(u)du = \tilde{Q} \int_s^t q(u)du$

Where the transition rate matrix $Q(t)$ is represented using a constant $n \times n$ matrix $\tilde{Q}$ and a time dependent scalar function $q(t)$. The time dependent function $q(t)$ is assumed piecewise constant.

Another assumption is made on the set of deterministic functions $\sigma_i(t)$:

$\sigma_i(t) = \gamma_0(t) \exp \left( \left(i - 1 - \left[\frac{n}{2}\right]\right) \cdot \alpha(t) \right)$

The parameters above are:

* $\alpha(t)$  : Volatility of volatility.
* $\gamma_0(t)$  : Volatility (scaling) factor.⁴

Note that in production, only an odd number of states are considered, i.e. the number of states is restricted to $n = 2k + 1, k \in N^+$, and the initial volatility state will be the middle state $\sigma_{k+1}(t)$.

For instance, if three volatility states are selected, the set of deterministic functions is given by:

$\sigma_3(t) = \gamma_0(t) \exp(+\alpha(t))$
$\sigma_2(t) = \gamma_0(t)$
$\sigma_1(t) = \gamma_0(t) \exp(-\alpha(t))$

In this document the number of volatility states is always assumed to be 3. Extension to any other odd number of volatility states follows the same argument.

⁴ $\gamma_0(t)$ is relevant for the definition of a pure stochastic volatility model. In the context of Local Stochastic Volatility, the scaling effect can be incorporated in the Local Volatility correction. Hence $\gamma_0(t)$ is hereby set equal to 1.

##### 4.1.1.3. Transition Probability Matrix: Approximation and Exact Formula

The transition matrix exponential $P(s, t) = \exp(Q(s, t))$ was previously calculated by an approximation which supposes the time interval $(s, t)$ is small. The matrix exponential is therefore approximated by a first order Taylor expansion:

$P(s, t) \approx I + Q(s, t)$

In first order approximation, the probability of leaving the state $i$ will become $1 - (t - s) \cdot q_i(s)$. Such an approximation is sufficient for PDE pricing as the time steps are small enough and hence justify a first order approach. However for Monte Carlo simulation, one could expect longer time steps especially for long dated option (a monthly time step is quite common for instance). Therefore a more precise way to compute the transition matrix is required.

Given the assumption on transition rate matrix by Formula 4.7, if input constant transition matrix $\tilde{Q}$ is diagonalizable, then transition generation matrix $Q(s, t)$ is also diagonalizable as follows:

$Q(s, t) = A^{-1}D(s, t) A$

Applying Taylor series of exponential to matrix calculation, one can show:

$P(s, t) = A^{-1} \exp[D(s, t)] A$

$\exp[D(s, t)] = \begin{bmatrix} e^{d_1} & 0 & 0 \\ 0 & \ddots & 0 \\ 0 & 0 & e^{d_n} \end{bmatrix}$

Where $(d_i)_{1≤i≤n}$ are diagonal elements of matrix $D(s, t)$.

Under model assumption Formula 4.8, the diagonalization operation (i.e. Formula 4.12) is only required once on $\tilde{Q}$ at initialization and all diagonal elements of $\tilde{Q}$ are cached for future scaling. The inverse operations (Formula 4.13) are only done once for each time step or a couple of times in between $[s, t]$. The resulting matrix elements of $P(s, t)$ are then kept cached for later use.

##### 4.1.1.4. Property Page for Controlling Exponential Matrix

User is provided with an additional entry in calibration settings to decide whether to apply exact calculation on an exponential of a matrix.

In theory the ExponentialExact method has to be preferred for Monte Carlo simulation, as relatively large time step in Monte Carlo simulation would potentially result in negative probabilities with diagonal terms $1 - q_i \cdot \Delta t$ using first order approximation.

However, tests have shown only tiny impact are observed when switching from ExponentialFirstOrder to ExponentialExact even with monthly time steps. Hence we recommend keeping the default value as first order approach which is also less time-consuming.

| Input Name                              | Default               | Recommended                          | Description                                                                                       |
|-----------------------------------------|-----------------------|--------------------------------------|---------------------------------------------------------------------------------------------------|
| SVMSModel.TransitionMatrixExponentialType | ExponentialFirstOrder | ExponentialExact / ExponentialFirstOrder | ExponentialExact will diagonalize the transition rate matrix and obtain exact matrix exponential. Otherwise, a linear first-order approximation is used. |

#### 4.1.2    Regulatory compliance

Not applicable for valuation models.

### 4.2    Assumptions, Limitations and Outliers

The model has following assumptions and limitations:

* LSV MS is a single-asset model where underlying spot is assumed to evolve continuously without jumps. Jumps may have a significant impact on pricing certain path-dependent products, such as quite short-dated barrier trades.

* The stochastic Markov chain is independent of the Brownian motion that drives the underlying spot. Hence, care needs to be taken if trades strongly depend on the correlation between spot and volatility.

* Both domestic and foreign interest rates are assumed deterministic in current version of the model. Therefore stochastic interest rate effect is not taken into account when pricing long-dated structures.

* Vol of volatility parameter is piecewise constant in time.

* Transition rate matrix is constructed by Formula 4.7 with parameters $q(u)$ being piecewise constant in time.

### 4.3    Model Parameters / Variables

The parameters / variables affecting model dynamics are specified in the table below:

Table 4.1 Parameters / Variables in LSV MS Monte Carlo

| Parameter / Variable Name | Description | Type - Data (Define) / Input / Calibration | Impact |
|---|---|---|---|
| Volatility State Number $n$ | Number of states for volatility Markov chain. | Input | A larger number of states will provide a finer sampling of stochastic volatility, but also consume more computational recourses. |
| FX Spot $S(0)$ | Spot FX rate quoted as units of domestic currency per foreign at valuation date $t = 0$. | Market Data | The initial level for the FX spot diffusion process. Delta/Gamma represent first and second order sensitivities to $S(0)$. |
| Interest rate $r_d, r_f$ | Continuous compounding interest rate for domestic and foreign currency.⁵ | Market Data | Determine the (risk-neutral) drift of the FX spot. |
| Local Volatility correction $A(S(t), t)$ | Dupire deterministic Local Volatility function of time $t$ and FX Spot $S(t)$. | Calibration | Diffusion coefficient driving the FX spot process. The Higher the volatility is, the wider the FX spot process is likely to diffuse. |
| Volatility Factor $\gamma_0(t)$ | Piecewise constant parameter scaling the different discrete volatility values. | Input | Function parameter for stochastic volatility which scales the volatility level on all states. |
| Vol of Volatility $\alpha(t)$ | Piecewise constant Vol of Volatility parameters controlling the separation between states. | Market Data Like | Function parameter for stochastic volatility. A higher value will lead to a larger difference in volatility level between states. |
| Transition scalar parameter $q(t)$ | Piecewise constant parameter controlling the transitions between different volatility states. | Market Data Like | Determine the transition rate between stochastic volatility states. The stochastic volatility process is more likely to transit between states with a higher value. |
| Constant transition matrix $\tilde{Q}$ | A $n \times n$ matrix which is paired with transition parameter $q(t)$ to define the transition generation matrix of stochastic volatility Markov chain. | Input | Determine the baseline of transition rate between states. It will be further scaled by the integral of $q(t)$ over a period of time. |

⁵ Interest rates are collateral-dependent, i.e. they are derived from the discounting curves defined by respective collateral types.

### 4.4    Model Outputs

As a valuation model, LSV MS Monte Carlo produces the Present Value (PV) of the payout and generates its risk profile using numerical differentiation, i.e. bumping selected input data and calculating the ratio of differences in PV with respect to the bump size.

Monte Carlo engine will also provide the standard deviation associated with the PV calculation, which is a measure of convergence.

More details and discussions on outcome analysis can be found in section 8.

### 4.5    Model Uncertainty

The LSV MS model is capable of reproducing the input instrument prices that it has been calibrated to, subject to the caveat on inconsistent inputs discussed in 6.5.

The model assumes that both domestic and foreign interest rates are deterministic functions of time. Such an assumption would impact valuation of products with long expiries or delayed payments. For those products, alternative suitable models such as 3F LogZCB LV [25] are available. If these types of products are priced on LSV MS model, we could compute suitable fair value adjustments using alternative models.

### 4.6    Risk Factor

The LSV MS model is sensitive to the market data inputs listed in section 4.3. It does not account for the stochasticity of interest rates (neither domestic nor foreign).

### 4.7    Feeder Models

The upstream model for LSV MS is Local Volatility model, from which the calibration on Dupire local volatility is the seed to the calibration of Local Volatility correction $A(S(t), t)$ in LSV MS.

The justification and detailed discussion on Local Volatility model can be found in [17].

### 4.8    Justification against alternative approaches

As stated in section 2.2, Local Stochastic Volatility model family aggregates the advantages from both pure Local Volatility model and pure Stochastic Volatility models.

* Pure Local Volatility model is known for generating an unrealistic forward volatility dynamics and hence fails to match market prices of first generation exotics (e.g. Touch options, Knock-In/Knock-Out Barriers, etc.).

* Pure Stochastic Volatility models provide more realistic forward volatility dynamics, however lack of flexibility to exactly match all available market volatility quotes.

Among Local Stochastic Volatility model family, LSV MS is selected for its stability and efficient performance. It provides a consistent model used by both quotations and risk management.

### 4.9    Conditions of Use

#### 4.9.1    Stressed Market Conditions

Not applicable.

## 5. Implementation / Numerical Schema Description

### 5.1 Description

In this section we will describe the algorithm for Monte Carlo simulation of the Markov Switching. Various schemes have been implemented and tested. Here we focus on the simplest and most efficient ones only which are maintained in QA library.

We assume a volatility process with $n$ discrete states, and we are given the probability distribution of each volatility state at inception. The probability of the process being at state $k$ at $t = 0$ is denoted by $p_k(0)$. The initial distribution of volatility states is defined by:

$$\Pi(0) = \begin{bmatrix} p_1(0) \\ ... \\ p_n(0) \end{bmatrix}$$

The algorithm consists in two steps:

* Generate volatility distribution at inception.
* Simulate the spot process in parallel with the volatility process along the discretized time axis.

#### 5.1.1 Generating Volatility Distribution at Inception

A natural way of generating a random number following a discrete probability distribution is to use Bernoulli algorithm, i.e. sample from the corresponding Bernoulli distribution as the starting volatility state at the inception of each simulated path.

However here we choose an alternative approach in order to reduce noise in Monte Carlo simulation. Instead of sampling from the probability distribution at inception for each path, we distribute the predefined total number of simulated paths to each volatility state with a proportion equal to its initial probability.

If the total number of simulated paths is denoted as $N_{Path}$, the number of paths started with volatility state $i$ is allocated by:

$$N_i = \lfloor p_i(0) \cdot N_{Path} \rfloor, \quad for\, i \in \{1, ..., n-1\}$$

$$N_n = N_{Path} - \sum_{i=1}^{n-1} N_i$$

i.e. we take the closest integer number to the product of initial state probability and total number of paths, and the remainder is assigned to the last state. By this way, the sampling noise introduced by a Bernoulli algorithm can be controlled especially when the total number of simulated paths is small.

In practice, the volatility state at inception used by Trading Desks is deterministic, i.e. we use three volatility states and the process always starts with the middle volatility state. Hence there is no need for generating the distribution at inception, and the algorithm above is not applied in such a case.

#### 5.1.2 Discretization of Spot and Volatility Process

We assume the time axis is discretized as:

$t_0 = 0, t_1, ..., t_{m-1}, t_m$

The above time series are not necessarily a regular/uniform grid. By correctly dispatching the number of paths to each volatility state as described above, a correct initial distribution of volatility states is guaranteed.

##### 5.1.2.1. Evolution of Spot Process

With initial volatility set as $\Sigma(t_0) = \sigma_{i_0}$, we diffuse the log spot following an Euler scheme:

$$\log S_{k+1} = \log S_k + \left(r_d(t_k) - r_f(t_k) - \frac{1}{2}\Sigma^2(t_k)A^2(S_k, t_k)\right)\Delta t + \Sigma(t_k)A(S_k, t_k)\Delta W_k$$

A quick way to obtain $(r_d(t_k) - r_f(t_k))\Delta t$ as a whole is to calculate the log ratio of forwards at two consecutive dates as below:

$$(r_d(t_k) - r_f(t_k))\Delta t = \log \frac{F(t_k + \Delta t)}{F(t_k)}$$

$A(S_k, t_k)$ is obtained from the calibrated deterministic Local Volatility correction.

Brownian increments $\Delta W_k$ are obtained by

$$\Delta W_k = g_u\sqrt{t_{k+1} - t_k}$$

where $g_u$ is a standard normal random variable. All standard normal random numbers $g_u$ are obtained with pseudo or quasi random number generators such as Mersenne Twister, Sobol sequence, or a combination of both if the required size is above the dimension of Sobol sequence generator. For more details on random number generators, please refer to [6], [7] and [8].

Once a step evolved, a new volatility state $i_{k+1}$ is updated from the current state $i_k$ (the algorithm will be elaborated in next section 5.1.2.2). Accordingly, the volatility process will be updated to $\Sigma(t_{k+1}) = \sigma_{i_{k+1}}$.

##### 5.1.2.2. Evolution of Volatility Process

Due to the architecture of current QA Monte Carlo framework, only Gaussian random variables for Brownian increments $\Delta W_k$ are accessible at the level of Monte Carlo steppers. To implement Markov Switching, one needs to use the Bernoulli algorithm based on uniform random numbers. Without refactoring Monte Carlo framework, we have slightly modified the common algorithm for Markov Switching to work with Gaussian random numbers.

Assume the volatility process is currently in state $i$ at time $t_{k-1}$. The process diffuses from $t_{k-1}$ towards $t_k$ with a volatility level of $\Sigma_i$ using above Euler scheme.

Before arriving at $t_k$ we consider the transition matrix:

$P(t_{k-1}, t_k) = A^{-1}\exp[D(t_{k-1}, t_k)]A$

The matrix gives all probabilities to switch between any pair of states. Given current state $i$, we only consider row $i$, elements from which correspond to probabilities of switching from state $i$ to any other states (including self-state). All elements in the same row are constrained by:

$$\sum_{j=1}^n p_{ij}(t_{k-1}, t_k) = 1$$

To sample a Bernoulli distribution from Gaussian random variables, an auxiliary vector is constructed as:

$\Psi^i(t_{k-1}, t_k) = \begin{bmatrix} N^{-1}\left[\sum_{j=1}^1 p_{ij}(t_{k-1}, t_k)\right] \\ N^{-1}\left[\sum_{j=1}^2 p_{ij}(t_{k-1}, t_k)\right] \\ \vdots \\ \vdots \\ N^{-1}\left[\sum_{j=1}^n p_{ij}(t_{k-1}, t_k)\right] = N^{-1}[1] = \infty \end{bmatrix}$

where $N^{-1}(\cdot)$ is the inverse of the cumulative density function of a standard normal distribution.

Elements in above vector are guaranteed in an ascending order as indices increase. The sampling starts with drawing a standard Gaussian number $g\sim N(0,1)$, and then comparing it to each element of above auxiliary vector in an index ascending order. If we assume index $j$ corresponds to the first element in $\Psi^i(t_{k-1}, t_k)$ that is strictly larger than $g$, then index $j$ is selected as the next volatility state.

Note that the above auxiliary vectors are calculated at the very beginning of the simulation (rather than generated along with each simulation step). Therefore for each time step $[t_{k-1}, t_k]$, we need to cache a $n \times n$ matrix containing $n$ auxiliary vectors $\Psi^i(t_{k-1}, t_k), i = 1, ..., n$ to make sure the sampling is available for any potential state $i$ at time $t_{k-1}$.

Once the new volatility state index $j$ for time $t_k$ is determined, the spot process will evolve another step according to above Euler scheme with a new volatility value $\sigma_j(t_k)$.

##### 5.1.2.3. Further Discussion on Evolution Algorithm

The algorithm above is suitable for independent spot and volatility processes, which is the underlying assumption for Markov Switching model.

The switching date in practice is random and can occur at any time (not necessarily agrees with spot movement). One approach to improve the variance of the discretized volatility process is to introduce certain random jumps in-between Monte Carlo time grid. Further details are discussed in [2]. The implementation of jumps makes the algorithm more complex, yet tests have not shown any noticeable improvement in convergence quality. Hence this approach has not been maintained and won't be elaborated here.

### 5.2 Inputs

Monte Carlo inputs are supplied through FXMCCalculationPP. The various subgroups that we are interested in are FXDateOptionsStepSchedulePP, which controls Monte Carlo stepping schedule; FXMCPLSimulatorOptionsPP which contains the simulator options; and FXMCRNGOptionsPP which contains settings for the underlying random number and path generator.

FXMCDateOptionsPP

| Input Name | Default | Recommended | Description |
|---|---|---|---|
| MinNumStepsPerYear | 4 | Default | At least this number of time steps per year; zero means use only the trade dates, negative means use all available dates from the calibration |
| StepSchedule | - | See below under FXDateOptionsStepSchedulePP | Time stepping schedule as a set of end tenors and step sizes, specified using FXDateOptionsStepSchedulePP |
| ValuationDate | - | - | The valuation date for pricing. |

FXDateOptionsStepSchedulePP⁶

| Input Name | Default | Recommended | Description |
|---|---|---|---|
| StepSchedule[0].PeriodLength | - | 2M | Tenor length from the end of the previous period to which the step size applies -- do not set for the last period |
| StepSchedule[0].RequestedAverageStepSize | - | D | Amount (optional, assumed 1 if missing) and units of the requested step size |
| StepSchedule[1].PeriodLength | - | 1Y | Tenor length from the end of the previous period to which the step size applies -- do not set for the last period |
| StepSchedule[1].RequestedAverageStepSize | - | W | Amount (optional, assumed 1 if missing) and units of the requested step size |
| StepSchedule[2].RequestedAverageStepSize | - | 2W | Amount (optional, assumed 1 if missing) and units of the requested step size |
| StepSchedule[2].UseForTheRemainder | False | True | Whether this time step applies after the last tenor defined. This can only be true for the last period, and if this is true the PeriodLength must be left unset |

FXMCPLSimulatorOptionsPP

| Input Name | Default | Recommended | Description |
|---|---|---|---|
| NPaths | 1024 | 2ⁿ - 1, n ∈ {17,...} | The number of paths for Monte-Carlo |

FXMCRNGOptionsPP

| Input Name | Default | Recommended | Description |
|---|---|---|---|
| Seed | 0 | Any non-negative integer (60497) | The seed for the pseudo-random number generator |
| UseSobolForPathGeneration | False | True | Use Sobol for path generation |
| SobolPseudoRandomSplitByModel | False | True | If true then the model determines how best to do the Sobol pseudo-random splitting. |
| UseParallelMersenneTwister | False | True | Use the Parallel Mersenne Twister for path generation |
| BatchIndexForParallelMT | - | Integer between 0 and 9999 (10) | Batch index for the parallel Mersenne Twister |
| UseSpectralDecomposition | False | False | Use spectral decomposition for path generation (False/Unset = Brownian bridge) |
| SobolSequenceType | SOBOL_1111 | SOBOL_21201 | Sobol Sequence Type, SOBOL_21201 or SOBOL_1111 |

### 5.3 Quality control

Monte Carlo techniques are heavily used in production. Experience indicates that they have good convergence and stability. In addition, in Monte-Carlo pricing we get the standard error out for PV values. This can be used to monitor the quality of returned values of PV, but not risk.

### 5.4 Limitations

At this stage we only test the model for single-currency-pair trades. Theoretically we can apply the model within Monte-Carlo framework to N currency pairs, but questions remain how to correctly model the correlation between volatility processes of each currency pair, and moreover how to calibrate cross-correlations accordingly to match cross-smiles. We do not discuss the multi-currency case in this document.

In addition, Monte-Carlo prices are less accurate when number of paths is too small and/or when time schedule is too coarse. User should check pricing result has converged with selected simulation settings such as the number of paths and time schedule.


## 6. Calibration

The principle of calibration for LSV MS used with Monte Carlo engine is identical to the one with PDE engine. We will refer to [1] for more details. An important difference with the calibration of LSV MS Monte Carlo is how time grids for calibration are specifically build from Monte Carlo time discretization.

### 6.1 Description

The calibration routine for Local Stochastic Volatility (LSV) model family consists of two main steps:

- Calibrate stochastic volatility (SV) model parameters to market observables.
- Calibrate Local Volatility correction from Local Volatility grid using a forward induction PDE.

The following sections will discuss above two steps respectively, applying to both Monte Carlo and PDE engine. The last sub-section will emphasis on the time grid construction specifically used with Monte Carlo.

#### 6.1.1 Calibration of Stochastic Volatility

In general, the stochastic volatility parameters can be either:

- Marked by Trading Desks to match directly to market observable prices of path-dependent options such as double no-touches.

- Calibrated to market vanillas (ATM options and 25-Delta strangles) internally inside QA. Then a mixing weight/ a scaling factor is applied to scale the Vol of Vols parameters.

In production, the Trading Desk prefers marking the stochastic volatility parameters over internal calibration, as it provides more transparency to monitor the parameters being used, especially the applied Vol of Vols values. In addition the marking process is independent of internal calibration algorithm.

Therefore in production, all stochastic volatility parameters are assumed marked (i.e. as Market-Data like input). Please note that all stochastic volatility model parameters are supplied as a term structure.

We will skip details on internal calibration algorithm on stochastic volatility parameters. Please refer to Section 6.1 in [1] for more information.

#### 6.1.2 Calibration of Local Volatility Correction

The calibration on Local Volatility correction relies on Gyöngy's Theorem and Dupire's formulae.

Gyöngy's Theorem states that the relationship between a Local Stochastic Volatility process and its corresponding Local Volatility can be described using the following formula:

$$\sigma^2_{Local}(x,t) = E[\Sigma^2(t) \times A^2(S(t),t)|S(t) = x]$$

Namely, given stochastic volatility parameters and specified $\Sigma(t)$, the Local Volatility correction can be derived from Local Volatility surface $\sigma_{Local}(S(t),t)$.

According to Dupire's formulae, the Local Volatility surface can be uniquely determined by the market vanilla prices:

$$\sigma^2_{Local}(K,T) = \frac{\frac{\partial C(K,T)}{\partial T} + (r_d - r_f)K\frac{\partial C(K,T)}{\partial K} + r_f C(K,T)}{\frac{1}{2}K^2\frac{\partial^2 C(K,T)}{\partial K^2}}$$

Where $r_d, r_f$ are deterministic short rate as derived from the domestic/foreign discounting factor for tenor $T$.

In practice, Local Volatility is sampled on a spot-maturity grid and carried by an LVCone structure. In addition, Local Volatility is computed in terms of the implied variance rather than vanilla prices. More details can be found in [17].

Once the Local Volatility surface $\sigma_{Local}(S(t),t)$ and stochastic volatility process $\Sigma(t)$ are both calibrated, the Local Volatility correction $A(S(t),t)$ can be calibrated based on Formula 6.1 by solving a Fokker Planck forward PDE (one-dimensional PDE with planes). The detailed steps evolving the forward PDE can be referred to Section 6.1 in [1].

#### 6.1.3 Time Grids Construction in Calibration of LSV MS Monte Carlo

In LSV MS Monte Carlo, the calibration time grid for forward PDE is build from the time schedule of Monte Carlo simulation, which is an important difference from LSV MS PDE. Hence, the original setting entry DateOptions.TotalNumberOfTimeSteps in LSV MS calibration instruction has no impact in the context of LSV MS Monte Carlo.7

##### 6.1.3.1. Time Step Schedule for Monte Carlo

The construction of time grid starts with generating the time step schedule of Monte Carlo simulation, which consists of three steps:

- With default setting in section 5.2, the time grid will include a daily step up to 2 months, a weekly step in the following 1 year, and a biweekly step for the remainder (till the end of trade's horizon). Note that each schedule period is additive (2 months followed by another 1 year).

- Next, all trade event dates are added to make sure the simulation captures all payout-related operations.

- At last, all dates corresponding to the term structure of piecewise-constant stochastic volatility parameters are sequentially added to time grid (set explicitly by Trading Desks via input).

The time grid is used directly for the Monte Carlo simulation. It is also shared by LSV MS calibration algorithm (PDE time grid), except that several Rannacher Steps will be further added per user's instruction.

##### 6.1.3.2. Adding Rannacher Steps to Calibration Time Grids

Several additional Rannacher Steps will be added to above time step schedule for Monte Carlo simulation before being applied to the calibration of LSV MS Local Volatility correction. Such a modification is controlled by the setting entry DateOptions.TotalNumberOfRannacherSteps. The existing implemented logic will add above number Rannacher Steps and 3 additional steps for PDE time evolution.

The modification involves two steps, illustrated with an example of TotalNumberOfRannacherSteps=4:

- Original Grid

- Add mid points in the first TotalNumberOfRannacherSteps/2 steps. (Round down to nearest integer if the input number is odd.)

- Add 3 points successively in the middle of the first step of the modified grid.

- The final Rannacher Steps are highlighted as below, with 7 steps in total in given example.

Rannacher Steps are useful to reduce oscillations at the inception, especially for backward PDE. For forward PDE, the impact of Rannacher Steps is only relatively significant for short-dated calibration. The recommended value of TotalNumberOfRannacherSteps is between 10 and 20. Please refer to [24] for more details.

7 The only exception is the case where stochastic volatility (SV) calibration may require a PDE grid instead of bootstrapping. In production however, as user always provides stochastic volatility parameters as market data like input, the above case is out of scope. We hence assume the entry is irrelevant for LSV MS Monte Carlo in this document.

### 6.2 Inputs

#### 6.2.1 Reference Data: Market Data and Other Data Inputs

As stated above, the following market data is required for calibration:

- Yield curves for both foreign and domestic currency.
- Underlying FX spot levels.
- Underlying FX Volatility surface.

In addition, the following market data like parameters are required as well:

- Transition scalar parameter $q(t)$ with term structure.
- Volatility of volatilities (Vol of Vols) parameter $a(t)$ with term structure.

##### 6.2.1.1. Data sources

All market data sourced by LSV MS are from internal official documents published in Market Environment. Items including FX spot levels, yield curves, volatility surfaces, etc. are published by the trading desk and verified by IBMO on a regular basis. Example monikers will be provided in section 8.

##### 6.2.1.2. Data availability/history

All information on market data availability/history can be queried from Market Environment.

##### 6.2.1.3. Data quality and data checks

Data quality and checks are under sufficient controls by IBMO on a regular basis.

#### 6.2.2 Calibration Algorithm Inputs

Here we go through the calibration settings and provide descriptions & recommended values. If no explicit recommended value is stated, the default values are recommended. For more details on calibration inputs, please refer to Section 6.2 in [1].

##### 6.2.2.1. Stochastic Volatility Calibration Settings

SVMarkovSwitchingCalibrationInstructions_PP

| Input Name | Default | Recommended | Description |
|------------|---------|-------------|-------------|
| SVParameters[i].Date | | e.g. 1M, 3M, 6M, 1Y, 2Y, etc. | Date/Tenors for the stochastic volatility parameters. [i] represents the index in the collection. The value applies piecewise-constantly to any time before current date up to the previous defined date. |
| SVParameters[i].Skew | | 1.0 | The skew parameter in the stochastic volatility Markov switching process. Only skew of 1.0 is supported. |
| SVParameters[i].VolFactor | | 1.0 | A factor common between the different volatility states. If not provided, it is fitted by the model. When Vol of Vols is marked to match exotic options (DNTs), it is merely a scaling factor to the local volatility correction. |
| SVParameters[i].VolOfVol | | e.g. 0.75 | The volatility of volatility parameter which measures the spacing between the different Markov volatility states. If not provided, it is fitted by the model. |
| SVMSModel | | SVMarkovSwitchingExponential_PP | Specification of the SV Markov Switching model used. |
| SVMSModel.NumberOfVolatilityStates | | 3 | The number of volatility states in Markov chain. |
| SVMSModel.TransitionMatrixScaling | | PieceWiseConstant | An enum to indicate the type of scaling applied to the transition matrix. |
| SVMSModel.TransitionQParameters[i].Date | | e.g. 1M, 3M, 6M, 1Y, 2Y, etc. | Date/Tenors for the transition scalar parameters. [i] represents the index in the collection. The value applies piecewise-constantly to any time before current date up to the previous defined date. |
| SVMSModel.TransitionQParameters[i].TransitionQ | | e.g. 0.8 | The transition scalar parameters corresponding to the specified tenors to define its full term structure. |
| SVMSModel.TransitionMatrixConstant | Q, an n x n matrix with diagonals equal to -1 with Q(0,1) = Q(n-1, n-2) = 0 and Q(i, i+1) = Q(i, i-1) = 0.5 for 0 < i < n-1 with n number of volatility states. $$Q = \begin{bmatrix} -1 & 1 & 0 \\ 0.5 & -1 & 0.5 \\ 0 & 1 & -1 \end{bmatrix}$$ For n = 3. | | Time independent constant Matrix defining the conditional transition probabilities. |
| SVMSModel.TransitionMatrixExponentialType | ExponentialFirstOrder | ExponentialExact / ExponentialFirstOrder | ExponentialExact will diagonalize the transition rate matrix and obtain exact matrix exponential. Otherwise a linear first order approximation is used. |

##### 6.2.2.2. Local Volatility Correction Calibration Settings

LVCorrelctionInstructionPP

| Input Name | Default | Recommended | Description |
|------------|---------|-------------|-------------|
| CalibrationEndDate | | (Last trade payment) | Last calibration date for the LV correction component. |
| DateOptions.TotalNumberOfTimeSteps | | | ** Obsolete in the context of LSV MS Monte Carlo |
| DateOptions.TotalNumberOfRannacherSteps | 14 | 10-20 | Number of Rannacher steps added to the time grid of forward PDE solver. |
| PDEGridSettings[0].PDEGridName | | SpotFX | Name of the grid observable in the PDE solver. |
| PDEGridSettings[0].NumberOfSpaceStdDevs | | 6 | The number of space standard deviations. |
| PDEGridSettings[0].NumberOfSpaceSteps | | 200 | The number of space steps |
| PDEGridSettings[0].UseNonUniformGrid | | TRUE | Whether to use a non uniform grid or not. |

#### 6.2.3 Other Inputs

Note that in production, the Vol of Vols $a(t)$ and transition scalar parameters $q(t)$ are market-data like, i.e. they are treated and specified as part of the input market data, rather than instruction input of the stochastic volatility calibration.

### 6.3 Justification against alternative approaches

The calibration process for Local Volatility correction is quite standard for a model combining Local and Stochastic volatility, which is based on the application of Gyöngy's Theorem along with Dupire's formulae for the Local Volatility function.

The calibration does not require a full two-dimensional forward PDE, as the stochastic volatility in Markov Switching assumes discrete volatility state values rather than being driven by a full Brownian motion. Instead, a one-dimensional PDE with planes can be utilized to represent the different volatility states, which possesses a substantial speed advantage.

### 6.4 Quality control

If the calibration of Local volatility correction fails at certain spot or time grid points, such failures are allowed at first and later fixed by interpolation or extrapolation using those successful calibrated points. If no successful calibration available, a floor volatility level is applied (0.0% by default).


### 6.5 Limitations and Risk Assessment

As the Local Volatility correction is calibrated to the market volatility smile, the model performance is subject to the quality of the input market data, i.e. a noisy Local Volatility surface may lead to pricing instability as Local Volatility correction parameters are badly calibrated.

The pricing performance will also be affected if a high Vol of Vols is applied to long-tenor trades. In such cases, user should apply dense PDE grid settings especially on time axis to improve calibration accuracy, which in turn render the calibration more time-consuming and numerically challenging.

#### 6.5.1 Stressed Market Conditions

Please refer to section 8.2 for more details on how the model behaves in stressed market conditions.

#### 6.5.2 Other

Not applicable.


## 7. Risk (Calculated by the model/payoff)

No new risk measures are required to run this model. The relevant risk measures are the same as for pure Local Volatility models including but not limited to FX Delta, FX Gamma, FXVega and Near/Far Rega/Sega.

### 7.1 Description

Risk metrics (Greeks) are calculated by bumping market data and recalibrating the model (bump and recalibrate methodology). Monte Carlo engine reuses the random numbers that were used for the base valuation to reduce noise. Market data perturbations are performed by the QARisk2 framework [18], which is a shared framework, used across QA models, for risk and scenario calculations.

### 7.2 Inputs

QARisk2 metrics can be configured with a set of inputs, such as a bump size, bump style (multiplicative, additive, etc.), differencing type (central, above, below, etc.), etc. A full description of the metric and listing of the inputs expected by each metric can be found in [19].

It is also possible to convert raw Deltas & Gammas from QARisk into an FX style format. These FX-style Deltas & Gammas are defined from an alternative perspective, so that Deltas/Gammas are independent of the basis of chosen spots and can be viewed purely as a property of a currency/currency pair. Moreover, FX Deltas would directly suggest the cash holding position/notional for each currency to construct the hedging portfolio. Further details can be found in [20].

For FX-specific risks Rega and Sega, convex bumping is introduced to avoid inconsistencies in bumped volatility surface. More details can be found in [21].

### 7.3 Limitations and Risk Assessment

There are no specific limitations introduced by the model.

As the model pricing depends on input smile volatility surface, errors may occur in risk evaluation if the original FX volatility surface is on the verge of breaking, i.e. the bumped volatility surface may fail to build despite a valid non-bumped volatility surface. New routines have been incorporated into the volatility surface publishing process to help Trading desks validate whether the surface works for potential bumped states.

## 8. Test and Outcome analyses performed on Payoff/Model/Portfolio

Unless stated otherwise, all the tests below are performed using QA Version 235304 with a valuation date and market date of Monday 01-Feb-2016. The monikers (Market Data) are listed in Table 8.1.

Details on trade inputs will be given at each testing section. For more explanations on trade payout and parameters, please refer to section 3.3.

Note that, without loss of generality, the testing on convergence and risk profile will focus on 2Y tenor in accordance to trading book exposure and intended model coverage. With appropriate adjustment on settings, user is able to produce similar testing results to verify model accuracy & stability across tenors.

For short-dated products (tenor ≤ 2Y), the corresponding mean-reverting volatility surface is used. For long-dated products (tenor > 3Y), we switch to the long-dated volatility surface.

Table 8.2 highlights the input for transition scalar parameters and volatility of volatilities parameters suggested by Trading Desks and used in production. Such a term-structure is currency or currency-pair dependent, which is specified & published by Trading Desks according to market behaviours.

### Table 8.1 Input Market Data (monikers) for Testing

| Item | Moniker | Note |
|:-----|:--------|:-----|
| FX Spot | official@20160201/chain.fx/fx.liro/usd/ldnclose | EURUSD |
| Yield Curve | official@20160201/curve.swap/LDNCLOSE/EUR/MID/exotics6m_new | EUR |
| Yield Curve | official@20160201/curve.swap/LDNCLOSE/USD/MID/LIBOREXOTICS | USD |
| FX Volatility | official@20160201/volsurface.fx/global/EURUSD/meanreverting/default | Short-Dated |
| FX Volatility | official@20160201/volsurface.fx/ldnclose/EURUSD/longdate/pricing | Long-Dated |
| Transition q | official@20160201/generic.qa.market.object/global/TRANSITIONQ/EURUSDBLOCK/markovswitching | EURUSD |
| Vol of Vols | official@20160201/generic.qa.market.object/global/VOLOFVOL/EURUSDBLOCK/markovswitching | EURUSD |

### Table 8.2 Input for Transition Scalar q and Volatility of Volatility in production⁸

| Tenor | 1W | 2W | 1M | 3M | 6M | 9M | 1Y | 2Y | 3Y | 5Y | 10Y | 20Y | 40Y |
|:------|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:----|:----|:----|
| Transition q | 3.80 | 3.80 | 2.00 | - | - | - | - | 0.80 | - | 0.40 | 0.20 | 0.20 | 0.20 |
| Vol of Vols | 1.10 | 0.85 | 0.75 | 0.70 | 0.65 | 0.61 | 0.60 | 0.58 | 0.55 | 0.50 | 0.60 | 0.59 | 0.59 |

⁸ Note: The value at each tenor is interpreted as follows: for example, 0.8 of Transition q at 2Y means, the transition q in tenor interval (1M, 2Y] is 0.8.

### 8.1 Back-testing

A model with good pricing performance should produce a small variation in P&L during a historical hedging simulation, even during stressed market periods. The advantage of LSV MS PDE compared to other models has been verified by the back-testing results presented in section 8.1 in [1]. Hence in this document we focus on whether LSV MS MC can match the performance of LSV MS PDE.

The back-testing tool loads historical market data by a given schedule, and manages the risk profile of the trade over its lifetime. At each scheduled date, Greeks of the underlying trade are calculated, and then used to calculate the amount/notional of hedging instruments to be held in the hedging portfolio.

The hedging strategy is as follows: Near/Far Rega and Sega risks are hedged by corresponding risk-reversals (RR) and strangles (STR) respectively with same tenor exposure. The aggregated Vega (including RR and STR) is hedged by at-the-money vanilla options with same tenor exposure. The aggregated FX Delta is hedged by using forward contracts at the same maturity of the trade. Any residual cash will be invested in a bond in premium currency to earn interests. When Vega/Rega/Sega risks with 1D tenor are not specifically being hedged, FXGamma can be hedged by overnight (1D) at-the-money options. The hedging portfolio is re-balanced accordingly (unwounded in every hedging step and then re-hedged), and a historical record of the P&L is reported.

The hedging simulation results for a 3M at-the-money-spot Vanilla option is presented in Figure 8.1, where we compare the P&L in percentage of notional starting from 01-Feb-2016 to 29-Apr-2016 among LSV MS MC, LSV MS PDE and LV MC. The hedging simulation is scheduled on a daily basis, and bid/offer spreads as well as transaction costs are ignored. The plots also include how the FX spot level changes over the simulation period.

The back-testing results show that LSV MS MC are consistent with LSV MS PDE in hedging performance (compared to LSV MS PDE, the difference is only around half a basis point in percentage of notional in final P&L which is comparably acceptable). Although respective P&Ls have variations over their lifetime, the movement is always bounded within 2bps, and no significant explosion when large moves occur in market.

![Figure 8.1 Back-testing 3M ATM-Spot (1.0892) vanilla option using LSV MS PDE, LSV MS MC and LV MC, hedged by Parallel Vega, Near &.Far Rega, Near & Far Sega and FX Delta.](./Fig/1.png)

### 8.2 Scenario and Stress-testing

The back-testing outlined in 8.1 shows that the model performs well through a volatile period, during which the market experiences several large moves in FX spot levels.

Tests on risk profile in the coming section 8.5.3 will provide evidence of pricing stability of LSV MS Monte Carlo, where the model is able to produce consistent and stable risk profiles under different market scenario (e.g. a large span of spot levels, or a large shock in at-the-money FX volatility term structure).

### 8.3 Statistical testing

Not applicable for valuation models.

### 8.4 Impact of Assumptions and Limitations

There are no assumptions or limitations specific to the Monte Carlo technique for LSV Markov Switching model.

### 8.5 Accuracy, convergence, stability and sensitivity

#### 8.5.1 Accuracy and convergence

In this section we will look at how well European Vanilla options are re-priced. The benchmark we choose to evaluate the accuracy and convergence of LSV MS MC is Analytic Smile model pricer. Also we present the re-pricing performance of Local Volatility Monte Carlo (LV MC) with same Monte Carlo simulation settings to illustrate an acceptable range of mispricing error due to MC simulation.

##### 8.5.1.1. Accuracy

For accuracy testing, we select 6M, 2Y and 7Y tenors. For each tenor, we extract 11 strikes corresponding to 5, 10, 25, 40 and 50 (ATM-Forward) forward deltas for calls & puts from volatility surface. All calculated vanilla prices are converted back to the implied volatility.

To achieve a better convergence performance, the time stepping applied is as follows: 8-hour stepping for 1 month, continued with daily stepping for another three months, then 3-day stepping for 1 year and weekly stepping for remainder. A total of 2¹⁸ − 1 paths are used to make sure the price converged. Other settings are applied by default recommendation.

Table 8.3 shows LSV MS MC is able to match the prices from Analytic model. Compared to LV MC, LSV MS MC is able to re-price all given vanillas within an acceptable range of error.

### Table 8.3 LSV MS MC re-prices FX smiles compared to Analytics and LV MC

| Tenor | 6M |||||||| 
|-------|---|---|---|---|---|---|---|---|
| F-Delta | Strike | Analytic | LSV MS MC | Diff (Analytic) | LV MC | Diff (Analytic) | |
| 5 FD-P | 0.9582 | 11.75% | 11.72% | -0.03% | 11.71% | -0.03% |
| 10 FD-P | 0.9914 | 11.29% | 11.26% | -0.03% | 11.27% | -0.02% |
| 15 FD-P | 1.0129 | 11.00% | 10.97% | -0.03% | 10.99% | -0.01% |
| 25 FD-P | 1.0436 | 10.61% | 10.58% | -0.03% | 10.60% | -0.01% |
| 40 FD-P | 1.0776 | 10.24% | 10.22% | -0.02% | 10.24% | 0.00% |
| ATMF | 1.0946 | 10.10% | 10.07% | -0.02% | 10.10% | 0.01% |
| 40 FD-C | 1.1174 | 10.04% | 10.02% | -0.02% | 10.04% | 0.00% |
| 25 FD-C | 1.1519 | 10.14% | 10.12% | -0.02% | 10.14% | -0.01% |
| 15 FD-C | 1.1842 | 10.35% | 10.34% | -0.02% | 10.34% | -0.01% |
| 10 FD-C | 1.2079 | 10.55% | 10.54% | -0.01% | 10.53% | -0.02% |
| 5 FD-C | 1.2468 | 10.93% | 10.92% | -0.01% | 10.89% | -0.04% |

| Tenor | 2Y |||||||| 
|-------|---|---|---|---|---|---|---|---|
| F-Delta | Strike | Analytic | LSV MS MC | Diff (Analytic) | LV MC | Diff (Analytic) | |
| 5 FD-P | 0.8525 | 12.40% | 12.38% | -0.02% | 12.38% | -0.01% |
| 10 FD-P | 0.9171 | 11.80% | 11.79% | -0.01% | 11.79% | -0.01% |
| 15 FD-P | 0.9597 | 11.43% | 11.42% | -0.01% | 11.42% | -0.01% |
| 25 FD-P | 1.0212 | 10.94% | 10.93% | -0.01% | 10.94% | 0.00% |
| 40 FD-P | 1.0906 | 10.49% | 10.49% | -0.01% | 10.49% | 0.00% |
| ATMF | 1.1200 | 10.35% | 10.34% | -0.01% | 10.35% | 0.00% |
| 40 FD-C | 1.1742 | 10.24% | 10.23% | -0.01% | 10.25% | 0.00% |
| 25 FD-C | 1.2492 | 10.33% | 10.31% | -0.02% | 10.32% | -0.01% |
| 15 FD-C | 1.3221 | 10.55% | 10.54% | -0.02% | 10.54% | -0.01% |
| 10 FD-C | 1.3778 | 10.79% | 10.78% | -0.01% | 10.77% | -0.01% |
| 5 FD-C | 1.4733 | 11.24% | 11.25% | 0.00% | 11.22% | -0.02% |

| Tenor | 7Y |||||||| 
|-------|---|---|---|---|---|---|---|---|
| F-Delta | Strike | Analytic | LSV MS MC | Diff (Analytic) | LV MC | Diff (Analytic) | |
| 5 FD-P | 0.7156 | 13.85% | 13.86% | 0.01% | 13.84% | -0.01% |
| 10 FD-P | 0.8329 | 13.09% | 13.09% | 0.00% | 13.08% | -0.01% |
| 15 FD-P | 0.9131 | 12.71% | 12.71% | 0.00% | 12.71% | 0.00% |
| 25 FD-P | 1.0345 | 12.36% | 12.35% | -0.01% | 12.36% | 0.00% |
| 40 FD-P | 1.1868 | 12.21% | 12.20% | -0.01% | 12.21% | 0.00% |
| ATMF | 1.2226 | 12.19% | 12.19% | 0.00% | 12.19% | 0.00% |
| 40 FD-C | 1.3991 | 12.26% | 12.27% | 0.01% | 12.26% | 0.00% |
| 25 FD-C | 1.6167 | 12.56% | 12.57% | 0.01% | 12.56% | 0.00% |
| 15 FD-C | 1.8553 | 13.04% | 13.05% | 0.01% | 13.03% | -0.01% |
| 10 FD-C | 2.0565 | 13.46% | 13.47% | 0.00% | 13.46% | -0.01% |
| 5 FD-C | 2.4366 | 14.22% | 14.22% | 0.00% | 14.21% | -0.01% |

![Vol Smile: LSV MS MC vs. Analytic -- 6M EURUSD](./Fig/2.png)

![Vol Smile: LSV MS MC vs. Analytic -- 2Y EURUSD](./Fig/3.png)

![Vol Smile: LSV MS MC vs. Analytic -- 7Y EURUSD](./Fig/4.png)

Figure 8.2 LSV MS MC re-prices FX smiles compared to Analytics.

It's worth noting that the accuracy will be largely improved even with small number of paths when user appropriately adjusts the time stepping schedule according to tenor length. Please refer to section 8.8.3 for more information.

#### 8.5.1.2. Convergence in Number of Simulated Paths

For convergence testing, recall that a cash-settled 2Y ATM-Spot (1.0892) vanilla call is used.

![Figure 8.3 LSV MS MC converges to Analytic price as number of paths increases.](./Fig/5.png)

#### 8.5.1.3. Convergence in Volatility of Volatilities (Vol of Vols)

For a LSV Markov Switching model, the re-pricing error will converge towards a baseline as volatility of volatilities decreases. A large value in Vol of Vols can lead to big value gaps between different volatility states, which potentially increase the numerical error both in calibration and simulation.

Given current default input of Vol of Vols, we apply a percentage-wise parallel shift to its whole term structure, and evaluate the implied volatilities of those 11 2Y-tenor call/puts selected for accuracy testing. We take the maximum absolute miss-pricing error among all 11 vanillas as an overall measure on accuracy.

As shown in Figure 8.10, an increased Vol of Vols will lead to a potential larger re-pricing error across the volatility curve on a certain tenor. When Vol of Vols decreases to zero (shift down 100% relatively), the re-pricing error converges to a certain level close to zero, which can be explained by the numerical error from Local Volatility calibration and Monte-Carlo simulation.

![LSV MS MC Convergence in Vol of Vol](./Fig/6.png)

Figure 8.4 Accuracy in terms of implied volatility error for LSV MS MC against different Vol of Vols

#### 8.5.1.4. Behaviour with respect to Transition Parameter q

Similar convergence testing are performed for Transition Parameter q, where the current transition parameter q term structure is parallel shifted by a percentage from -100% to 100%. We still use the maximum absolute re-pricing error among those 11 2Y-vanillas as the measure of accuracy.

Unlike Vol of Vols, a decreasing value of transition parameter q does not change the maximum error among all vanillas significantly. Taking simulation variation into consideration, the testing results show that the re-pricing accuracy remains at a certain level when shifting current transition parameter term structure.

![LSV MS MC Behaviour w.r.t Transition Parameter q](./Fig/7.png)

Figure 8.5 Accuracy in terms of implied volatility error for LSV MS MC against different Transition Parameter q

### 8.5.2 Stability

For valuation models, stability would be measured in terms of Greeks. Stable Greeks would imply that the models respond in a stable and well behaved manner to perturbations of market inputs. Please see the next subsection 8.5.3 for more details.

### 8.5.3 Sensitivity

In this section we generate risk profiles for a cash-settled 2Y EURUSD ATM-Spot (1.0892) vanilla call using LSV MS MC, and compare them to the profile generated by Analytic Smile model pricer.

There are two separate scenarios being considered for each numerical method:

- A two-sided span of FX spot level (shift current level by ±36%).
- An upside shock to the FX term-structure ATM volatilities (shift current level from 0 to 100%).

The risk profile is composed of following risk entries: PV, FXDelta (Foreign currency), FXVega, FXGamma, FXVolGamma, FXVanna, Near/Far Sega/Rega. All risks are represented as a proportion of the trade notional in domestic currency.

The first scenario is a two-sided span of FX spot level. LSV MS MC provides a good match in risk profile.

Note that all simulations are run with 2¹⁷ − 1 paths with default metric settings in production. Time stepping schedule is the same as used in convergence testing. For second order derivatives such as FXGamma, FXVanna and FXVolGamma, slight oscillations can be observed yet the differences are within small range (compare each single run between LSV MS MC and Analytic model, the maximum difference is less than 0.01% of notional amount, and the maximum relative error against peak value is smaller than 5%). To further smooth the profiles of second order derivatives, user can increase the bump size from default 0.001 up to 0.005.

### Spot Scenario Analysis

The following figures show risk profile comparisons between LSV MS MC and Analytic model for different Greek calculations across varying EURUSD spot levels:

![PV](./Fig/9.png)

![FXVega](./Fig/10.png)

![NearRega](./Fig/11.png)

![FarRega](./Fig/12.png)

![FarSega](./Fig/13.png)

![NearSega](./Fig/14.png)

![IRDelta (EUR)](./Fig/15.png)

![IRDelta (USD)](./Fig/16.png)

![FXGamma](./Fig/17.png)

![FXVanna](./Fig/18.png)

![FXVolGamma](./Fig/19.png)

**Figure 8.6 Spot Scenario for 2Y ATMS Vanilla: Comparison between LSV MS MC and Analytics.**

The second scenario is an upside shock (up to 100% of current level) on FX volatility ATM term-structure. LSV MS MC provides a satisfactory match in risk profile as shown below. All simulations are run under 2¹⁷ − 1 paths with the same time stepping schedule used in convergence testing.

All metric bump sizes are set by default except for FXGamma and FXVanna, where large oscillations in profile was observed and an increased bump size of 0.005 has improved the smoothness as shown in the final results as below.

Note that the profile mismatch in Near Rega, Near Sega and Far Rega are acceptable, considering the absolute differences in all runs are within 0.02% of notional.

### Volatility Shock Scenario Analysis

The following figures show risk profile comparisons with varying levels of EURUSD volatility shock:

![PV](./Fig/20.png)

![FXVega](./Fig/21.png)

![FXDelta (EUR)](./Fig/22.png)

![NearRega](./Fig/23.png)

![FarSega](./Fig/24.png)

![FarRega](./Fig/25.png)

![IRDelta (EUR)](./Fig/26.png)

![IRDelta (USD)](./Fig/27.png)

**Figure 8.7 Volatility Shock Scenario for 2Y ATMS Vanilla: Comparison between LSV MS MC and Analytics.**

The above results show that LSV MS Monte Carlo is able to produce stable risk profiles across wide ranges of market conditions. In both scenarios, risks as a proportion of notional are closely matched to the Analytic equivalent. First and second order derivatives show the correct shapes and symmetries, and the numerical errors are within acceptable range. The model is overall robust and is able to generate key FX risk metrics suitable for both pricing and hedging purposes.

## FXGamma

![Figure showing FXGamma graphs](./Fig/1.png)

### EURUSD VolShock

## FXVanna

![Figure showing FXVanna graphs](./Fig/2.png)

### EURUSD VolShock

## FXVolGamma

![Figure showing FXVolGamma and EURUSD VolShock](./Fig/3.png)

Figure 8.7 Volatility Scenario for 2Y ATMS Vanilla: Comparison between LSV MS MC and Analytics.

## 8.6 Boundary Cases

When the volatility of volatilities is set to a value close to zero, the stochastic nature of instantaneous spot volatility will be removed. Therefore the model will be equivalent to a local volatility model.

On the other hand, when the transition parameter q is set to a value close to zero, there is no volatility switching anymore, however the instantaneous spot volatility is still stochastic. Such a model is called the One Plus model. The volatility state number is determined at inception with a predefined distribution of probability obtained during the calibration. During the diffusion, the state number of volatility remains the same, yet the volatility value at the state can change by predefined Vol-of-Vol term structure.

Please note that, an exact zero value as the input of either volatility of volatilities or transition parameter q will cause an error. To observe boundary cases, user could use a very small non-zero value instead.

The same 2Y ATMS vanilla option, as well as simulation/calibration configuration is used for testing.

In the case of zero Vol of Vols, we compare the convergence behaviour of LSV MS MC to LV MC with same simulation settings and local volatility calibration settings. Both models converge to analytic benchmark as the number of simulated paths increases.

![LSV MS MC Convergence in Zero Vol of Vol](./Fig/4.png)

Figure 8.8 Boundary Cases for Zero Volatility of Volatilities – LSV MS MC Degenerates to LV MC

In the case of zero transition parameter q, LSV MS MC degenerates to LSV One Plus model. As shown in Figure 8.10, the degenerated case also has a good convergence towards benchmark as the number of simulated paths increases.

Note that LSV One Plus in fact has a faster convergence rate compared to a complete LSV MS MC (compared to Figure 8.3), and is almost as good as LV MC. Although LSV One Plus still has a stochastic feature due to the initial state probability distribution, the path counting algorithm (section 5.1.1) contributes much less noise to Monte Carlo spot diffusion and enhances the convergence performance.

![LSV MS MC Convergence in Zero Transition q](./Fig/5.png)

Figure 8.9 Boundary Cases for Zero Transition Parameter q – LSV MS MC Degenerates to LSV One Plus

## 8.7 Comparison to Other Models

LSV Markov Switching Monte Carlo model pricer is mainly compared to Analytic Smile model pricer and Local Volatility Monte Carlo model pricer in this document.

Local Volatility model has been proved extremely stable in production. Its convergence can be reached after 30K to 40K paths in cases of single-dimension diffusion.

Another main comparison that can be made is LSV MS MC against LSV Hybrid model with Monte Carlo. Without losing of generality, we use the same 2Y ATMS vanilla option to illustrate the convergence performance between LSV MS MC and LSV Hybrid MC.

![LSV MS MC Convergence in Path](./Fig/6.png)

Figure 8.10 LSV MS MC and LSV Hybrid MC converges at similar rates to Analytic price as number of paths increases.

## 8.8 Other Outcome Analysis / Testing

As part of the model development process, here we include several items that were tested by the developer in 2013 for additional information.

For tests in this section, the valuation date is Thursday 07-Feb-2013 and the corresponding monikers (Market Data) are listed in below table.

Table 8.4 Input Market Data (monikers) for Testing in this section

| Item | Moniker | Note |
|------|---------|------|
| FX Spot | official@20130207/chain.fx/fxderivsldnclose/USD/corrected | USDJPY |
| Yield Curve | official@20130207/curve.swap/fxexoticsldnclose/JPY/mid/libor | JPY |
| Yield Curve | official@20130207/curve.swap/fxexoticslndclose/USD/mid/libor | USD |
| FX Volatility | official@20130207/volsurface.fx/ldnclose/USDJPY/longdate/cob | Long-Dated |

Table 8.5 Input for Transition Scalar q and Volatility of Volatility for Testing in this section^9

| Tenor | 1W | 2W | 1M | 3M | 6M | 9M | 1Y | 2Y | 3Y | 5Y | 10Y | 20Y | 40Y |
|-------|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|------|------|------|
| Transition q | 24 | 0.80 | 0.80 | - | - | - | - | 0.80 | - | 0.40 | 0.20 | 0.20 | 0.20 |
| Vol of Vols | 0.85 | 0.75 | 0.60 | 0.60 | 0.60 | 0.60 | 0.65 | 0.77 | 0.79 | 0.79 | 0.79 | 0.79 | 0.79 |

^9 Note: The value at each tenor is interpreted as follows: for example, 0.8 of Transition q at 2Y means, the transition q in tenor interval [1M, 2Y] is 0.8.

### 8.8.1 Sobol Generators

In 2013, FX Monte Carlo Framework was connected to Sobol 1111 quasi random generator [11]. A new Sobol quasi random number generator was implemented in QA based on [12], with a major improvement in Sobol number dimension increased to 21201. We allowed LSV MS Monte Carlo simulates paths using this new generator. The dimension of the Sobol generator corresponds to the maximum number of Sobol values that can be used within one simulated path. In practice if the length of time steps is too small and the maturity is long, one can reach Sobol's maximum dimension and therefore has to complete Sobol numbers by another type of generator (usually the Mersenne Twister algorithm). Involving another generator to fill up the void would lower the speed of the convergence, as Sobol quasi random numbers have proved to be much more efficient than pseudo random numbers [13].

We analyzed the impact of Sobol generators on the convergence for several cases. The example below shows a 7Y USDJPY ATM put options, where a simulation using Sobol 21201 seems to reduce slightly the noise of LSV MS MC. The model converges towards LV above 40K with Sobol 21201, whereas 100K paths are required to have similar convergence with Sobol 1111.

However the conclusion is not universal. For example a similar test on 7Y USDJPY call option shows Sobol 21201 generator has a less satisfactory convergence performance.

![USDJPY ATM 7Y Put Vol error as a function of MC Paths](./Fig/7.png)

Figure 8.11 Convergence of Vanilla Options in Simulation Paths with Different Sobol Generator

The improvement or deterioration of the convergence quality with new Sobol generator is mostly case-dependent. Therefore we do not suggest any change to default Sobol generator. However it is worth testing on a book level and comparing these two generators to have statistically significant results with less numerical bias.

### 8.8.2 Convergence for Variance Swaps

Below we show the convergence of PV for two different Variance Swaps on USDJPY with 2Y and 4M maturities respectively. Both Variance Swaps have a notional of 1,000,000 USD (93,192,800 JPY), a strike volatility 11.86%, a weekly fixing schedule and an annual factor of 252 (days). Mean Subtraction is switched off, and the unbiased estimate (i.e. divided by $N − 1$) is used for realized variance. Please refer to [23] for more details on the setup of Variance Swaps using Padla with Monte Carlo.

Variance swaps are theoretically model-independent, yet here the discretized version of it could have minor model dependencies. We can observe that LSV MS converges towards the same value as Local Volatility model with no bias and the convergence is within an acceptable range above 100K paths. For the short term Variance Swap, LSV hybrid shows a bias versus two other models which could result from a calibration issue.

![PV of Variance Swap (2Y) Convergence in Path](./Fig/8.png)

Figure 8.12 Convergence of Variance Swap (2Y on the left and 4M on the right) in Monte Carlo Simulation Paths

### 8.8.3 Discussion on Time Steps and Default MC Steps Parameters

The time discretization in Monte Carlo simulation has an impact on convergence. On one hand, if the length of time step is too large, the simulation will lose some fine granularity of the volatility structure especially at short tenors. For instance, a time step of every 30 days will give up the details at one day and one week tenors, which makes it difficult to reproduce market prices on those tenors correctly. Therefore using a long time step could potentially introduce discretization bias on convergence. On the other hand, by taking a very tiny time step, the simulation will slow down significantly. For example, if we simply use a daily step, each single path would require 365 steps to simulate a 1Y option. If we increase the time step to every 10 days, we speed up the calculation by a factor 10. Also with a shorter time step, the selected type of interpolator would have a larger impact on pricing performance, as more values would be requested from interpolation.

Below we study the impact of time step length of a USDJPY 7Y ATM option. We have used a uniform time grid with various time steps (1D, 3D, 5D, 1W, 2W, 1M, 3M) with a fixed number of paths, and plot the error as a function of the time step length.

The graphics below show that the error is smaller when the average time step of the uniform grid is between 5D and 2W compared to shorter steps (1D) or larger steps, which justifies our discussion above.

![Price error in % of Notional as a Function of Time step in Number of day 30K Monte Carlo paths](./Fig/9.png)

Figure 8.13 Price Error of USDJPY Vanilla Options Given Different Length of Simulation Time Step

In practice, however, one usually does not take a uniform time grid; the grid is refined close to the valuation day. For example, a daily step during the first month, then a weekly step during the next couple of months and if the maturity is long enough, we can further take a biweekly or monthly time step afterwards. There is no perfect rule on how this should be set, as this remains empirical. For short dated products, user should consider add more dense time steps to capture the rapid change in volatility structure.

## 9. General Limitations

Any model is an approximation to reality.

The accuracy of the models should only be judged with due regard to materiality in the context in which the model is used.

As with most of the models of mathematical finance, a number of idealized assumptions have been made including, but not limited to

- Assumption of no arbitrage
- Assumption of frictionless trading
- No limits on positions long nor short

Numerical methods, as a rule, provide only an approximation to the true model price or risks.

Calibration routines, especially those relying on non-linear optimization, reproduce market inputs only approximately.

For any model there may exist market conditions for which this model is inappropriate.

## 10. Model Monitoring – KPIs

Not applicable. KPIs for valuation models would be governed outside of this document by the IRMF.

### 10.1 Monitoring Tests and Key Performance Indicators (KPI)

Not applicable. (Reasons stated above).

### 10.2 Performance Exceptions

Not applicable. (Reasons stated above).

### 10.3 Exception Mitigation Plan

Not applicable. (Reasons stated above).

## 11. References

[1] L. Sadiq, "LSV Markov Switching : PDE", Xsigma Capital, QA internal document (2014). [Link](http://qa.barcapint.com/Publications/Models/Macro/FX/Models/LSV/LSV%20Markov%20Switching%20-%20PDE.pdf)

[2] N. Oliver, "Computing the Distribution of the Variance in a Markov Switching Model", Xsigma Capital, QA internal document (2012). [Link](http://qa.barcapint.com/Publications/Models/Macro/FX/Models/LSV/MarkovSwitchingVarianceDistribution.pdf)

[3] A. Doucet, N. d. Freitas, N. Gordon, Statistics for Engineering and Information Science, Springer (2001).

[4] B. Arouna, Variance Reduction and Robbins-Monro Algorithms (2002). [Link](https://www.rocq.inria.fr/mathfi/Premia/free-version/doc/premia-doc/pdf_html/Arouna_doc.pdf)

[5] Padla QAWiki Page. [Link](http://qa.barcapint.com:8080/wiki/Padla)

[6] S. Frankau, Notes on Using Sobol' Sequences, Xsigma Capital, QA internal document (2007). [Link](http://qaserver/QAMembers/FrankauS/sobol.pdf)

[7] Y. Dolivet, Testing the Parallel MT Generator, Xsigma Capital, QA internal document (2008). [Link](http://qa.barcapint.com/Publications/Models/EDC/Monte%20Carlo/Random%20Number%20Generators\ResultsOfParallelMTAnalysis.doc)

[8] Random Number Generation in FX MC. [Link](http://qa.barcapint.com:8080/wiki/Random_Number_Generation_in_FX_MC)

[9] C. Waddell, F. Waldteufel, LSV Model, Xsigma Capital, QA internal document (2006). [Link](http://qa.barcapint.com/Publications/Models/Macro/FX/Models/LSV/LSVTermStructure/LSV%20model.doc)

[10] L. Sadiq, Quantitative Analytis of Markov Switching/One Plus Models (2011). [Link](http://qa.barcapint.com/Publications/Models/Macro/FX/Models/LSV/QualitativeAnalysisLSVMarkovSwitchingOnePlus.pdf)

[11] S. Joe and F. Y. Kuo, Remark on Algorithm 659: Implementing Sobol's Quasirandom Sequence Generator, ACM Trans. Math. Softw. 29, 49-57 (2003). [Link](http://dl.acm.org/citation.cfm?doid=641876.641879)

[12] S. Joe and F. Y. Kuo, Construction Sobol Sequences with Better Two-dimensional Projections, SIAM J. Sci. Comput. 30, 2635-2654 (2008). [Link](http://epubs.siam.org/doi/abs/10.1137/070709359)

[13] B. Nonas, Using Sobol Random Sequences to Price Commodity Products, Xsigma Capital, QA internal document (2011). [Link](http://qa.barcapint.com/Publications/Models/Macro/Energy/Commodities/Sobol_MTComparison/SobolCompare.pdf)

[14] Padla/Documentation/Lifecycling. [Link](http://qa.barcapint.com:8080/wiki/Padla/Documentation/Lifecycling)

[15] Padla/Documentation/TradeEvents, [Link](http://qa.barcapint.com:8080/wiki/Padla/Documentation/TradeEvents)

[16] Padla/Documentation/CashReporting, [Link](http://qa.barcapint.com:8080/wiki/Padla/Documentation/CashReporting)

[17] K. Yendapalli, Local Volatility : PDE and MC, Xsigma Capital, QA internal document (2015). [Link](http://qa.barcapint.com/Publications/Models/Macro/FX/Models/LV/FX%20Local%20Volatility%20-%20PDE%20and%20MC.pdf)

[18] QARisk Document, [Link](http://qa:8080/wiki/QARisk_2)

[19] QARisk Metrics Documentation, [Link](http://qa/QAWeb/Framework/Release.2200.00/QALib/Topics/AEMetricsTopic.html)

[20] G. Farnan, Multi-Currency Aggregation of FX Delta and Gamma Risk, Xsigma Capital, QA internal document (2010). [Link](http://qa.barcapint.com/Publications/Models/Macro/FX/Risk/FX%20Risk%20Measures/MultiCurrency_Risk_Aggregation.pdf)

[21] P. Austing, G. Farnan, Parallel Risk, Tenor Attribution and Convex Rega/Sega Bumps, Xsigma Capital, QA internal document (2010). [Link](http://qa.barcapint.com/Publications/Models/Macro/FX/Risk/FX%20Risk%20Measures/ParallelRiskTenorAttributionAndConvexRegaSegaBumps.pdf)

[22] RollConventions, [Link](http://qa.barcapint.com:8080/wiki/RollConventions)

[23] J. Pubellier, Padla Volatility and Variance swap : LSV Markov Switching Monte Carlo, Xsigma Capital, QA internal document (2014). [Link](http://qa.barcapint.com/Publications/Models/Macro/FX/Trades/PadlaScriptsValidation/VolVarSwap/Padla%20Volatility%20and%20Variance%20swap%20-%20LSV%20Markov%20Switching%20Monte%20Carlo.pdf)