# Model Rate Deterministic Document (DBOPT/DBX)

## 1 Executive Summary

The Global Model Risk Assessment is:
Global Model Risk Assessment

| | Rating | Justification |
|------------|-----------|--------------|
| Complexity | LOW^(1)/LOW^(2) | Due to the validator SME judgement. |
| Uncertainty | LOW^(1)/LOW^(2) | Model methodologies do not give rise to any model weaknesses or limitations which leads to low level of uncertainty. |
| Reliance | HIGH^(1)/ HIGH^(2) | Pricing models have high reliance. |

Table 2: Model risk assessment for the two models in scope of this report: (1) DBOPT-RateDeterministic_InflationDeterministic; (2) DBX-RateDeterministic_InflationDeterministic.

The uncertainty rating has been determined based on consideration of model inputs, relevant model limitations, the risk factor representation required for the products being modelled, the nature of the numerical implementation and calibration approaches employed. The complexity rating has been determined based on consideration of the number and nature of risk factors modelled (including their interdependency), the valuation approach employed, the mathematical specification of the model and where relevant, the sophistication of the broader processing environment of which the model is a part. The reliance of all pricing models is high as the model outputs define the relevant officially reported metrics rather than merely informing them. Reduction of reliance on pricing model outputs is similarly inappropriate.

### 1.1 Summary of Main Validation Results

The models DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic are pricing models used for the following purposes: Generate present and future fair value measurements reported in official books and records and/or generate risk sensitivities (i.e., for End of Day risk management purpose and/or leading Risk and Capital calculation) and/or price positions under stress scenarios as a servicer model, in the context of regulatory stress tests i.e. CCAR, in the Interest Risk in the Banking Book ("IRRBB") Delta Economic Value of Equity (EVE) calculation or in the context of full revaluation ("Full Reval") of (Stress) Value at Risk (SVAR/ HistSim/ MultiVariate). The model is developed and maintained by DBAnalytics and is provided via dlls for use in Microsoft Excel, Python, Perl, and R and is made available in Kannon and Risk Engine.

The model is used for pricing products depending on interest rate and inflation that do not display optionality, neither on the interest rate nor on the inflation index. In other words, the products are all linear with respect to the interest rate and inflation curves. The mathematical representation of these products essentially only in the construction of the discount factors, whereas the inflation curve f(t) (built from inflation ZC rates from a given inflation index, using an interpolation method) is used to express the inflation value at date T, and f(T) is used as the underlying of the product. For this reason, we use the RateDeterministic and InflationDeterministic theoretical frameworks for the valuation of these products.

The 'deterministic' assumption does not mean that the payoffs of the products under this model are assumed to be deterministic. It merely means that, due to the lack of the optionality, their PV is independent on the volatility, hence the pricing of the products is independent of any particular modelling of the interest rate or the inflation curve, being based only on general no-arbitrage arguments. The DBOPT framework is a DBA methodology for pricing securities having a closed-form solution.

The main validation testing carried out in Section [4] of this document verifies the behaviour of the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models for pricing inflation products with a linear payoff. In particular, in the first part of this section, we provide an overview of the key features of the DBA methodology for the construction of the inflation curve. This includes testing a full implementation of the inflation curve, as well as comparing several different build methods and parameter settings of the inflation curve. The second part of the independent testing looks in depth at the behaviour of products using the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models. The testing looks at the model under stress of rates, in particular, it investigates the stability of PV and delta ladder under interest and inflation rate changes. Moreover, testing for Taylor consistency is also carried out. Other product specific testing is done as appropriate for each product, depending on its features. The behaviour of the products is also tested under the IRRBB and CCAR 2023 frameworks, as well as in a multivariate set-up where VaR shocks are simultaneously applied to the underlying risk factors. Eventually, we conduct the model parameter testing of the model, where we test all relevant model parameters that are used by the model and for their impact on the PV or other related quantities.

All the testing suggests that the model is fit for purpose. The model was reviewed for DBAnalytics v1300.

The DBOPT-RateDeterministic_InflationDeterministic model with configurations

DBOPT-RatesMarketDeterministic_InflationDeterministic

is recommended for use with the following products:

InflSwapZC*
InflAssetSwap*

InflSwapYOY*
IRSwapRealRate*

The DBX-RateDeterministic_InflationDeterministic model with configurations

DBX-ShortRateDeterministic_InflationDeterministic

is recommended for use with the following products:

IRIndexSingle_INFLATION*

Products labelled with "*" indicate that the approved model is primary.

The model is recommended for use for the following usage(s):

- End of day valuation and risk management.

- As a servicer model employed in valuation subject to CCAR stress testing scenarios and HistSim Var (Multivariate).

- For the calculation of Delta Economic Value of Equity (EVE) under Interest Rate Risk in the Banking Book

Table 3 summarises the validation assessment per usage.

| Usage | Recommended for Use (RFU) |
|-------|----------------------------|
| EOD | YES |
| VaR/ HistSim/ Multivariate | YES |
| CCAR | YES |
| IRRBB | YES |

Table 3: Validation Assessment.

The review undertaken did not reveal any flaws in the theory or the relevant implementations.
The model assumptions are detailed in the model description section, see Section 2.3.

### 1.2 Limitations and Validation Findings Overview

Model Limitations

There are currently no model limitations that have been identified.

Validation Findings

There are currently no validation findings requiring to be addressed. There have been no closed validation findings.

### 1.3 Control Overview

Tables [4] to [10] list the conditions for use that have been raised to address model weaknesses identified in the course of validation. These are classified as Model Rule and should be monitored through the automated Model Parameter Monitoring process. All conditions for use are logged in MARS. Model parameters approved values and appropriate ranges are detailed in Section [5], and the parameter classification and accurate functioning of model rules is confirmed in Section [5].

Model Parameters in CURVE Object

Table [4] provides the model parameters that are used in the CURVE object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|-----------------|--------------|----------------|--------|------------------------|
| CURVE::InflationInterpolation | PWCONST_L | (FLAT, LINEAR, PWCONST_L, LINEAR_10, FLAT-15, PWCONST_L-15) | 11920 | Defines the interpolation method used to extract the inflation figure from the table used as the base index for the zero coupon rates quoted. |
| CURVE::AddPar | NONE | (NONE, LINEAR) | 11960 | Determines the interpolation technique used to insert implied par swap rates between quoted market swap rates. |
| CURVE::CashToFuture | LINEAR | (EXACT, ACTCASH, EXACTCASH-1, CASHPRIORITY, LINEAR_NORM) | 11962 | Specifies the interpolation technique used to infer the futures stub rate from cash rates. |
| CURVE::ExtrapMethod | NATIVE | (CONSTANT_FORWARD, CONSTANT_PAR_CON-STANT_ZERO, NATIVE) | 11963 | Defines the method used to calculate rates beyond ExtrapTime (if specified) or the maturity of the longest quoted market instrument (otherwise). |
| CURVE::CurveType | - | (LIBOR, SPREAD, REBASIS, CCYBASIS, BASIS) | 11964 | Defines the type of discount curve (e.g. LIBOR curve and the SPREAD curve for forecasting (i.e. calculating forward rates) and discounting. |
| CURVE::OISUseBaseCurve | - | (NO, YES, HYBRID) | 11965 | Controls the usage of the backbone curve for OIS discounting/ forecasting. |
| CURVE::SmoothFutures | NO | (NO, YES, BACKWARD, BACKWARDDAILY) | 11966 | Determines how futures are used to construct a smooth curve. |
| CURVE::RecalibMethod | APPROX | (APPROX, EXACT, EXACTFORCED) | 11967 | Defines the interpolation of the discount factor curve. |
| CURVE::SpotLiborUseBaseCurve | - | (NO, YES) | 11968 | Controls the usage of the backbone curve for LIBOR discounting/ forecasting. |
| CURVE::SpreadBuildMethod | LINEAR_ZERO | (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, BRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD) | 11969 | Controls the interpolation of the spread adjustment on a backbone base curve to obtain tenor-specific discounting curves (e.g. OIS, CCY, 3m LIBOR, ...). |
| CURVE::Cash::SpreadBuildMethod | LINEAR_ZERO | (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, BRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD) | 11970 | See CURVE::SpreadBuildMethod for the subtable Cash. |

[Tables continue with additional parameters for CURVE, VOL, FUNDINGVOL, DBOPT, DBX, FIXING, MKTDATA, FUNDING, and CMT objects]

## 2 Introduction to Model and Validation

### 2.1 Validation Scope

The scope of the validation is detailed in Section [1.1].

Products with similar features from a valuation perspective are grouped together and tested as a single consistent group wherein testing results for a representative product are deemed applicable and able to confer equivalent inference to the whole product group. The product grouping logic is presented in Section [2.2.2].

### 2.2 Product Description

In this section, we describe the products that the DBOPT-RateDeterministic_InflationDeterministic model covers and highlight their characteristics. To this end, let us recall that the DBOPT-RateDeterministic_InflationDeterministic model is approved for the following products:

InflSwapZC*
InflAssetSwap*
InflSwapYOY*
IRSwapRealRate*

Whereas DBX-RateDeterministic_InflationDeterministic is approved for the following products:

IRIndexSingle_INFLATION*

Products labelled with "*" indicate that the approved model is primary.

#### 2.2.1 PRDS Description

Table [13] is drawn from PRDS and provides a list and the definition of the PRDS products that are in scope for the validation of the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models. Note that the model is the preferred ones for all listed products.

| Product Name (Long Product Name) | Product Description |
|--------------------------------|---------------------|
| InflSwapZC (InflationSwapZeroCoupon) | An inflation swap involving the exchange of a regular stream of inflation-indexed payments for a stream of nominal interest payments and priced on a zero coupon basis, with payment exchanged at the end of the term. One party pays the compounded fixed rate and the other the actual inflation rate for the term. |
| InflSwapYOY (InflationSwapYearOnYear) | An inflation swap involving the exchange of a regular stream of inflation-indexed payments for a stream of nominal interest payments exchanged on a "year on year" basis, where the year-on-year rate of change of the underlying index is applied. One party pays the compounded fixed rate and the other the actual inflation rate for the year. |
| InflAssetSwap (InflationAssetSwap) | The interest rate swap transation involved in a structure where the investor buys an inflation linked bond and enters into an interest rate swap which swaps the coupon profile of the non zero coupon bond for a different, usually libor based, set of payments. Payments are not dependant on any default of the underlyingbond. The swap includes a Notional based inflation return at maturity. In addition to the interim coupons, this Notional return is NOT subject to a floor. |
| IRSwapRealRate (InterestRateSwapRealRate) | The real rate swap is an inflation swap where the inflation leg pays a coupon adjusted by the inflation index specified in the contract. There may also be the payment of a notional uplift at maturity i.e. the difference between the original notional and the notional adjusted by the inflation rate applicable on the maturity date. |
| IRIndexSingle_INFLATION (IRIndexSingle_INFLATION) | A transaction traded on a see through basis involving an index which has index components with the same currency and which belongs to the inflation family of indices. The trade notional currency is the same as the index currency. This transaction will not have optionality. |

Table 13: List and definition of the PRDS products in scope of the validation.

#### 2.2.2 Product Grouping Table

For the purpose of model validation testing, we group the PRDS products above as described in Table [14]:

| Product | Underlying | Coupon Structure | Underlying Specifics | Option | Barrier | Path Dependent |
|---------|------------|------------------|---------------------|--------|---------|----------------|
| InflSwapZC | Inflation | Linear | Linear | None | None | None |
| InflSwapYOY | Inflation | Linear | Convex | None | None | None |
| InflAssetSwap | Inflation-InterestRate | Linear | Linear | None | None | None |
| IRSwapRealRate | Inflation | Linear | Linear | None | None | None |
| IRIndexSingle_INFLATION | Inflation Index | Linear | Linear | None | None | None |

Table 14: Product Grouping Table. All products are explicitly tested in this MVR.

#### 2.2.3 Portfolio Composition and PV of Trades

Table [15] provides a snapshot of all trades booked using the DBOPT-RateDeterministic_InflationDeterministic model as of 30th November 2023.

| Product | No. of Trades | PV (in million EUR) | Absolute PV (in million EUR) |
|---------|---------------|---------------------|------------------------------|
| InflAssetSwap | 147 | 338.18 | 2,712.24 |
| InflSwapYOY | 13 | -40.48 | 52.71 |
| InflSwapZC | 52,995 | -6,842.96 | 195,444.85 |

Table 15: Model inventory for the DBOPT-RateDeterministic_InflationDeterministic model as of 30th November 2023.

#### 2.2.4 Product Overviews

#### 2.2.4.1 InflAssetSwap

InflAssetSwap is simply a swap one leg consisting of ZC inflation payments, the other leg paying either fixed or a LIBOR rate. Hence the PV of this product is simply the sum of PV's of the individual legs and hence InflSwapZC testing will cover testing for this product.

##### InflSwapYOY (Year on Year Inflation Swap)

Given a tenor structure $T_0 < T_1 < ... < T_n$, this product pays at the end of each time interval $[T_{i-1}, T_i]$, the cash flows:

$$N \cdot \theta_k K \text{ vs. } N \cdot \theta_k \left[ \frac{I(T_i)}{I(T_{i-1} \cdot 1Y)} - 1 \right]$$

Where:
- $N$ is the notional amount
- $\theta_k$ is the accrual factor
- $K$ is the fixed rate
- $I(T)$ is the inflation index at time $T$

##### InflSwapZC (Zero Coupon Inflation Swap)

This product swaps a fixed leg against an inflation floating leg:

$$N \cdot [(1 + K)^T - 1] \text{ vs. } N \cdot \left(\frac{I_t}{I_s} - 1\right)$$

Where:
- $T$ is the trade's maturity
- $S$ is the instrument's settlement date
- $\theta$ is the accrual factor for the period $[S, T]$

### 2.3. Models

- DBOPT-RateDeterministic_InflationDeterministic with configurations
  - DBOPT-RatesMarketDeterministic_InflationDeterministic
- DBX-RateDeterministic_InflationDeterministic with configurations
  - DBX-ShortRateDeterministic_InflationDeterministic

#### 2.3.1. Model Assumptions

1. **No Arbitrage**: It is assumed that there are no arbitrage opportunities.
2. **Interest Rates Dynamics**: Products are linear with analytical solutions that depend only on yield curve quantities at time zero, with no volatility dependence.
3. **Inflation Dynamics**: Products are linear with analytical solutions that depend only on inflation yield curve quantities at time zero, with no volatility dependence.

#### 2.3.2. Model Inputs

##### 2.3.2.1 Market Inputs

The following market inputs are used by the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models:

- Interest Rate Curve: This is constructed from market observables, such as cash rates, futures or interest rate swaps.
- Inflation Curve: This is constructed from market observables, such as inflation swaps, and the historical CPI figures.

##### 2.3.2.2 Model Parameters

The model parameters applying to DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models are listed in Section 1.3.

#### 2.3.3 Model Dynamics

The products considered in this MVR contain no optionality embedded. Such products can be replicated statically. Notice that this does not mean that their payoff is assumed to be deterministic, but that because of the lack of the optionality their PV is independent on the volatility.

The DBOPT model is one of the (quasi-)analytic pricing models available in the DBAnalytics library. The qualification "quasi" here refers to the fact that DBOPT relies heavily on numerical integration. In particular, for the products covered by this documents, the interest rate curve is used essentially only for the construction of the discount factors, and the inflation curve to express the inflation value at a certain date (T_Fix), as the underlying of the product. No dependency on the volatility of either the interest rate or inflation is thus needed and for the evaluation of the products a deterministic model, both for interest rate and inflation is sufficient.

Whereas DBX model - A Monte-Carlo model work by formulating the pricing problem to solve a particular expectation (the discounted payoff) under the risk-neutral measure. For simple linear products this should be done by simulating underlyings according to an intrinsic calculation.

When intrinsic calculations are invoked (i.e. CalcIntrinsic is set to 1) then the number of simulations used is set to one and the required random numbers for all the factors are set to zero. When intrinsic calculations are not invoked but all volatilities are zero, then the Monte-Carlo engine is 'smart' in the sense that it does not require a full simulation. In this case the number of simulations is also set to one and the required random numbers for all the factors are set to zero. The relevant forwards are centered so the result of the Monte-Carlo simulation in these two intrinsic cases is that each underlying factor follows the forward.

##### 2.3.3.1 Model Theory

The core computations of the RateDeterministic_InflationDeterministic framework reduces to curve interpolation and extrapolation.
The model is based on the following assumptions:
1. **No Arbitrage**: It is assumed that there are no arbitrage opportunities.
2. **Interest Rates Dynamics**: Products are linear with analytical solutions that depend only on yield curve quantities at time zero, with no volatility dependence.
3. **Inflation Dynamics**: Products are linear with analytical solutions that depend only on inflation yield curve quantities at time zero, with no volatility dependence.

##### Deterministic Interest Rates

The interest rate in each currency is assumed to be a deterministic function of time.

Let $r_t$ denote the instantaneous spot rate at time $t$ in a given currency. The money market account $B_t$ is then determined by the deterministic dynamics

$$dB_t = r_tB_tdt, \quad B_0 = 1,$$

which yield

$$B_t = \exp \left\{ \int_{0}^{t} r_sds \right\}.$$

The discount curve $1/B_t$ gives the pre-set value of a payment at time $t$, and the forward discount curve $D(t,T)$ gives the value at time $t$ of a payment done at time $T$:

$$D(t,T) = \frac{B_t}{B_T} = \exp \left\{ -\int_{t}^{T} r_sds \right\}.$$

##### Deterministic Inflation

The inflation ratio and return between time $T$ and $S$ are defined by

$$\frac{I(T)}{I(S)} \quad \text{and} \quad \frac{1}{\delta(S,T)} \left( \frac{I(T)}{I(S)} -1 \right),$$

respectively, where $\delta(S,T)$ is the year fraction between $S$ and $T$. The corresponding forward values of inflation ratio and return at time $t$ are

$$^{F}F(t,T) = E^T \left[ \frac{I(T)}{I(S)}|\mathcal{F}_t \right]$$

and

$$F(t,T) = \frac{1}{\delta(S,T)} E^T \left[ \frac{I(T)}{I(S)} -1 |\mathcal{F}_t \right],$$

respectively.

For YoY, that is $S > t$, we then have

$$F(0,T) = \frac{1}{\delta(S,T)} E^T \left[ \frac{I(T)}{I(S)} -1|\mathcal{F}_0 \right]$$
$$= \frac{1}{\delta(S,T)} \frac{E^T[I(T)|\mathcal{F}_0]}{E^T[I(S)|\mathcal{F}_0]} + CMT(S,T),$$

where the CMT object serves for convexity adjustment.

In particular, for the InflationDeterministic model, we have $E^T [I(T)] = I(T)$.

##### 2.3.3.2 Model Implementation

DBA allows the creation of inflation curves from a set of instruments, namely inflation forwards, zero-coupon swaps and year on year swaps. That is, a continuum of - theoretical - discount factors $D^I(t)$ with maturity $t$ that represents these instruments. In DBA this is done by creating an object of type "CURVE" with "UseType=INFLATION" and "CurveType=SPREAD".

Before going into the relation between these discount factors and inflation indices it's useful to recall some facts about inflation. These are taken from the FO document [7].

Inflation indices are computed monthly with the value for a specific month published at a later month, usually the 15th of the following month. E.g. the inflation value for August is published on the 15th of September. DBA curves can store past values of inflation in a table of "CPIFigures" with a column for "Date", the date to which the inflation figure refers to, and an "Index" column for the corresponding inflation index value published. In the example above the index refers to a whole month, in this case August, but since we need to input a specific date, DBA takes the convention of using the 1st of the month. So the user will have to input 01-Aug-14.

Another important idea is that of inflation lag, specified in the curve via "InflationDelayInput", which is an attribute of inflation indices. This is a time delay, typically specified as a number of months, which is applied to inflation product's set dates in order to reference the relevant inflation value. For example it is "3M" for UKRPI, "2M" for FRCPXTEMU and 2M for USCPI. In addition to this, there's an "InflationInterpolation" input which can be set to either FLAT (or PWCONST_L) or DIR (also LINEAR), including DIR-10 (aka LINEAR-10) and FLAT-15 (aka PWCONST_L-15).

These two inputs work together to retrieve a fixing in the following way. Say for example an inflation swap has a fixing on the 23rd of November. In order to obtain the corresponding inflation value we need to first apply the InflationDelayInput, say 3M, which takes us back to August. Because we're in the past we have a fixing for August but also for September, and this is where interpolation is used. If it's FLAT, the inflation value will simply be the August one. If it's DIR, it will be a linear combination of the August and September inflation values, although the weight will depend on the product's fixing date. More precisely the inflation value for DIR will be,

$$wI(1st\ August) + (1 - w)I(1st\ September) \quad \text{where} \quad w = \frac{1Dec - 23Nov}{1Dec - 1Nov}$$

The last entry in the table of CPIFigures is known as "LastKnownIndex" and it's used as the spot value for inflation. Inflation values after the last CPI index require the discount factors $D^I(t)$ bootstrapped to inflation instruments. Since we're using an interest rate curve to parametrize inflation values, we need to take into consideration its "ValuationDate", the date at which discounting starts (i.e. "today") and where discount factor equals one. However this date happens after the last CPI date, hence we need to shift dates by the difference between valuation date and last known index date. The difference is known as "InflationDelayOutput" and although the curve contains an input field for it, this is actually ignored and the user can not override this delay.

$$InflationDelayOutput = ValuationDate - LastCPIDate.$$

Given discount factors, inflation values for dates after last CPI date are given by

$$I(date) = \frac{I_{LastCPIDate}}{D^I(date + InflationDelayOutput)},$$

so that when $date = LastCPIDate$ we have $I(lastCPIDate) = I_{LastCPIDate}$ as required.

The curve $D^I(t)$ is bootstrapped from instruments input in a "Swap" table with "SettlementDate" (optional, it overrides the curve's SettlementDate), "Maturity" and "ZeroRate" (the market coupon rate).

At the risk of overcomplicating things we're going to introduce further notation to describe curve instruments and inflation products in general. Given a security's "SetDate" $t$, we define $I_t$ as the inflation value after applying InflationDelayInput and InflationInterpolation. So we have for FLAT

$$I_t = I(\lfloor t-input \rfloor),$$
$$= \frac{I_{LastCPIDate}}{D^I(\lfloor t-input \rfloor +output)},$$

and DIR

$$I_t = w(t)I(\lfloor t-input \rfloor) + (1-w(t))I(\lfloor t-input \rfloor + 1M),$$
$$= w(t)\frac{I_{LastCPIDate}}{D^I(\lfloor t-input \rfloor +output)} + (1-w(t))\frac{I_{LastCPIDate}}{D^I(\lfloor t-input \rfloor + 1M + output)},$$

where "input" means "InflationDelayInput", "output" means "InflationDelayOutput" and $\lfloor t-input \rfloor$ denotes date $t$ delayed by "InflationDelayInput" and moved further to the first of the month. Equations (5) and (6) are applied whenever $\lfloor t-input \rfloor$ is on or before "LastCPIDate" and (5) and (6) otherwise.

Note that if $\lfloor t-input \rfloor +output$ is equal to last CPI date, in equation (6), the inflation value multiplying $w$ can be obtained from the CPI figures and the other one needs forecasting from the curve, hence the need of inflation delay output, i.e. equation (4), for consistency.

The intention behind this notation is to separate the dates given by a security schedule and the dates when inflation look ups actually occur. So for a given fixing date $t$, the look up in the CPIFigures table happens at $\lfloor t-input \rfloor$, the look up at the discount curve happens at $\lfloor t-input \rfloor +output$. Note that for DIR, the weight is computed at $t$, the un-shifted date.

Inflation swap instruments have the following payoff,

$$\frac{I_T}{I_S} = (1 + K)^θ,$$

where $K$ is the "ZeroRate" input, $S$ the start date, and $T$ the maturity of the instrument.

If the instrument is a ZCSwap, then $S$ is the instrument's start or settlement date (the curve's SettlementDate if this is not provided in the instrument's table), and $T$ is the maturity provided in the swap's table. The accrual factor $θ$ is computed as the difference between maturity and start as a whole number of months or years.

If the instrument is YoY, $S$ is $T$ minus one year, and $θ = 1$.

The curve is built by bootstrapping discount factors via equations (5), (6) and (7). The method depends on input "BuildMethod". For example, "LinearZero" bootstraps linear yields at a set of pillar dates and interpolates linearly.

But note that in inflation, the set of curve pillar dates is given by the instrument maturities, shifted backwards by inflationDelayInput and then back to the first of the month if interpolation is FLAT, or to the next months' first date if DIR, and finally forward by inflationDelayOutput amount.

So the curve's pillar dates are given by $\lfloor T_i - input \rfloor +output$ for instrument maturities $T_i$ for FLAT, and $\lfloor T_i - input \rfloor + 1M + output$ for DIR (i.e. the right bracketing date). A discount factor in this case is then given by

$$D^I(t) = \exp \left( \frac{-y_t(t - ValuationDate)}{365.25} \right),$$

with $y_t$ linearly interpolated between the pillar dates.

The swap's table interface doesn't differentiate between the two type of instruments however, ZCSwaps are always used for maturities greater than 1Y (360 days to be precise) and YoY for smaller maturities by default - in order to avoid having the denominator in the future. There is an input, "ShortEndInitialInterpolation" (with default value YoY) which can also take the value "FLAT" which means that ZCSwaps with fixings on the first of the month are used for maturities up to one year instead of YoY.

Furthermore, if inflation interpolation is DIR, the short term instruments (with maturity less than 360 days) will have fixings on the first of the month, whether these are YoY or zero coupon swaps. This means that for maturities under one year, with DIR interpolation, the weight in (6) and (6) is one so it coincides with FLAT, and linear otherwise.

It is a known empirical fact that the observed inflation is subject to significant seasonality effects. In particular, inflation tends to have a seasonal component and component associated with festive seasons. The DBAnalytics models the seasonality effect using a Spreads table, which is specified in the inflation curve object, and contains a set of 12 dates (one for each month), specifying the multiplicative adjustment factor that is applied on top of the projected long term inflation for the specified date:

$$I_{adj}(T) = I_{unadj}(T) \cdot S(T)$$

#### 2.3.4 Model Calibration

Since the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic model does not use any volatility object, no volatility calibration is required. For details on the curve construction methodologies, we refer to the curve primer [3].

#### 2.3.5 Risk Sensitivities

Table 16 lists the risk sensitivities that are returned by the model, along with their corresponding DBA mode. In particular, the sensitivities and their modes are used to produce the test results in Section 4.

| Risk sensitivity | Underlying | DBA Mode | Comments |
| --- | --- | --- | --- |
| Delta | IR and Inflation Curve | FLATDELTA | The CURVE is shifted up by 1 bp absolute, i.e. PV(base) - PV(Up1bp) where Up1bp shifts the curve up by 1bp in absolute value. |
| OISSpreadDelta | IR Curve | FLATOISSPREADELTA | The Spread within the OIS-Spreads table of the CURVE are shifted up by 1 bp absolute. |
| DiscountSpreadDelta | IR Curve | DISCOUNTSPREADELTA | The Spread within the Dis-countSpreads table of the CURVE are shifted up by 1 bp absolute. |
| SpotLiborSpreadDelta | IR Curve | FLATSPOTLIBORSPREADELTA | The Spread within the SpotLi-borSpreads table of the CURVE are shifted up by 1 bp absolute. |

Table 16: Risk sensitivities and their corresponding DBA modes.

All risk sensitivities are computed using the "shift/ bump and reprice" method, i.e. the DBA modes evaluate a dictionary before and after shifting the entries of the respective subtable(s) of a CURVE object (i.e. IRCURVE or INFLATIONCURVE).

#### 2.3.6 Model Outputs

We can extract from the model the PV and the risk sensitivities ("greeks") relative to changes in parameters such as interest rate and inflation curve moves. For the interest risk sensitivities of interest is Delta. Further risk sensitivities are the OIS spread delta, discount spread delta, and spot Libor spread delta.

### 2.4 Feeder and Servicer Models

The model DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic has no direct servicer or feeder models.

### 2.5 Model Change Description

DBAnalytics model developers log model changes in release notes, which are available through a dedicated website. In the release note, model developers identify the scope of the change made for the Product-Model-Combinations it is related to and how it can be identified through the library interface. Pricing model changes are categorised into major, minor, technical, non-model and other. The proposed change category is reviewed, and agreed by MoRM on the DBAnalytics website.

The changes not relating to pricing models or risk modes are currently not subject to validation. MoRM review the classification to ensure no pricing model related changes are misclassified. MoRM will only validate major and minor classified model changes.

In the following, we give a detailed description of the model changes in scope of this validation. The model changes are taken form MARS and are arranged in chronological order, beginning with the oldest.

##### Request ID 16823

* Release Note ID: 830_94, 880_71
* Description of Model Change:
  830_94 (Minor): Code changes to support ClearingSpreads for CURVE with UseType = INFLATION.
  880_71 (Non-model): The new field UseInflationClearingSpreads now has to be set to YES for ClearingSpreads to work in an inflation curve. This helps to control the usage of the feature with the filter object.
* Model Configuration:
  DBOPT-RatesMarketDeterministic_InflationDeterministic
* PRDS Product:
  -
* See Section 4.1.10 for model change testing results.

##### Request ID 16923

* Release Note ID: 1140_40, 1150_64
* Description of Model Change:
  1140_40 (Technical): A new feature for inflation CURVES: The ClearingSpreads subtable is now supported in case InflationInterpolation=DIR, for example with USCPI CURVEs.
  1150_64 (Non-model): For DIR inflation CURVEs (e.g. USCPI), inflation clearing spreads are now activated only when UseInflationClearingSpreads=YES, otherwise any attempt to use inflation clearing spreads on a DIR curve would raise an error. Add FILTER rule to enforce UseInflationClearingSpreads=NO in case of DIR inflation CURVEs, pending MoRM approval.
* Model Configuration:
  DBOPT-RatesMarketDeterministic_InflationDeterministic
* PRDS Product:
  -
* See Section 4.1.11 for model change testing results.

### 2.6 Validation Outline

In this section, we give a description of the tests undertaken in the independent model validation in Section 4 as well as a list of the corresponding testing files. Accordingly, the first part of the section is dedicated to a model specific testing, where we provide an overview of the key features of the DBA methodology for the construction of the inflation curve. In particular, we compare the DIR and FLAT methods, test the inflation delay parameter, and trial with the seasonality. We also address the comparison of several different build methods and in carry out a full implementation of the inflation curve.
In the second part, we investigate product specific features in accordance to the trade categorization taxonomy, which provides a systematic testing framework to validate the PV pairs approved for both the models. In particular, for each product category, we conduct stress tests under interest rate and inflation curve shifts for price and delta, as well as a test of the Taylor expansion consistency. We further conduct stress tests under the recent CCAR 2023 and IRRBB scenarios and carry out a multivariate test in which all underlying risk factors are simultaneously stressed.
Eventually, in the third part, we briefly describe the Model Parameter Monitoring testing of the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models.

#### 2.6.1 Model Specific Testing

The model specific testing files are listed in Table 17. The files are available from the SVN repository:
https://mars-svn.risk.intranet.db.com/dkc/ModelApproval/branches/a19rm/mdoc/ModelValidationReports/DBOPT-RateDeterministic_InflationDeterministic/.

| Test | Section | Testing File* |
| --- | --- | --- |
| Inflation Interpolation (DIR and FLAT) | 4.1.1 | ModelTesting_Testing.py LINEAR_10.ipynb |
| Inflation Delay | 4.1.2 | ModelTesting_Testing.py LINEAR_10.ipynb |
| Inflation Seasonality | 4.1.3 | ModelTesting_Testing.py LINEAR_10.ipynb |
| Repricing Instruments | 4.1.4 | ModelTesting_Testing.py |
| BuildMethodCutOff | 4.1.5 | BuildMethodCutOff.ipynb |
| Build Method Comparison | 4.1.6 | BuildMethod_HybridConstantForward.ipynb BuildMethod_ConstantForward.ipynb BuildMethod_CubicZero.ipynb BuildMethod_HybridForward.ipynb BuildMethod_LinearForward.ipynb BuildMethod_LinearZero.ipynb BuildMethod_QuadraticForward.ipynb BuildMethod_QuadraticZero.ipynb |
| FlatInflationInterpLimit | 4.1.7 | FlatInflationInterpLimit.ipynb |
| InflationInterpolation MODFLAT | 4.1.8 | InflationInterpolationMODFLAT.ipynb |
| Independent Implementation of Inflation Curve | 4.1.9 | InflationCurve_Testing.py |
| Inflation Rates with Bilateral Clearing (InflationInterpolation = FLAT) | 4.1.10 | inflib.py |
| Inflation Rates with Bilateral Clearing (InflationInterpolation = DIR) | 4.1.11 | InflClearingSpreads_USCPI_testing.py |

Table 17: List of Model Testing Files.

#### 2.6.2 Product Testing

##### 2.6.2.1 End of Day Testing

Stress Testing

For the stability tests, we compute for all the products tested the PV and Flatdelta under absolute interest rate and inflation curve shifts. The range of the curve and volatility shifts are given in Table 17.4 for EOD testing. That is, the absolute interest rate and inflation curve shifts range from -500 to 500 bps. It is expected that all profiles of the considered products exhibit a smooth behaviour under the shifts and are in line with the intuition of the functionality of the product.

Taylor Expansion Consistency Testing

In the Taylor expansion consistency testing, we check whether the DBA calculated prices are consistent with the Taylor approximation as calculated from the PV, Flatdelta, and Flatgamma for shifts in the interest rate and inflation curves.

The Taylor formula used for the approximation is a simplified version of the 2-variable Taylor expansion of the price $P(s^{IR}, s^{infl})$ as a function of the interest rate and inflation spots. More precise, we choose to approximate $P(s^{IR}, s^{infl})$ in a neighbourhood of the production values $(s_0^{IR}, s_0^{infl})$ by means of the expression

$$P(s^{IR}, s^{infl}) \sim P(s_0^{IR}, s_0^{infl}) + (s^{IR} - s_0^{IR})\frac{\partial P}{\partial s^{IR}}(s_0^{IR}, s_0^{infl})+\frac{1}{2}(s^{IR} - s_0^{IR})^2 \frac{\partial^2 P}{\partial (s^{IR})^2}(s_0^{IR}, s_0^{infl})$$
$$+ (s^{infl} - s_0^{infl})\frac{\partial P}{\partial s^{infl}}(s_0^{IR}, s_0^{infl})+\frac{1}{2}(s^{infl} - s_0^{infl})^2 \frac{\partial^2 P}{\partial (s^{infl})^2}(s_0^{IR}, s_0^{infl})$$

In a small neighbourhood of $(s_0^{IR}, s_0^{infl})$, i.e. for some value of $δ$ such that $s_0^{IR} - δ \leq s^{IR} \leq s_0^{IR} + δ$ and $s_0^{infl} - δ \leq s^{infl} \leq s_0^{infl} + δ$. In terms of the risks involved, represented by the Greeks $\Delta$ and $\Gamma$, we can equivalently rewrite the previous approximation as

$$P(s^{IR}, s^{infl}) \sim P(s_0^{IR}, s_0^{infl}) + (s^{IR} - s_0^{IR})\Delta(s_0^{IR}, s_0^{infl})+\frac{1}{2}(s^{IR} - s_0^{IR})^2\Gamma(s_0^{IR}, s_0^{infl})$$
$$+ (s^{infl} - s_0^{infl})\Delta(s_0^{IR}, s_0^{infl})+\frac{1}{2}(s^{infl} - s_0^{infl})^2\Gamma(s_0^{IR}, s_0^{infl}).$$

The motivation for the choice of our approximating formula appears clear, as we choose to approximate the PV surface around the production point $(s_0^{IR}, s_0^{infl})$ through the hedging instruments customarily used by the front office to hedge the products, discarding the remaining terms present in the second degree expansion of the Taylor formula.

##### 2.6.2.2 CCAR Testing

The CCAR methodology is included in the general stress testing framework as described in Standardized Shock Primer document [11]. This, in particular, includes a construction of CCAR stressed market objects for adverse and severely adverse stress scenarios which have been reviewed and validated in [12], [13], [14], [15], [16]. For the purpose of this validation, CCAR market data objects are treated as given inputs and the main objective is to test the behaviour of a product-model pair in the CCAR stressed pricing contexts including convergence and stability of the returned PV and risk sensitivities.

We consider three separate scenarios in testing:

1. Base Scenario: This is the market data used in end of day pricing on the valuation date.
2. CCAR 1: This is the 2023 CCAR adverse scenario. In terms of the market data relevant to the testing product, shocks are applied to all relevant objects in the EOD pricing dictionary as given by MoRM.
3. CCAR 2: This is the 2023 CCAR severely adverse scenario. In terms of the market data relevant to the testing product, shocks are applied to all relevant objects in the EOD pricing dictionary as given by MoRM.

The tests performed follow closely the EOD tests performed on the products for each model. Specifically, we test under the given scenarios whether the PV, and Flatdelta are stable as the interest and inflation curves are shifted in parallel between [-5%, 5%], cf. Table 17.4. Again, it is expected that all profiles of the considered products exhibit a smooth and the correct behaviour under the applied shifts.

##### 2.6.2.3 IRRBB Testing

Interest rate stress tests are conducted in this MVR according to the ten different scenarios defined under the IRRBB framework. This framework is part of the general stress test capital frameworks Pillar 2 (Supervisory Review Process).

The BCBS document [17] describes eight Interest Rate shock scenarios that are required to be applied to IRRBB exposures in each currency for which a bank has material positions in the Banking Book. Eight Interest Rate currency dependent shock scenarios are prescribed that reflect currency-specific absolute interest rate shocks. Two of them (Steepener and Flattener) have been extended to take their opposite shift in order to define two additional scenarios: Steepener Negative and Flattener Negative. The IRRBB Interest Rate scenarios are summarised as follows:

* Parallel shock up
* Parallel shock down
* Steepener shock (short rate down and long rates up)
* Steepener negative shock (opposite steepener shift)
* Flattener shock (short rates up and long rates down)
* Flattener negative shock (opposite flattener shift)
* Short rates shock up
* Short rates shock down
* Long rates shock up
* Long rates shock down

Further to the above, the 10 IRRBB scenarios are augmented with a relative shift on the volatility of 25%.

Specifically, we test under the given scenarios whether the PV is stable as the interest and inflation curves are shifted in parallel between [-15%, 15%], cf. Table 17.4. All PV profiles are expected to exhibit a smooth and the correct behaviour under the applied shifts.

##### 2.6.2.4 VaR/Multivariate Testing

In the MultiVar test we check the trade PV dependence under simultaneous stress of the risk factors of the trade. The PV change from different risk factors may have positive/negative effect on the PV. To avoid a possible cancellation, we take into account the sign of the partial derivatives of the PV for the risk factors under study. Thus, we will be able to see what are the maximal/minimal values PV have in the risk factors defined region.

The PV of the trade can be written as follows

$$PV(x_1,\ldots,x_n)),$$

where the arguments $(x_1,\ldots,x_n)$ represent the various risk factors. We denote by $\mathbf{x}^{EOD}$ the actual (End-of-Day) values and with $\mathbf{x}_i^{LOW} \leq \mathbf{x}_i^{EOD} \leq \mathbf{x}_i^{HIGH}$ the local lower and upper bounds of the risk factors.

We define two functions of a single variable $\lambda$, defined in the interval [0,1]:

$$f^{UP}(\lambda) = PV(\mathbf{x}^{EOD} + \lambda \cdot (\mathbf{x}^{EDGE UP} - \mathbf{x}^{EOD}),\ldots, \mathbf{x}_n^{EOD} + \lambda \cdot (\mathbf{x}_n^{EDGE UP} - \mathbf{x}_n^{EOD}))$$
$$f^{DOWN}(\lambda) = PV(\mathbf{x}^{EOD} + \lambda \cdot (\mathbf{x}^{EDGE DOWN} - \mathbf{x}^{EOD}),\ldots, \mathbf{x}_n^{EOD} + \lambda \cdot (\mathbf{x}_n^{EDGE DOWN} - \mathbf{x}_n^{EOD}))$$

where
$$\mathbf{x}_i^{EDGE UP} =
\begin{cases}
\mathbf{x}_i^{LOW}, & \text{if } \frac{\partial PV(x_1,\ldots,x_n)}{\partial x_i} < 0 \\
\mathbf{x}_i^{UP}, & \text{if } \frac{\partial PV(x_1,\ldots,x_n)}{\partial x_i} \geq 0
\end{cases}$$

$$\mathbf{x}_i^{EDGE DOWN} =
\begin{cases}
\mathbf{x}_i^{LOW}, & \text{if } \frac{\partial PV(x_1,\ldots,x_n)}{\partial x_i} \geq 0 \\
\mathbf{x}_i^{UP}, & \text{if } \frac{\partial PV(x_1,\ldots,x_n)}{\partial x_i} < 0
\end{cases}$$

Note that for $\lambda = 0$ the two functions match the EOD price, that is: $f^{UP}(0) = PV(\mathbf{x}^{EOD},\ldots,\mathbf{x}_n^{EOD}) = f^{DOWN}(0)$.
and for $\lambda = 1$ we have:

$$f^{UP}(1) = \max(PV(\mathbf{x}))$$

and

$$f^{DOWN}(1) = \min(PV(\mathbf{x})),$$

where $\max$ and $\min$ for the function $PV(\mathbf{x})$ are taken over the hypercube $\mathbf{x}_i^{LOW} \leq \mathbf{x}_i^{EOD} \leq \mathbf{x}_i^{HIGH}$ for $i = 1,\ldots,n$.

##### 2.6.2.5 Testing Files

All testing files for the products are listed in Table 18. The files are available from the SVN repository:
https://mars-svn.risk.intranet.db.com/dkc/ModelApproval/branches/a19rm/mdoc/ModelValidationReports/DBOPT-RateDeterministic_InflationDeterministic/

| Test | Section | Testing File* |
| --- | --- | --- |
| InflAssetSwap | | |
| EOD Testing | 4.2.1 | _tests/reval_Q4_2023/InflAssetSwap_EOD.py |
| CCAR Testing | 4.2.2 | _tests/reval_Q4_2023/InflAssetSwap_CCAR.py |
| IRRBB Testing | 4.2.3 | _tests/reval_Q4_2023/InflAssetSwap_IRRBB.py |
| Multivariate Testing | 4.2.4 | _tests/reval_Q4_2023/InflAssetSwap_Multivariate.py |
| InflSwapYOY | | |
| EOD Testing | 4.3.1 | _tests/reval_Q4_2023/InflSwapYOY_EOD.py |
| CCAR Testing | 4.3.2 | _tests/reval_Q4_2023/InflSwapYOY_CCAR.py |
| IRRBB Testing | 4.3.3 | _tests/reval_Q4_2023/InflSwapYOY_IRRBB.py |
| Multivariate Testing | 4.3.4 | _tests/reval_Q4_2023/InflSwapYOY_Multivariate.py |
| InflSwapZC | | |
| EOD Testing | 4.4.1 | _tests/reval_Q4_2023/InflSwapZC_EOD.py |
| CCAR Testing | 4.4.2 | _tests/reval_Q4_2023/InflSwapZC_CCAR.py |
| IRRBB Testing | 4.4.3 | _tests/reval_Q4_2023/InflSwapZC_IRRBB.py |
| Multivariate Testing | 4.4.4 | _tests/reval_Q4_2023/InflSwapZC_Multivariate.py |
| IRSwapRealRate | | |
| EOD Testing | 4.5.1 | _tests/IRSwapRealRate_EOD.py |
| CCAR Testing | 4.5.3 | _tests/IRSwapRealRate_CCAR.py |
| IRRBB Testing | 4.5.4 | _tests/IRSwapRealRate_IRRBB.py |
| Multivariate Testing | 4.5.5 | _tests/IRSwapRealRate_Multivariate.py |
| IRIndexSingle_INFLATION | | |
| EOD Testing | 4.6.6 | _tests/IRIndexSingle_INFLATION_EOD.py |
| CCAR Testing | 4.6.6 | _tests/IRIndexSingle_INFLATION_CCAR.py |
| IRRBB Testing | 4.6.7 | _tests/IRIndexSingle_INFLATION_IRRBB.py |
| Multivariate Testing | 4.6.8 | _tests/IRIndexSingle_INFLATION_Multivariate.py |

Table 18: List of Product Testing Files.

#### 2.6.3 Model Parameter Monitoring Testing

The model parameter monitoring (MPM) testing of the DBOPT-RateDeterministic_InflationDeterministic model is concerned with assessing the correct functionality of the used model characteristics. In most cases, this comprises testing the direct impact of the considered model parameter on the PV or another related quantity, such as the first or second order sensitivities. However, when more suitable, it may also be appropriate to test the stability of the PV and the first or second order sensitivities under curve or volatility shifts.

As the approach taken depends on the model parameter under consideration, we refer to Section 4.7 for a more detailed description of each test. The corresponding testing files for all relevant model parameters are listed in Table 19 according to their related object. The files are available from the SVN repository:

https://mars-svn.risk.intranet.db.com/dkc/ModelApproval/branches/a19rm/mdoc/ModelValidationReports/DBOPT-RateDeterministic_InflationDeterministic/

| Object | Section | Testing File* |
| --- | --- | --- |
| DBOPT | 4.7.1.1 | _tests/MPM/ModelMode.py |
| CURVE | 4.7.3 | _tests/MPM/BuildMethod.py _tests/MPM/ExtraMethod.py _tests/MPM/BuildMethodCutOff.py _tests/MPM/InflationInterpolation.py _tests/MPM/InflationQuoteType.py _tests/MPM/InflationSmoothDIR.py _tests/MPM/ShortEndInflationInterpolation.py |
| MKTDATA_INFLATION | 4.7.8.1 | _tests/MPM/MKTDATA_Interpolation.py |
| FUNDINGVOL | 4.7.6 | _tests/MPM/FUNDINGVOL_0001.xlsx _tests/MPM/FUNDINGVOL_MonteCarlo_Convergence.py |

Table 19: List of MPM Testing Files.

### 2.7 Engagement Process

The model developer documentation submitted in MARS request ID 2021Apr23-LIMZHOU-17082 has been reviewed for sufficiency and completeness against the model approval request submission standards detailed in the Pricing Model Validation Key Operating Document [2]. The results of the initial review are detailed in Tables 21 and 22.

### 2.8 List of Validation Findings

##### Open Validation Findings

There are currently no validation findings requiring to be addressed for the DBOPT-RateDeterministic_InflationDeterministic model.

#### Closed Validation Findings

There are no closed issues that have been found in the model validation process.

### 2.9 List of Validation Observation

As part of the validation of pricing models, MoRM may identify problems with the model that require an immediate implementation fix and cause further validation activities to be put on hold. Ownership, compensating controls, remediation actions and timelines will be discussed and monitored as part of the MCWGs. To raise a validation finding MoRM create a validation finding request in MARS, where the finding is described, responsible action owner is assigned and a deadline for remediation of the finding specified. MoRM can revoke the model approval if validation findings are not closed within agreed timelines. MoRM will only raise validation findings and not observations for pricing models. Due to the nature of model usage for valuation and risk management, matters identified must be addressed through concrete remediation.

The following observations have been found during the last validations:

* For curves with DIR inflation indices that have monthly instruments beyond 1Y, it might be necessary to set FlatInflationInterpLimit equal to the tenor of the last monthly instrument to avoid build errors when settlement date is around the first of the month.

* The product InflSwapZC is approved for zero risk, fixed yield curve with funding volatility with setting AdjustConvexity = NO, and the testing conducted by GMVG are available and provided in a separate document, see [9].

## 3 Assessment of Approach, Conceptual Soundness and Implementation

### 3.1 Assessment of Development and Modelling Data

The models DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic are deterministic pricing framework which is used to price inflation products that do not require optionality with respect to both interest rates and the inflation index. Accordingly, the volatilities of interest and inflation-linked rates are zero. From that the modelling of interest rates and inflation in this deterministic framework reduces to the arbitrage-free construction of the applicable interest rate and inflation curves from market instruments. The pricing is then simply based on projecting the interest and inflation-linked rates from the respective curves.

More specifically, the products in scope of this model are all linear with respect to the interest rate and inflation-linked rates. In particular, the interest rate curve enters the valuation of these products essentially only in the construction of the discount factors, whereas the inflation curve (built from a given inflation index, using an interpolation method) is used only to express the inflation value at date $T$, $I(T)$ used as the underlying of the product. For this reason, the RateDeterministic_InflationDeterministic models are used for the valuation of these products and become the most appropriate approach.

Altogether, the above mentioned characteristics ensure that the model is suitable for pricing and hedging the assigned products and, at the same time, that the risks calculated by the model are accurate and appropriate for risk management purposes. Note that DBOPT is currently the bank standard model for vanilla products which have a closed form solution. Moreover, RateDeterministic is the model of choice if interest rates are deterministic.

### 3.2 Assessment of Methodology and Calibration

In this section, we review the methodology, conceptual soundness and implementation calibration of the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models.

#### 3.2.1 Assessment of Methodology

From the considerations described above, it appears clear that the main focus of the present document lies in the construction and methods of implementation of the inflation curve. According to DB Analytics (cf. [7]), the curve framework represents in the first place a convenient container to store and handle the data concerning inflation. The choice to model an inflation index through the curve framework is motivated by the possibility of re-use a number of (already tested) methods, features and infrastructures defined for the curve framework. In the second place, the curve framework allows to use also in the inflation context the field BuildMethod, which allows to interpolate between curve points (nodes). One of the main goals of this document is to test extensively the goodness of the curve technology when applied to model inflation.

The general idea behind building a curve is to solve for the discount factor at each maturity, and then recover the price of the input market instruments with the interpolation method given by the BuildMethod field. As the discount factors in DBA are constructed from the interest rate curve through the DBA DiscFact function, and the value of the inflation curve is obtained through the function GetInflationValue, we show that we can recover the full inflation curve (represented by the latter function) starting from the raw data represented by ZC inflation forwards, via the DiscFact function. This provides a sound basis for the inflation curve implementation in DB Analytics, since it relates inflation curve construction directly to the interest rate curve construction, already broadly tested in a specific MVR (cf. [4]).

![Figure 1: The locality of the risks in the build method Hybrid_Constant_Forward.](./Fig/1.png)

![Figure 2: The locality of the risks in the build method Constant_Forward.](./Fig/2.png)

After this realization, the focus shifts to the reconstruction of the interpolation methods used to construct the inflation curve. The interpolation scheme is used to obtain the discount factors for intermediate dates (i.e. dates between two consecutive maturities as given in the swap subtable of the curve, nodes of the interpolation). In Section 4.1.9 we present the results of our general independent interpolation of the inflation curve, which shows that we are able, using a specific interpolation scheme, to manually re-obtain inflation rates that match almost perfectly the ones obtained through the DBA GetInflationValue function. This last result, in particular, shows the correctness of the implementation of the inflation curve within the DBA framework.

![Figure 3: The results of independent implementation of the inflation curve.](./Fig/3.png)

#### 3.2.2 Assessment of Calibration Approach

Since the volatilities of interest and inflation rates are zero in the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models, no volatility calibration is required. Moreover, the interest and inflation curves are constructed in an arbitrage-free manner from market instruments. Hence, no assessment of the calibration approach is required.

### 3.3 Assessment of Model Assumptions and Limitations

The model assumptions and limitations are listed in Sections 2.3.1 and 5.1.1 respectively. In particular, the list of model assumptions and limitations is deemed complete and there is no relevant missing item that should be added to the documentation.

#### 3.3.1 Assessment of Model Assumption

Table 20 lists the model assumptions and gives a statement on their conceptual suitability.

| Assumption | Conceptual Suitability |
| --- | --- |
| No Arbitrage | The assumption that there are no arbitrage opportunities is a fundamental assumption for all realistic models that are used for pricing/ hedging derivatives. Since the volatilities of interest rates and inflation are zero in the DBOPT-RateDeterministic_InflationDeterministic model, the modelling of interest rates and inflation reduces to the construction of applicable interest and inflation curves from market instruments, which is arbitrage-free. |
| Interest Rates Dynamics | The products priced on this model are linear. The measure change calculations yields in analytical solution with respect to interest rate curve which depends only on the quantities obtained from the yield curve at time zero, that is no volatility dependence of PV and risk sensitivities of products. Hence, the discount factors and forwards are fully determined once a yield curve is provided. |
| Inflation Dynamics | The products priced on this model are linear. The measure change calculations yields in analytical solution with respect to inflation curve which depends only on the quantities obtained from the inflation yield curve at time zero, that is no volatility dependence of PV and risk sensitivities of products. Hence, the inflation discount factors and forwards are fully determined once a yield curve is provided. |

Table 20: Model assumptions and their conceptual suitability.

#### 3.3.2 Assessment of Model Limitations

There are currently no limitations associated to the model, hence no assessment of model limitations is required.

### 3.4 Expert Judgements in the Model

In addition to the model specification detailed in Section 2.3, the market inputs specified in Section 2.3.2.1 are subject to IPV process and the following model parameters are subject to the following expert judgement:

* There are currently no model parameters calculated using expert judgement.

### 3.5 Assessment of Model Documentation

Model users are responsible for seeking model validation for all new model and product combinations prior to use, through the submission of Model Approval Requests in line with the documentation standards set out by MoRM. Documentation should be sufficient to permit independent review and to facilitate potential replication and/or upgrade of the model by others, independent of the original developer.

The following steps are carried out in evaluating the Model Approval Request submissions:

* Upon being assigned to the Model Approval Request, the Primary Approver must review the submission to confirm completeness and adequacy against the minimum standards.
* If the Model Approval Request does not comply with submission standards or if additional information is required, the Primary Approver will reject the request and clearly document the reasons for this as well as follow up actions required by model owner/developer submitting the request, prior to resubmission.

MoRM will not commence validation until the Model Approval Request is accepted.

At any time during the validation process, MoRM have the right to request additional information they deem necessary for effective validation, even if outside the submission requirements listed in this document. MoRM may also ask for the model documents to be updated during the course of the validation. Additional supporting information obtained during the validation is also recorded in MARS.

The pricing model developer document requirements to check:

| Section | Content | MoRM check |
| --- | --- | --- |
| Executive summary | | |
| | Model Developer | Yes |
| | Documentation Info | Yes |
| Market characteristic and market data | | |
| Market characteristic | | |
| | Market considerations | Yes |
| | Market instruments | Yes |
| | Market instrument treatment | Yes |
| | Other market data | Yes |
| Model Description | | |
| Model Dynamics | | |
| | Model assumptions | Yes |
| | Model parameters | Yes |
| | Model dynamics | Yes |
| | Model components | Not relevant |
| | Model implementation | Yes |
| Model calibration | | |
| | Model parameters calibration | Yes |
| Model risk sensitivities | | |
| | Modes which apply to the model | Yes |
| | Model risk sensitivities | Yes |
| Model weaknesses, limitations | | |
| | Weakness and limitation description | Yes |
| | Model Restrictions (Conditions for Use) | Yes |
| Conceptual Soundness | | |
| | Product scope | Yes |
| | Justification for model selection | Yes |
| Model controls | | |
| | Analytics Library and Version | |
| | Compensating controls | Yes |
| | Model inputs controls | Yes |
| Implementation testing and justification of model behaviour | | Yes |
| Model configuration testing | | Yes |
| References | | Yes |

Table 21: Review of model developer document.

The pricing product model developer document requirements to check:

| Section | Content | MoRM check |
| --- | --- | --- |
| Executive summary | | |
| | Model Developer | Yes |
| | Documentation Info | Yes |
| | Model configuration | No |
| | Product Owner | Yes |
| | Business Area, Line or Asset Class | Yes |
| | Risk Management Systems | Yes |
| Products description | | |
| Product Scope | | |
| | PRDS name and definition | Yes |
| | NPA Reference | Yes |
| | Mathematical description of the payoff | Yes |
| | Product contractual parameters | Yes |
| | Product scripting | Yes |
| Product grouping | | |
| | Product main characteristics and features | Yes |
| Product model appropriateness | | |
| Model appropriateness for products it will be used for | | |
| | Product-Model Combination appropriateness | Yes |
| Product Risk factor identification | | |
| | Key Risk factors | Yes |
| | Risk sensitivities | Yes |
| | Calibration instruments | Yes |
| | Products calibration instrument choice | Yes |
| Product model weakness identification | | |
| | Product-Model Combination Limitations | Yes |
| Model Configuration Testing and Results | | |
| Convergence and stability tests | | Yes (convergence tests not relevant) |
| Limiting case and alternative model testing | | Yes (replication testing) |
| Calibration algorithm and risk sensitivities | | Not relevant |
| Risk factor tests | | |
| | End of Day condition and VaR | Yes |
| | CCAR and EBA conditions | Yes |
| | IRRBB | Yes |
| Testing evidence | | Yes |

Table 22: Review of product model developer document.

### 3.6 IT Implementation Testing

For Pricing models, implementation refers to DBA releases and deployment refers to integrating them into risk calculators. The deployed model library executable code must be held in a secure and controlled environment or embedded in a system which is held in a secure and controlled environment.

DBAnalytics is the only system used for the model implementation. The model is implemented in the DBAnalytics library and the model code is stored in the DBAnalytics repository. The model code is version controlled and the version of the library used for testing is documented in the model developer documentation.
The following implementation tests have been carried out by DBA:

- Price Replication Tests:
  Verification of the performance of the DBOPT-RateDeterministic_InflationDeterministic model by replicating the PV in Excel through interpolation of interest rates and inflation curves.
- Sensitivity Analysis:
  PV and Flatdelta as a function of parallel interest rate and inflation curve shifts.
- Risk Factor Tests:
  Verify the PV behaviour of the products with respect to risk factor shifts.
- Scenario Analysis:
  Verify the PV behaviour of the products under applicable VaR scenarios, CCAR shocks, and IRRBB scenarios.

## 4 Independent Validation Testing

### 4.1 Model Specific Testing

#### 4.1.1 Inflation Interpolation

We begin our testing of the model by focusing on the inflation interpolation methodology, and it's impact on the projected inflation forwards. In particular, DBAnalytics supports two types of curve interpolation, namely FLAT and DIR (see equations (5) and (6)). In Figure 4 we show the impact of the choice of interpolation on the projected inflation forward (obtained from the inflation curve using the DBAnalytics GetInflationValue function). The resulting behaviour, for both interpolation types, is fully consistent with equations (5) and (6).

![Figure 4: Illustration of the impact of choice of inflation interpolation on projected inflation forwards.](./Fig/4.png)

Figure 4: Illustration of the impact of choice of inflation interpolation on projected inflation forwards. The plot compares DIR and FLAT interpolation settings. Both curves show expected behaviour of inflation forwards.

While it is most common to interpolate linearly between the 1st of each month, in Tokyo the inflation interpolation runs from the 10th to the 10th of the following month, the linear interpolation between these dates are run with "InflationInterpolation = LINEAR-10". In Figure 5 we compare between the interpolations LINEAR-10 and FLAT and compare between LINEAR and manual calculation of inflation forward. We see consistent results. For this test, we use the Japanese inflation index JGPNJGBI.

![Figure 5: Illustration of the impact of choice of inflation interpolation on projected inflation forwards.](./Fig/5.png)

Figure 5: Illustration of the impact of choice of inflation interpolation on projected inflation forwards. The first plot compares LINEAR-10 and FLAT interpolation settings. Both curves show expected behaviour of inflation forwards. The second plot shows similar results when comparing inflation forward calculation with LINEAR-10 and manual interpolation. For this test, we use the Japanese inflation index JGPNJGBI.

While it is most common to interpolate linearly between the 1st of each month, in Israel the inflation interpolation runs from the 15th to the 15th of the following month, the linear interpolation between those dates are run with "InflationInterpolation = FLAT-15". In Figure 6 we compare between the interpolations FLAT-1 and FLAT-15 and compare with the manual calculation of inflation forward. We see consistent results. For this test, we use the Israelian inflation index ISCPIL.

![Figure 6: Illustration of the impact of choice of inflation interpolation on projected inflation forwards.](./Fig/6.png)

Figure 6: Illustration of the impact of choice of inflation interpolation on projected inflation forwards. The first plot compares FLAT-15 and FLAT-1 interpolation settings. Both curves show expected behaviour of inflation forwards. One can see jumps on the FLAT-15 graph in the middle where FLAT-1 is constant as expected because the inflation forward jumps in the 15th of a month, in the middle where FLAT-1 jumps (the 1st of the month). The second plot shows same results when comparing inflation forward calculation with FLAT-15 and manual interpolation. For this test, we use the Israelian inflation index ISCPIL.

#### 4.1.2 Inflation Delay

In the current subsection we look at the inflation delay (lag) parameter. This parameter specifies refers to the lag between the date for which the inflation index curve is queried and the actual fixing date of the inflation index corresponding to the date of query. One typically has a lag of a few months between the two, with the fixing date proceeding the later.

In Figure 7 we show the impact of the inflation delay setting on the inflation forwards (obtained using the DBAnalytics GetInflationValue function), for the two interpolation settings DIR and FLAT. For the current test, we use the UKRPI index curve for 20-Feb-2018 COB. The figure shows that for both interpolation settings, the 2M delay curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve by the expected offset of two months. This test validates the appropriateness of implementation of the delay functionality in DBAnalytics.

![Figure 7: Illustration of the impact of delay setting on inflation forward.](./Fig/7.png)

Figure 7: Illustration of the impact of delay setting on inflation forward. The plot on the left shows the effect of delay for interpolation setting DIR, while the plot on the right shows the effect of delay for interpolation setting FLAT. For both plots, the 2M delayed curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve. This validates the appropriateness of implementation. For the current test, we use the UKRPI index curve for 20-Feb-2018 COB.

In Figure 8 we show the impact of the inflation delay setting on the inflation towards (obtained using the DBAnalytics GetInflationValue function), for the interpolation setting LINEAR-10. For the current test, we use the JGPNJGBI index curve for 18-Jan-2019 COB. The figure shows that the 3M delay curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve by the expected offset of three months. This test validates the appropriateness of implementation of the delay functionality in DBAnalytics.

![Figure 8: Illustration of the impact of delay setting on inflation forward.](./Fig/8.png)

Figure 8: Illustration of the impact of delay setting on inflation forward. The plot shows the effect of delay for interpolation setting LINEAR-10. For both plots, the 3M delayed curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve. This validates the appropriateness of implementation. For the current test, we use the JGPNJGBI index.

In Figure 9 we show the impact of the inflation delay setting on the inflation forwards (obtained using the DBAnalytics GetInflationValue function), for the interpolation setting FLAT-15. For the current test, we use the ISCPIL index curve for 5-Aug-2019 COB. The figure shows that the 1M delay curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve by the expected offset of three months. This test validates the appropriateness of implementation of the delay functionality in DBAnalytics.

![Figure 9: Illustration of the impact of delay setting on inflation forward.](./Fig/9.png)

Figure 9: Illustration of the impact of delay setting on inflation forward. The plot shows the effect of delay for interpolation setting FLAT-15. For both plots, the 1M delayed curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve. This validates the appropriateness of implementation. For the current test, we use the ISCPIL index.

#### 4.1.3 Inflation Seasonality

In the current subsection we look at the impact of seasonality adjustments on the projected inflation forwards. For the current test we consider UKRPI index curve for 20-Feb-2018 COB. In Figure 10 we show the impact of seasonality adjustments on the projected inflation forwards. As expected, the seasonality adjusted curves exhibit oscillations around the unadjusted curves. In order to quantitatively verify the validity of implementation of seasonality in DBAnalytics, we investigate the validity of Equation (8). More specifically, we have compared the ratio of two curves (with seasonality adjustement and without the adjustment) with the seasonality factors that are explicitly specified in the inflation curve object. The results, presented in Figure 11, show a close match. This test validates the appropriateness of implementation of the seasonality adjustement for inflation curves in DBAnalytics.

![Figure 10: Illustration of the impact of seasonality adjustment.](./Fig/10.png)

Figure 10: Illustration of the impact of seasonality adjustment. The plot on the left shows the effect of for interpolation setting DIR, while the plot on the right shows the effect for interpolation setting FLAT. For both plots, one can see an expected oscillation of the seasonality adjustment around the unadjusted curve. This validates the appropriateness of implementation. For the current test, we use the UKRPI index curve for 20-Feb-2018 COB.

![Figure 11: The figure shows a comparison of seasonality factors.](./Fig/11.png)

Figure 11: The figure shows a comparison of seasonality factors obtained from the ratio of adjusted inflation forwards and unadjusted inflation forwards, to the input seasonality factors specified in the inflation curve table. The current figure shows the results for interpolation setting FLAT. Oe use the UKRPI index curve for 20-Feb-2018 COB. The close match validates the appropriateness of implementation of the seasonality adjustment for inflation curves in DBAnalytics.

In Figure 12 we show the seasonality adjustments on the projected inflation forwards for the index JGPNJGBI. As expected, the seasonality adjusted curves exhibit oscillations around the unadjusted curves. This test validates the appropriateness of implementation of the seasonality adjustement for inflation curves in DBAnalytics.

![Figure 12: Illustration of the impact of seasonality adjustment.](./Fig/12.png)

Figure 12: Illustration of the impact of seasonality adjustment. The plot on the left shows the effect of seasonality for interpolation setting LINEAR-10. One can see an expected oscillation of the seasonality adjustment around the unadjusted curve. This validates the appropriateness of implementation. For the current test, we use the JGPNJGBI index curve for 18-Jan-2019 COB.

#### 4.1.4 Repricing Instruments

##### 4.1.4.1 UKRPI

We have repriced ZC swaps referencing the UKRPI index, for 20-Feb-2018 COB. The results are shown in Figure 13, and show a perfect match between ZC inflation rate obtained directly from the inflation curve using the GetInflationValue function (Input) and the ZC inflation rate obtained from the DBOPT pricing model (Repriced).

![Figure 13: A comparison of ZC inflation rate obtained directly from the inflation curve using the GetInflationValue function (Input) and the ZC inflation rate obtained from the DBOPT pricing model (Repriced).](./Fig/13.png)

Figure 13: A comparison of ZC inflation rate obtained directly from the inflation curve using the GetInflationValue function (Input) and the ZC inflation rate obtained from the DBOPT pricing model (Repriced). The results show a perfect match.

#### 4.1.5 BuildMethodCutOff

In this section we investigate the body property BuildMethodCutOff which works with InflationInterpolation FLAT and Build Method = HYBRID_CONSTANT_FORWARD. The user specifies in BuildMethodCutOff the number of months where the curve build method switches from CONSTANT_FORWARD to HYBRID_FORWARD. In rates table, however in inflation, swaps are also used at the short end, so this parameter controls where the switch takes place.

In the following we a UKRPI curve, with zero rates ranging from 2.6% to 3.75%. The seasonality spreads are set to 1 in most cases and the relevant CPI on valuation date (29. Aug. 2013) are 249.7 (UKRPI), 116.95 (CPXTEMU), and 125.76 (FRCPXTOB), respectively.

We carry out the following test, illustrated in Figures (14) and (15). Monthly zero rates were used up to 2 years to build the UKRPI curve, hence we do not expect any differences between CONSTANT_FORWARD and HYBRID_FORWARD. The HYBRID_CONSTANT_FORWARD inflation curve coincides with the HYBRID_FORWARD one when no BuildMethodCutOff is set, but when we set BuildMethodCutOff = 37M", it matches the CONSTANT_FORWARD curve up to the 36th month as expected.

In Figure (15) we plot the graph of the difference of the HYBRID_CONSTANT_FORWARD inflation curve with the two plain build methods, in the inflation rate space, and in Figure (15) the graph of the same difference in the inflation ZC rate space. While we observe no deviation below 36M compared to the CONSTANT_FORWARD method, there is no difference compared to the HYBRID_FORWARD method above the 36th month.

![Figure 14: UKRPI inflation rate curve deviations (using HYBRID_CONSTANT_FORWARD with BuildMethodCutOff = 37M) compared to the two plain build methods.](./Fig/14.png)
![Figure 15: UKRPI inflation ZC rate curve deviations (using HYBRID_CONSTANT_FORWARD with BuildMethodCutOff = 37M) compared to the two plain build methods.](./Fig/15.png)

Notice that the HYBRID_FORWARD method is used beyond the 36th month, whereas we set BuildMethodCutOff to 37M. This is due to the fact that the switch is actually applied beyond the last maturity of zero rates in the swap subtable which is strictly smaller than the BuildMethodCutOff setting. This can be seen in Figures 16 and 17. For Figure 16, we chose the cut off after 66 month, however, the switch is applied after 60 month (5 year) which is the last maturity in the swap subtable which is below 66. More interestingly, for Figure 17 we chose 96 month (= 8 years) which corresponds to a zero swap rate maturity in the subtable. However, the switch is applied after 84 month (= 7 years), since this is the last maturity in the subtable which is strictly smaller than 96 month.

![Figure 16: UKRPI inflation curve deviations (using HYBRID_CONSTANT_FORWARD with BuildMethodCutOff = 66M) compared to the two plain build methods.](./Fig/16.png)
![Figure 17: UKRPI inflation curve deviations (using HYBRID_CONSTANT_FORWARD with BuildMethodCutOff = 96M) compared to the two plain build methods.](./Fig/17.png)

#### 4.1.6 Build Method Comparison

In this section we compare both the inflation values and the risks for different Build Methods. We consider a UKRPI inflation curve with Valuation Date and Settlement Date 05-Feb-2014, last CPI date 01-Dec-2013, InflationDelayInput = InflationDelayOutput = 2 months and InflationInterpolation = FLAT.

We investigate the following Build Methods:

- HybridConstantForward
- ConstantForward
- HybridForward
- LinearZero
- LinearForward
- QuadraticZero
- CubicZero
- QuadraticForward

Although all these methods tend to evaluate the inflation curves in very similar fashions, some conspicuous differences can be observed when the inflation risk is concerned. The methods HybridConstantForward, HybridForward, ConstantForward and LinearZero produce curves that show the desired behaviour and yield similar results when evaluating the risks as a function of bumping the inflation curve at a given node, since for such interpolation methods the difference between the base inflation curve and the curve obtained by bumping the same curve at a single node is concentrated around the bumping node. On the other hand, the methods LinearForward, QuadraticZero, CubicZero and QuadraticForward display a slightly different pattern: when one of these methods is used, the same difference is spread over and "scattered" around a wide interval of time maturities.

In the following, we test the effects of non-locality of the various interpolation schemes.

##### 4.1.6.1 Hybrid Constant Forward

We start by examining the method HybridConstantForward. We consider the inflation curve (normalized at the Valuation Date) and the implied ZC inflation rates.

We consider the inflation curve $I(t)$ and the corresponding zero rates $i(t)$, both interpolated using the Hybrid Constant Forward method. The relationship between $I(t)$ and $i(t)$ is given as follows. If $T_0$ is the valuation date and $n$ denotes the numbers of years after valuation date, then, if $n \geq 1$, we have

$$\frac{I(T_0 + n)}{I(T_0)} = (1 + i(n))^n,$$

while for $n < 1$, and for $m$ the number of months after $T_0$, we have

$$\frac{I(m)}{I(m - 1y)} = (1 + i(m)).$$

![Figure 18: Left: the inflation curve I(t), constructed with Build Method HybridConstantForward (normalized by dividing its values by I(ValuationDate), so that it is equal to 100 at Valuation Date). Right: the corresponding ZC inflation rates, i(t).](./Fig/18.png)

We next consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate (at 05-Feb-19) by 1 bp. We plot the difference between the base curve and the curve obtained by bumping the 5Y zero rate. We observe that this difference is concentrated around a small neighbourhood of the bumped node, as wanted.

![Figure 19: The difference between the base inflation curve and the bumped inflation curve in the build method HybridConstant Forward remains localized in a neighbourhood of the bumped node.](./Fig/19.png)

For the next test we examine the impact of the HybridConstantForward interpolation method over hedging. We consider, for a given maturity $T$, and for the evaluation date, denoted by $T_0$, the curve $I_{NODE\text{ }repl_i}(t)$ obtained by bumping the $i$-th node of the inflation curve (denoted by $T_i$) by 1 bp. Here $i$ runs through all the ZeroRate given in the Table "Swaps" of the curve, which are used to build the curve by interpolation. Let us denote by $I_{BASE}(t)$ the original curve. We then consider, for all $i$, the following quantities

$$H_i(T) = \frac{I_{NODE\text{ }repl_i}(T) - I_{BASE}(T)}{I_{NODE\text{ }repl_i}(T_0) - I_{BASE}(T_0)}.$$

The quantities $H_i(T)$ can be interpreted as the change of inflation at maturity $T$, divided by the change (by 1 bp) of the inflation at the interpolating node $T_i$. The desired behaviour of a good interpolation method would be that if the interpolating node $i$ is far from the maturity $T$, the quantity $H_i(T)$ should be zero, whereas we expect that all the nonzero quantities $H_i(T)$ should be concentrated when $T_i$ is close to $T$.

This test can thus be interpreted as a hedging test, since the quantities $H_i(T)$ measure the cost of a hedging strategy for an inflation instrument with maturity equal to $T$.

In our test, we set $T = 5Y\text{ }6M$. The result of our test is presented in Fig. 20.

![Figure 20: The quantities Hi(T) as i runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity T = 5Y6M. These quantities are equal to zero when Ti is far from T and the nonzero Hi(T) are concentrated, almost symmetrically, for nodes i such that Ti is close to the maturity T = 5Y6M, as desired.](./Fig/20.png)

The previous tests show that the interpolation method HybridConstantForward satisfies the conditions for an effective interpolation method to build an inflation curve out of the basic data represented by the inflation ZC rates (contained in the table "Swaps" of the curve). As we have seen, both the pricing and the risks are evaluated consistently under this interpolation method.

In the following we thus proceed to test the other interpolation methods against the HybridConstantForwardMethod, which we consider as our benchmark interpolation method for the inflation curve.

##### 4.1.6.2 Constant Forward

In this section we compare the curve constructed with the method Constant Forward with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Figure 21: The difference between the inflation curve with Build Method HybridConstantForward and the one with ConstantForward method. Both curves have been normalized by dividing them by I(ValuationDate), so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/21.png)

![Figure 22: The difference between the inflation ZC Rates implied by the normalized inflation curves with Build Method HybridConstantForward and with ConstantForward method. The two ZC inflation curves closely match.](./Fig/22.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate and plot the diagram thus obtained. The test shows that under the interpolation method ConstantForward such difference remains localized in a small neighbourhood of the bumping node (05-Feb-19), as desired.

![Figure 23: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and ConstantForward) remains localized in a neighbourhood of the bumped node.](./Fig/23.png)

We next repeat the hedging test for the interpolation method ConstantForward. We obtain the desired behaviour also for this method. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1.

![Figure 24: The quantities Hi(T) as i runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity T = 5Y6M. These quantities are equal to zero when Ti is far from T and the nonzero Hi(T) are concentrated at nodes i such that Ti is close to the maturity T = 5Y6M, as desired.](./Fig/24.png)

##### 4.1.6.3 Hybrid Forward

In this section we compare the curve constructed with the method Hybrid Forward with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot the difference between them. We see that the two curves closely match.

![Figure 25: The difference between the inflation curve with Build Method HybridConstantForward and the one with HybridForward method. Both curves have been normalized by dividing them by I(ValuationDate), so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/25.png)

![Figure 26: The difference between the inflation ZC Rates implied by the normalized inflation curves with Build Method HybridConstantForward and with HybridForward method. The two ZC inflation curves closely match.](./Fig/26.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate and plot the diagram thus obtained. The test shows that under the interpolation method HybridForward such difference remains localized in a small neighbourhood of the bumping node (05-Feb-19), as desired.

![Figure 27: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and HybridForward) remains localized in a neighbourhood of the bumped node.](./Fig/27.png)

We next repeat the hedging test of Fig. 20, for the interpolation method HybridForward. We obtain the desired behaviour also for this method. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1.

![Figure 28: The quantities Hi(T) as i runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity T = 5Y6M. These quantities are equal to zero when Ti is far from T and the nonzero Hi(T) are concentrated at nodes i such that Ti is close to the maturity T = 5Y6M, as desired.](./Fig/28.png)

##### 4.1.6.4 Linear Zero

In this section we compare the curve constructed with the method Linear Zero with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Figure 29: The difference between the inflation curve with Build Method HybridConstantForward and the one with LinearZero method. Both curves have been normalized by dividing them by I(ValuationDate), so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/29.png)

![Figure 30: The difference between the inflation ZC Rates implied by the normalized inflation curves with Build Method HybridConstantForward and with LinearZero method. The two ZC inflation curves closely match.](./Fig/30.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate and plot the diagram thus obtained. The test shows that under the interpolation method LinearZero such difference remains localized in a small neighbourhood of the bumping node (05-Feb-19), as desired.

![Figure 31: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and LinearZero) remains localized in a neighbourhood of the bumped node.](./Fig/31.png)

We next repeat the hedging test of Fig. 20, for the interpolation method LinearZero. We obtain the desired behaviour also for this method. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1.

![Figure 32: The quantities Hi(T) as i runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity T = 5Y6M. These quantities are equal to zero when Ti is far from T and the nonzero Hi(T) are concentrated at nodes i such that Ti is close to the maturity T = 5Y6M, as desired.](./Fig/32.png)

##### 4.1.6.5 Linear Forward

In this section we compare the curve constructed with the method Linear Forward with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match, although some discrepancies can be observed.

![Figure 33: Left: the inflation curves interpolated in the two methods HybridConstantForward and LinearForward. Right: the difference between the two curves. Both curves have been normalized by dividing them by I(ValuationDate), so that both are equal to 1 at Valuation Date. The two inflation curves closely match, although some differences can be observed.](./Fig/33.png)

![Figure 34: Left: the inflation ZC Rates implied by the normalized inflation curves, interpolated with Build Methods HybridConstantForward and LinearForward. Right: the difference between the two ZC rate curves. The two curves are very close but some small differences can be observed for various maturities.](./Fig/34.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate and plot the diagram thus obtained. For the build method LinearForward the next figures show that such difference is spread over a wide interval and does not remain localized around the bumped node.

![Figure 35: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and LinearForward). Whereas in the HybridConstantForward method the difference is clearly concentrated around the bumped node (05-Feb-19), for the curve interpolated with the LinearForward method, we see that such difference is scattered over a much wider interval.](./Fig/35.png)

The next figure shows the hedging test for the interpolation method LinearForward. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1. In this case, we see that the quantities $H_i(T)$ are different than zero and non-negligible for a very large set of maturities $T_i$ stretching from 1 month up to 7Y. This behaviour is not the desired behaviour for an interpolation method.

![Figure 36: The quantities Hi(T) as i runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity T = 5Y6M. These quantities are different than zero and non-negligible for a very large set of maturities Ti, stretching from 1 month up to 7Y.](./Fig/36.png)

##### 4.1.6.6 Quadratic Zero

In this section we compare the curve constructed with the method QuadraticZero with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Figure 37: Left: the inflation curves interpolated in the two methods HybridConstantForward and QuadraticZero. Right: the difference between the two curves. Both curves have been normalized by dividing them by I(ValuationDate), so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/37.png)

![Figure 38: Left: the inflation ZC Rates implied by the normalized inflation curves, interpolated with Build Methods HybridConstantForward and QuadraticZero. Right: the difference between the two ZC inflation curves. The two curves are very close.](./Fig/38.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate (05-Feb-19) and plot the diagram thus obtained. For the build method QuadraticZero the next figures show that such difference is spread over a wider interval compared to HybridConstantForward and does not remain localized around the bumped node.

![Figure 39: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and QuadraticZero). Whereas in the HybridConstantForward method the difference is clearly concentrated around the bumped node (05-Feb-19), for the curve interpolated with the QuadraticZero method, we see that such difference is scattered over a much wider interval.](./Fig/39.png)

The next figure shows the hedging test for the interpolation method QuadraticZero. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1. In this case, we see that for a maturity $T = 5Y6M$ the quantities $H_i(T)$ are different than zero and non-negligible for a very large set of maturities $T_i$ stretching from 21M up to 9Y. This behaviour is not the desired behaviour for an interpolation method.

![Figure 40: The quantities Hi(T) as i runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity T = 5Y6M. These quantities are different than zero and non-negligible for a very large set of maturities Ti, stretching from 21M up to 70Y.](./Fig/40.png)

##### 4.1.6.7 Cubic Zero

In this section we compare the curve constructed with the method CubicZero with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Figure 41: Left: the inflation curves interpolated in the two methods HybridConstantForward and CubicZero. Right: the difference between the two curves. Both curves have been normalized by dividing them by I(ValuationDate), so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/41.png)

![Figure 42: Left: the inflation ZC Rates implied by the normalized inflation curves, interpolated with Build Methods HybridConstantForward and CubicZero. Right: the difference between the two ZC inflation curves. The two curves are very close.](./Fig/42.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate (05-Feb-19) and plot the diagram thus obtained. For the build method CubicZero the next figures show that such difference is spread over a wider interval compared to HybridConstantForward and does not remain localized around the bumped node.

![Figure 43: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and CubicZero). Whereas in the HybridConstantForward method the difference is clearly concentrated around the bumped node (05-Feb-19), for the curve interpolated with the CubicZero method, we see that such difference is scattered over a much wider interval.](./Fig/43.png)

The next figure shows the hedging test for the interpolation method CubicZero. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1. In this case, we see that for a maturity $T = 5Y6M$ the quantities $H_i(T)$ are different than zero and non-negligible for a very large set of maturities $T_i$ stretching from 21M up to 9Y. This behaviour is not the desired behaviour for an interpolation method.

![Figure 44: The quantities Hi(T) as i runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity T = 5Y6M. These quantities are different than zero and non-negligible for a very large set of maturities Ti, stretching from 21M up to 9Y.](./Fig/44.png)

##### 4.1.6.8 Quadratic Forward

In this section we compare the curve constructed with the method QuadraticForward with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Figure 45: Left: the inflation curves interpolated in the two methods HybridConstantForward and QuadraticZero. Right: the difference between the two curves. Both curves have been normalized by dividing them by I(ValuationDate), so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/45.png)

![Figure 46: Left: the inflation ZC Rates implied by the normalized inflation curves, interpolated with Build Methods HybridConstantForward and QuadraticForward. Right: the difference between the two ZC inflation curves. The two curves are very close.](./Fig/46.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate (05-Feb-19) and plot the diagram thus obtained. For the build method QuadraticForward the next figures show that such difference is spread over a wide interval and does not remain localized around the bumped node.

![Figure 47: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and QuadraticForward). Whereas in the HybridConstantForward method the difference is clearly concentrated around the bumped node (05-Feb-19), for the curve interpolated with the QuadraticForward method, we see that such difference is scattered over a much wider interval.](./Fig/47.png)

The next figure shows the hedging test for the interpolation method QuadraticForward. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1. In this case, we see that the quantities $H_i(T)$ are different than zero and non-negligible for a very large set of maturities $T_i$ stretching from 22M up to 9Y. This behaviour is not the desired behaviour for an interpolation method.

![Figure 48: The quantities Hi(T) as i runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity T = 5Y6M. These quantities are different than zero and non-negligible for a very large set of maturities Ti, stretching from 22M up to 9Y.](./Fig/48.png)

#### 4.1.7 FlatInflationInterpLimit

Unfortunately the combination of bootstrapping together with the bracketing required for computing inflation with DIR can produce unstable results with the builder failing to return a curve. This tends to happen when settlement date is near a bracketing date and at the short end of the curve, usually up to 2Y, where monthly instruments are used. The bootstrapper needs to take big swings in order to fit an apparent innocuous curve. See FO document ([7]) for more details.

For example, if we take the curve FRCPXTOB, last CPI date 1 July 2013 and InflationDelayInput of 3M and change the Valuation date to 29th of August and Settlement Date to 02-September-13, the curve doesn't build and an error is returned. MVQL curve builder also failed to work due to the root solver not being able to bracket the root appropriately.

One solution is to set "InflationMethod" equal to "APPROX" (as opposed to EXACT) which is already the default setting. With APPROX, the curve's pillar dates are put on the maturity date of the instrument (adjusted for InflationDelayOutput). However this can give noticeable differences between the target and the resulting curve with differences several basis points at the short end as figure (49) shows. Also note that APPROX method doesn't work for YoY at the short end.
The other solution is to set the property "FlatInflationInterpLimit" to a value greater than 0. This will force the builder to use the FLAT interpolation method for the first n months of the curve. The default value is 0 which means that the builder will use DIR for all months. The value of n is set in months and can be set to any value between 0 and 12. The default value of 0 means that the builder will use DIR for all months.
![Figure 49: Zero rates bootstrapped to DIR curve (with FLAT short end) using InflationMethod = APPROX. In red the values obtained from the GetInflationValue function.](./Fig/1.png)

A better alternative is to use the field "FlatInflationInterpLimit". It controls where FLAT instruments (with fixings on the first of the month) end. ShortEndInflationInterpolation controls the behaviour at the short-end but only up to 350d, hence the setting above allows us to extend that to the period specified in that setting.

Recall than in this context FLAT means fixings on the first of the month. So if InflationInterpolation is DIR, the interpolation within a month will still be linear.

We test this by changing the curve ValuationDate to 30th of August and Settlement date to 3rd of September. Without this setting the curve fails to build. Setting it to 22M the curve builds and we're able to reprice the instruments. See figure (50).

![Figure 50: Repricing instruments when FlatInflationInterpLimit is set to 22M. We reprice curve instruments with GetInflationValue function (green dots), via the DiscFact function (blue dots) and from inflation ZC rates (red dots).](./Fig/2.png)

#### 4.1.8 InflationInterpolation MODFLAT

In v210 a new type of inflation interpolation was introduced, namely "MODFLAT". When using MODFLAT inflation interpolation the behaviour is the same as FLAT, unless the ValuationDate and SettlementDate of the curve happen to be in different months (usually settlement date is a couple of days after valuation date), in which case the InflationDelayInput gets increased by a month.

We test this by repricing instruments in two scenarios. One in which both settlement date and Valuation date are in the same month and another in which they are on different months.

In the first one we reprice the instruments with the InflationDelayInput specified in the curve, in the second one we reprice them using the previous inflationDelayInput plus one month. We do this for both ShortEndInflationInterpolation YoY and MODFLAT (FLAT in this instance is not allowed).

The results are satisfactory as we reprice the instruments perfectly in both instances. See for example figure (51).

![Figure 51: Repricing instruments when InflationInterpolation is set to MODFLAT and ShortEndInflationInterpolation is also MODFLAT.](./Fig/3.png)

#### 4.1.9 Independent Implementation of Inflation Curve

In this section we present the results of MRM's independent implementation of the inflation curve based on the market data inputs that are used to build inflation curve in the DBA framework. Using our independent implementation of the curve, we have been able to exactly match (upto machine precision) the inflation outputs (projected inflation, and/or projected inflation rate equivalently) produced by the by DBA inflation curve. This test provides a strong validation of correctness of implementation of the inflation curve within the DBA framework. Below, we outline our testing and results.

For the purposes of our testing, we have relied on the market data inputs that are used for constructing the inflation curve in DBA. We consider the UKRPI inflation curve. The inflation curve is constructed for COB 5 – Feb – 2014. The key parameter values for the curve construction are provided in Table 23. The market data inputs used for curve construction are provided in Tables 24, 25 and 26.

| ValuationDate | 05-Feb-14 |
| --- | --- |
| SettlementDate | 05-Feb-14 |
| Line Type | INFLATION |
| Curve Type | SPREAD |
| DiscountIndex | ACT/365.25 |
| BuildMethod | HYBRID_CONSTANT_FORWARD |
| InflationInterpolation | FLAT |
| DiscountBuildMethodInterpolation | YOY |
| BuildMethodDrift | 0% |
| InflationCurveInput | ZM |
| InflationCurveOutput | ZM |
| TimeBasis | 30/360 |
| Reset frequency | ANNUALLY |

| Maturity | Zero Rate |
| --- | --- |
| 1M | 2.5037% |
| 2M | 2.5046% |
| 3M | 2.3737% |
| 4M | 2.5835% |
| 5M | 2.6434% |
| 6M | 2.7738% |
| 7M | 2.8839% |
| 8M | 2.4836% |
| 9M | 2.4767% |
| 10M | 2.6286% |
| 11M | 2.7187% |
| 1Y | 2.4200% |
| 13M | 1.8617% |
| 14M | 2.2610% |
| 15M | 2.4556% |
| 16M | 2.7581% |
| 17M | 2.8017% |
| 18M | 2.7007% |
| 19M | 2.5640% |
| 20M | 2.5400% |
| 21M | 2.7238% |
| 22M | 2.8259% |
| 23M | 2.8800% |
| 2Y | 2.7000% |
| 3Y | 2.8760% |
| 4Y | 2.9870% |
| 5Y | 3.0340% |
| 6Y | 3.0780% |
| 7Y | 3.1180% |
| 8Y | 3.1550% |
| 9Y | 3.1950% |
| 10Y | 3.2340% |
| 12Y | 3.3100% |
| 15Y | 3.4430% |
| 20Y | 3.5730% |
| 25Y | 3.6130% |
| 30Y | 3.6410% |
| 40Y | 3.6210% |
| 50Y | 3.6130% |
| 60Y | 3.5680% |
| 70Y | 3.5680% |

Table 24: ZC inflation swap rates observed in the market. These rates are market data inputs for the construction of inflation curve. These are provided as an input to the DBA inflation curve through the Swaps table.

| Date | Maturity | Spread |
| --- | --- | --- |
| 2y | 01-Jan-14 | 99.3545% |
| 2y | 01-Feb-14 | 99.8435% |
| 2y | 01-Mar-14 | 99.9476% |
| 2y | 01-Apr-14 | 100.2825% |
| 2y | 01-May-14 | 100.2044% |
| 2y | 01-Jun-14 | 100.1661% |
| 2y | 01-Jul-14 | 99.9067% |
| 2y | 01-Aug-14 | 100.0149% |
| 2y | 01-Sep-14 | 100.1206% |
| 2y | 01-Oct-14 | 99.9718% |
| 2y | 01-Nov-14 | 100.0015% |
| 2y | 01-Dec-14 | 100.0374% |
| 5y | 01-Jan-14 | 99.4198% |
| 5y | 01-Feb-14 | 99.6731% |
| 5y | 01-Mar-14 | 99.9258% |
| 5y | 01-Apr-14 | 100.2526% |
| 5y | 01-May-14 | 100.3800% |
| 5y | 01-Jun-14 | 100.3125% |
| 5y | 01-Jul-14 | 99.9298% |
| 5y | 01-Aug-14 | 99.9973% |
| 5y | 01-Sep-14 | 100.2033% |
| 5y | 01-Oct-14 | 100.0625% |
| 5y | 01-Nov-14 | 99.9410% |
| 5y | 01-Dec-14 | 100.0045% |

Table 25: The seasonality coefficients that are used as inputs for the construction of inflation curve. These are provided as an input to the DBA inflation curve through the Spreads table.

| Date | Index |
| --- | --- |
| 01-Jan-02 | 173.30 |
| 01-Feb-02 | 173.80 |
| 01-Mar-02 | 174.50 |
| ... | ... |
| 01-Oct-13 | 251.90 |
| 01-Nov-13 | 252.10 |
| 01-Dec-13 | 253.40 |

Table 26: The historical inflation index values used as inputs for the construction of inflation curve. These are provided as an input to the DBA inflation curve through the CPIFigures table.

Our methodology follows the basic principles of inflation curve construction as set forth in the FO Document [7]. In this document it is emphasized that although an inflation curve is not strictly the same as an interest rate curve, the choice of modelling an inflation curve as inheriting the curve framework is justified by the opportunity of re-use the codes and the methods already developed in DBAnalytics for the curve objects.

In the same order of ideas, the use of the curve framework for inflation curves allows us to take advantage of the interpolation methods already introduced for the interest rate curves, through the rate field BuildMethod. Therefore, all the interpolation methods already in use to implement an interest rate curve can be reused for the constructing inflation curves.

The main idea of curve construction (in the interest rate case) is to solve for the discount factor at each maturity, so that, with the interpolation method chosen by the BuildMethod field, we can recover the prices of quoted instruments. The inflation curve must therefore be able to give us a projected inflation forward for any given set date in the future. Equivalently, the inflation curve should provide us with the projected inflation rate for a set future date. The inflation rate is related to the projected inflation forward through the following formula:

$$i_{Rate}(T) = \left( \frac{I_{Rate}(T)}{I(T_0)} \right)^{\frac{1}{T-T_0}} - 1 \quad \text{for } T - T_0 \geq 1,$$

$$i_{Rate}(T) = \frac{I_{Rate}(T)}{I_{Rate}(T - 1y)} - 1 \quad \text{for } T - T_0 \geq 1,$$

Where $T_0$ denoted the valuation date, and $T$ denoted the future date.

An inflation curve object is provided with a table of of historical inflation values (CPIFigures table).

The inflation curve can be naturally mapped onto a rate curve $D(T)$ using the following expression:

$$I(T) = \frac{I(T_0)}{D(T - nM)} \cdot S(T - nM) \cdot \epsilon(T),$$

where $I(T_0)$ is the spot value of inflation (i.e. inflation on settlement date), and is obtained from the CPIFigures table by applying appropriate time lag specified by InflationDelayInput nM. The seasonality adjustment coefficient $S(T - nM)$ is obtained from the Spreads table. In particular, for the data in Table 25 the seasonality adjustment is determined as follows:

* For $T < 2$ seasonality coefficient is set to 1, as it is assumed that the ZC swap rates for the market instruments in Table 24 already include the impact of seasonality.

* For $2 < T \leq 5$ the seasonality coefficients are obtained by linearly interpolating in log-space the corresponding (lagged) coefficients from the 25 table for 2Y and 5Y.

* for $T > 5$ the seasonality (lagged) coefficients for 5Y are taken.

The rate curve $D(T)$ is constructed, with appropriate lag, using the following inputs:

* The valuation date is specificed by appropriate nM lag to the inflation curve valuation date. The lag specified by the InflationDelayInput parameter.

* The discount factors for corresponding maturities are obtained from the ZC swap rates specified in the Swaps.

* An appropriate interpolation scheme is used to obtain the discount factor for intermediate dates (i.e. dates not falling on input swap maturity dates). The interpolation scheme is specified by the BuildMethod parameter. In particular, for the our UKRPI curve the build method is HYBRID_CONSTANT_FORWARD. This build method assumes CONSTANT_FORWARD interpolation at short end and HYBRID_FORWARD at long end. The boundary between the two methods is specified by the parameter BuildMethodCutOff, which is set to 370m in our case. More details on the interpolation scheme and relevant results are presented in Section 4.1.9.1 below.

Finally, $\epsilon(T)$ represents the interpolation used to determine the inflation for a day inside a month. This can correspond to either FLAT or DIR, and has been discussed previously in Section 4.1.1.

The results of the independent implementation are shown in Figure 52. The projected inflation for the independent implementation has been obtained by using Eq. (17) with inputs determined by the procedure outlined above. On the other hand, for comparison, the projected inflation rate from the DBA curve has been obtained using the standard DBA function GetInflationValue(). The projected inflation rates have been obtained by using Eq. (16). The results show a practically perfect match of our independent implementation with results obtained from the DBA inflation curve. This test indicates the correctness of implementation of the inflation curve within the DBA framework.

| Maturity | $t_i$ | $D(t_i)$ | $f_i$ | $C_i$ | $K_i(t_1)$ |
| --- | --- | --- | --- | --- | --- |
| 1M | 0.0849 | 1.000758 | -0.009329 | 27.162064 | 0.004747 |
| 2M | 0.1667 | 0.996472 | 0.009367 | 54.493856 | 0.009224 |
| 3M | 0.2464 | 0.995287 | 0.058682 | 12.898074 | 0.003147 |
| 4M | 0.3313 | 0.990231 | 0.020048 | -9.724159 | 0.005083 |
| 5M | 0.4134 | 0.987497 | 0.045618 | -1.211894 | 0.002705 |
| 6M | 0.4963 | 0.987463 | 0.017521 | 4.097271 | 0.002034 |
| 7M | 0.5804 | 0.988958 | -0.006939 | 15.293863 | -0.001136 |
| 8M | 0.6653 | 0.985102 | 0.013429 | -11.766545 | 0.006681 |
| 9M | 0.7502 | 0.981643 | 0.041523 | 4.672111 | 0.000516 |
| 10M | 0.8323 | 0.982094 | 0.030149 | 4.714423 | 0.001578 |
| 11M | 0.9172 | 0.978953 | 0.018886 | 2.218403 | 0.001574 |
| 1Y | 0.9993 | 0.975776 | 0.023532 | 18.723874 | 0.003326 |
| 13M | 1.0842 | 0.980215 | -0.008919 | 43.409220 | -0.004026 |
| 14M | 1.1691 | 0.979253 | 0.018272 | -36.423126 | 0.007128 |
| 15M | 1.2457 | 0.97008 | 0.062239 | 16.585015 | 0.003266 |
| 16M | 1.3306 | 0.964361 | 0.055447 | -13.313701 | 0.005813 |
| 17M | 1.4127 | 0.961611 | 0.051030 | 2.204227 | 0.002852 |
| 18M | 1.4976 | 0.960689 | 0.023226 | 2.122439 | 0.000960 |
| 19M | 1.5797 | 0.958255 | 0.054445 | 12.667060 | 0.000174 |
| 20M | 1.6645 | 0.957407 | 0.019761 | 9.440849 | 0.003596 |
| 21M | 1.7493 | 0.957954 | 0.042726 | -5.453055 | 0.003562 |
| 22M | 1.8316 | 0.95398 | 0.026622 | 11.444187 | 0.000648 |
| 23M | 1.9165 | 0.950598 | 0.022204 | 4.409354 | 0.002610 |
| 2Y | 1.9986 | 0.947742 | 0.033643 | 0.275287 | 0.002797 |
| 3Y | 3.0007 | 0.918455 | 0.033649 | 0.006419 | 0.031380 |
| 4Y | 4.0000 | 0.886227 | 0.031619 | 0.000620 | 0.031891 |
| 5Y | 4.9993 | 0.861158 | 0.032213 | -0.001137 | 0.032491 |
| 6Y | 5.9986 | 0.833786 | 0.032435 | 0.001921 | 0.032334 |
| 7Y | 7.0007 | 0.806601 | 0.032718 | -0.000194 | 0.033148 |
| 8Y | 8.0000 | 0.779629 | 0.033378 | 0.000346 | 0.033651 |
| 9Y | 8.9993 | 0.752481 | 0.034088 | -0.000103 | 0.034474 |
| 10Y | 9.9986 | 0.727399 | 0.034875 | 0.000355 | 0.035229 |
| 12Y | 12.0000 | 0.67583 | 0.035746 | -0.000175 | 0.07363 |
| 15Y | 15.0007 | 0.601843 | 0.037261 | 0.000349 | 0.112842 |
| 20Y | 20.0000 | 0.495529 | 0.038739 | 0.000131 | 0.194372 |
| 25Y | 24.9993 | 0.411893 | 0.037937 | 0.000154 | 0.184844 |
| 30Y | 29.9986 | 0.342021 | 0.037081 | -0.000096 | 0.185819 |
| 40Y | 40.0000 | 0.24104 | 0.036440 | 0.000030 | 0.346808 |
| 50Y | 49.9986 | 0.169137 | 0.035308 | -0.000022 | 0.354251 |
| 60Y | 60.0000 | 0.119827 | 0.034934 | 0.000030 | 0.343627 |
| 70Y | 69.9986 | 0.084218 | 0.034905 | 0.000000 | 0.353478 |

Table 27: The results of bootstrapping procedure for HYBRID_FORWARD method. These are provided as an input to the DBA inflation curve through the CPIFigures table.

##### 4.1.9.1 Build Methods

Denote the discount factor for an intermediate date (date not falling on the knot points of the curve) as $D(t)$. Assuming that $t \in [t_{i-1}, t_i]$ we define:

$$D(t) = D(t_{i-1}) \exp \left( -\int_{t_{i-1}}^{t} ds f_s(s) \right) = D(t_{i-1}) \exp(-F_i(t)),$$

where $D(t_{i-1})$ is the value of discount factor at node $t_{i-1}$, and $f_s(s)$ is the instantaneous forward in the interval $t \in [t_{i-1}, t_i]$. $F_i(t)$ is the integral of the instantaneous forward between $t_{i-1}$ and $t$.

We introduce the constant forward between the knot points $\{t_i\}$ as follows:

$$f_i = \frac{1}{(t_i - t_{i-1})} \ln \left[ \frac{D(t_{i-1})}{D(t_i)} \right].$$

##### 4.1.9.1.1 CONSTANT_FORWARD

For the constant forward method the instantaneous forwards are assumed constant over the interval $t \in [t_{i-1}, t_i]$. This leads to the following expressions:

$$f_i(t) = f_{i-1},$$

$$F_i(t) = f_{i-1} \cdot (t - t_{i-1}).$$

##### 4.1.9.1.2 HYBRID_FORWARD

For the hybrid forward method the instantaneous forwards are assumed to be piecewise quadratic. In this method one begins by firstly re-defining forwards on knot points as follows:

$$f_i = f_{i-1} \left( \frac{t_i - t_{i-1}}{t_{i+1} - t_{i-1}} \right) + f_{i+} \left( \frac{t_{i+1} - t_i}{t_{i+1} - t_{i-1}} \right),$$

In words, the knot points of the constant forward rate intervals are interpolated from a straight line joining the centres of both adjoining step regions. Following this, one assumes a piecewise quadratic behaviour for the instantaneous forward:

$$f_i(t) = f_{i-1} + \frac{f_i - f_{i-1}}{t_i - t_{i-1}} (t - t_{i-1}) + c_i \cdot (t - t_{i-1})(t - t_i),$$

$$F_i(t) = f_{i-1} \cdot (t - t_{i-1}) + \frac{1}{2} \left[ \frac{f_i - f_{i-1}}{t_i - t_{i-1}} (t - t_{i-1}) - c_i \cdot (t_i - t_{i-1}) \right] (t - t_{i-1})^2 + \frac{c_i}{3} (t - t_{i-1})^3.$$

The coefficients $c_i$ are determined by matching the discount factors produced by the hybrid-forward interpolation scheme with those obtained from the input instruments directly. The results of bootstrapping for the UKRPI curve are shown in Table 27.

![Table 27: The results of bootstrapping procedure for HYBRID_FORWARD method. These are provided as an input to the DBA inflation curve through the CPIFigures table.](./Fig/9.png)

The below table gives the bucketwise delta for 30y swap

![The below table gives the bucketwise delta for 30y swap](./Fig/10.png)

#### 4.1.10 Inflation Rates with Bilateral Clearing - Mars Request ID: 2021Feb25-LIMZHOU-16823

We test here the new feature of the inflation curve, introduced by DBA and submitted for approval in the Mars request 2021Feb25-LIMZHOU-16823. The new property is the table 'Clearing Spreads', triggered by the body property 'UseInflationClearingSpreads'. Inflation payer swaps and other CPI index related products may be dealt via bilateral clearing rather than LCH clearing. Thus, to price such products, the inflation curve needs to be able to provide bilateral rates. DBA is using a 'ClearingSpreads' subtable to get the bilateral rates from base LCH rates in inflation curve object. This validation report checks that the 'ClearingSpreads' subtable provides this facility. That is, it checks whether the difference in zero rate of inflation payer swap when cleared by LCH and zero rate of the inflation payer swap when cleared bilaterally matches the spreads given in the 'ClearingSpreads' subtable.

The inflation curve has the body property 'BaseClearingHouse' which has the name of the base clearing house. That is, the 'ZeroRate' column of 'Swaps' subtable gives the Zero Rates corresponding to the base clearing house. The other clearinghouse is given in the 'ClearingHouse' column of the 'ClearingSpreads' subtable. Base clearing house is usually 'LCH' and the other clearing house is usually 'BILATERAL' but both clearing houses can take other values too.

##### 4.1.10.1 ZeroRate Test

In the first test, the spread is given by flat .0002. ZeroRate for both the base('LCH') and other('BILATERAL') clearinghouse is computed with spread given as a flat .0002. The following table gives the values. As can be seen from the last column 'Diff', the difference given in spreads matches almost exactly with difference between computed ZeroRates.

| | Date | ClearingSpread | SwapRate_LCH | SwapRate_BILATERAL | SwapRateDiff | Diff |
| --- | --- | --- | --- | --- | --- | --- |
| 0 | 20201023 | 0.0002 | 0.010225 | 0.011425 | 0.0002 | -2.203641e-17 |
| 1 | 20210123 | 0.0002 | 0.010325 | 0.010525 | 0.0002 | 2.000682e-16 |
| 2 | 20210323 | 0.0002 | 0.012225 | 0.012425 | 0.0002 | -2.440810e-16 |
| 3 | 20210423 | 0.0002 | 0.015113 | 0.015313 | 0.0002 | -2.203641e-17 |
| 4 | 20210523 | 0.0002 | 0.015875 | 0.016075 | 0.0002 | -2.440810e-16 |
| 5 | 20210623 | 0.0002 | 0.023025 | 0.023225 | 0.0002 | -2.203641e-17 |
| 6 | 20210723 | 0.0002 | 0.027525 | 0.027725 | 0.0002 | -4.661256e-16 |
| 7 | 20210823 | 0.0002 | 0.028225 | 0.028425 | 0.0002 | -2.203641e-17 |
| 8 | 20210923 | 0.0002 | 0.024088 | 0.024288 | 0.0002 | -2.440810e-16 |
| 9 | 20211023 | 0.0002 | 0.032352 | 0.032552 | 0.0002 | -2.203641e-17 |
| 10 | 20221023 | 0.0002 | 0.032802 | 0.033002 | 0.0002 | -2.203641e-17 |
| 11 | 20231023 | 0.0002 | 0.033679 | 0.033879 | 0.0002 | -2.203641e-17 |
| 12 | 20241023 | 0.0002 | 0.034382 | 0.034582 | 0.0002 | -2.203641e-17 |
| 13 | 20251023 | 0.0002 | 0.034914 | 0.035114 | 0.0002 | -2.203641e-17 |
| 14 | 20261023 | 0.0002 | 0.035195 | 0.035395 | 0.0002 | -2.203641e-17 |



| 15 | 20271023 | 0.0002 | 0.035376 | 0.035576 | 0.0002 | -2.203641e-17 |
| 16 | 20281023 | 0.0002 | 0.035528 | 0.035728 | 0.0002 | -2.203641e-17 |
| 17 | 20291023 | 0.0002 | 0.035666 | 0.035866 | 0.0002 | -2.203641e-17 |
| 18 | 20301023 | 0.0002 | 0.035489 | 0.035689 | 0.0002 | -2.203641e-17 |
| 19 | 20321023 | 0.0002 | 0.035161 | 0.035361 | 0.0002 | -2.203641e-17 |
| 20 | 20351023 | 0.0002 | 0.034718 | 0.034918 | 0.0002 | -2.203641e-17 |
| 21 | 20401023 | 0.0002 | 0.033817 | 0.034017 | 0.0002 | -2.203641e-17 |
| 22 | 20451023 | 0.0002 | 0.032485 | 0.032685 | 0.0002 | -2.203641e-17 |
| 23 | 20501023 | 0.0002 | 0.031295 | 0.031495 | 0.0002 | -2.203641e-17 |
| 24 | 20551023 | 0.0002 | 0.030410 | 0.030610 | 0.0002 | -2.203641e-17 |
| 25 | 20601023 | 0.0002 | 0.029920 | 0.030120 | 0.0002 | -2.203641e-17 |
| 26 | 20651023 | 0.0002 | 0.029689 | 0.029889 | 0.0002 | -2.203641e-17 |
| 27 | 20701023 | 0.0002 | 0.029695 | 0.029895 | 0.0002 | -2.203641e-17 |
| 28 | 20801023 | 0.0002 | 0.029435 | 0.029635 | 0.0002 | -2.203641e-17 |
| 29 | 20901023 | 0.0002 | 0.029445 | 0.029645 | 0.0002 | -2.203641e-17 |

Table 28: The table gives the value of different swaprates and the clearing spread with relevant differences in the case of Flat clearing spreads.

The plots [53] and [54] show that the difference between clearingspread and calculated difference between Swaprate under clearinghouses LCH and BILATERAL is insignificant. The first figure plots both swap rates(computed). The second figure shows the difference between clearing house spreads calculated difference between swap rates is very close to zero: the difference plot is reported on a scale by 10$^{-6}$, which shows that the difference is very close to zero.

![Figure 53: SwapRates with respect tomaturities for both clearing houses](./Fig/53.png)

![Figure 54: Difference between clearinghouse spread and computed difference between swap rates](./Fig/54.png)

The below table gives the bucketwise delta for 30y swap

| | Maturity | Value |
| --- | --- | --- |
| 0 | 2M | 0.000000e+00 |
| 1 | 3M | 0.000000e+00 |
| 2 | 4M | 0.000000e+00 |
| 3 | 5M | 0.000000e+00 |
| 4 | 6M | 0.000000e+00 |
| 5 | 7M | 0.000000e+00 |
| 6 | 8M | 0.000000e+00 |
| 7 | 9M | 0.000000e+00 |
| 8 | 10M | 0.000000e+00 |
| 9 | 11M | 0.000000e+00 |
| 10 | 1Y | 0.000000e+00 |
| 11 | 2Y | -2.842171e-14 |
| 12 | 3Y | 0.000000e+00 |
| 13 | 4Y | 5.684342e-14 |
| 14 | 5Y | 0.000000e+00 |
| 15 | 6Y | 0.000000e+00 |
| 16 | 7Y | 0.000000e+00 |
| 17 | 8Y | -2.842171e-14 |
| 18 | 9Y | 0.000000e+00 |
| 19 | 10Y | 0.000000e+00 |
| 20 | 12Y | 0.000000e+00 |
| 21 | 15Y | 0.000000e+00 |
| 22 | 20Y | 0.000000e+00 |
| 23 | 25Y | 0.000000e+00 |
| 24 | 30Y | -2.559149e-01 |
| 25 | 35Y | 0.000000e+00 |
| 26 | 40Y | 0.000000e+00 |
| 27 | 45Y | 0.000000e+00 |

ZeroRate test with increasing spreads

Next, we do the first test i.e - comparison between Swap/ZeroRate when the spreads are linearly increasing from .0001 to .0004. The results are tabulated below. As can be seen from the last column 'Diff', the difference given in spreads matches almost exactly with difference between computed ZeroRates.

| | Date | ClearingSpread | SwapRate_LCH | SwapRate_BILATERAL | SwapRateDiff | Diff |
| --- | --- | --- | --- | --- | --- | --- |
| 0 | 20201223 | 0.00010 | 0.010225 | 0.011725 | 0.00010 | 2.110264e-17 |
| 1 | 20210123 | 0.00011 | 0.010325 | 0.010435 | 0.00011 | 2.785393e-18 |
| 2 | 20210323 | 0.00013 | 0.012225 | 0.012355 | 0.00013 | -2.585822e-16 |
| 3 | 20210423 | 0.00014 | 0.015113 | 0.015253 | 0.00014 | 2.900241e-17 |
| 4 | 20210523 | 0.00015 | 0.015875 | 0.016025 | 0.00015 | 9.448975e-17 |
| 5 | 20210623 | 0.00016 | 0.023025 | 0.023185 | 0.00016 | -6.201636e-17 |
| 6 | 20210723 | 0.00017 | 0.027525 | 0.027695 | 0.00017 | 3.469447e-18 |
| 7 | 20210823 | 0.00018 | 0.028225 | 0.028405 | 0.00018 | 6.900947e-17 |
| 8 | 20210923 | 0.00019 | 0.024088 | 0.024278 | 0.00019 | -3.095636e-16 |
| 9 | 20211023 | 0.00020 | 0.032352 | 0.032552 | 0.00020 | -2.200930e-17 |
| 10 | 20221023 | 0.00021 | 0.032802 | 0.033012 | 0.00021 | 4.347651e-17 |
| 11 | 20231023 | 0.00022 | 0.033679 | 0.033899 | 0.00022 | -1.130281e-16 |
| 12 | 20241023 | 0.00023 | 0.034382 | 0.034612 | 0.00023 | -4.754227e-17 |
| 13 | 20251023 | 0.00024 | 0.034914 | 0.035154 | 0.00024 | 1.799772e-17 |
| 14 | 20261023 | 0.00025 | 0.035195 | 0.035445 | 0.00025 | 8.348357e-17 |
| 15 | 20271023 | 0.00026 | 0.035376 | 0.035636 | 0.00026 | -7.302102e-17 |
| 16 | 20281023 | 0.00027 | 0.035528 | 0.035798 | 0.00027 | -7.535205e-18 |
| 17 | 20291023 | 0.00028 | 0.035666 | 0.035946 | 0.00028 | 5.800482e-17 |
| 18 | 20301023 | 0.00029 | 0.035489 | 0.035779 | 0.00029 | -9.855396e-17 |
| 19 | 20321023 | 0.00030 | 0.035161 | 0.035461 | 0.00030 | -3.301396e-17 |
| 20 | 20351023 | 0.00031 | 0.034718 | 0.035028 | 0.00031 | 3.247186e-17 |
| 21 | 20401023 | 0.00032 | 0.033817 | 0.034137 | 0.00032 | 9.801188e-17 |
| 22 | 20451023 | 0.00033 | 0.032485 | 0.032815 | 0.00033 | -5.854692e-17 |
| 23 | 20501023 | 0.00034 | 0.031295 | 0.031635 | 0.00034 | 6.593104e-18 |
| 24 | 20551023 | 0.00035 | 0.030410 | 0.030760 | 0.00035 | 7.247892e-17 |
| 25 | 20601023 | 0.00036 | 0.029920 | 0.030280 | 0.00036 | -8.402567e-17 |
| 26 | 20651023 | 0.00037 | 0.029689 | 0.030059 | 0.00037 | 1.848565e-17 |
| 27 | 20701023 | 0.00038 | 0.029695 | 0.030075 | 0.00038 | 4.700016e-17 |
| 28 | 20801023 | 0.00039 | 0.029435 | 0.029825 | 0.00039 | 1.124860e-16 |
| 29 | 20901023 | 0.00040 | 0.029445 | 0.029845 | 0.00040 | -4.401861e-17 |

Table 31: The table gives the value of different swaprates and the clearing spread with relevant differences in the case of increasing clearing spreads.

The plots [55] and [56] show that the difference between clearingspread and calculated difference between Swaprate under clearinghouses LCH and BILATERAL is insignificant. The first figure plots both swap rates(computed). The second figure shows the difference between clearing house spreads calculated difference between swap rates is very close to zero: the difference plot is reported on a scale by 10$^{-6}$, which shows that the difference is very close to zero.

![Figure 55: SwapRates with respect tomaturities for both clearinghouses](./Fig/55.png)

![Figure 56: Difference between clearinghouse spread and computed difference between swap rates](./Fig/56.png)

ZeroRate test with base clearing house switched

Finally, we switch the base and other clearing house in the Inflation curve. That is, make 'BILATERAL' the base clearinghouse and 'LCH' the other clearing house whose values are given using clearinghouse spreads. We do the comparison between swap/zerorates again and tabulate the results below. As can be seen from the last column 'Diff', the difference given in spreads matches almost exactly with difference between computed ZeroRates.

| | Date | ClearingSpread | SwapRate_BILATERAL | SwapRate_LCH | SwapRateDiff | Diff |
| --- | --- | --- | --- | --- | --- | --- |
| 0 | 20201223 | 0.0002 | 0.011625 | 0.011825 | 0.0002 | -2.203641e-17 |
| 1 | 20210123 | 0.0002 | 0.010325 | 0.010525 | 0.0002 | 2.000682e-16 |
| 2 | 20210323 | 0.0002 | 0.012225 | 0.012425 | 0.0002 | -2.440810e-16 |
| 3 | 20210423 | 0.0002 | 0.015113 | 0.015313 | 0.0002 | -2.203641e-17 |
| 4 | 20210523 | 0.0002 | 0.015875 | 0.016075 | 0.0002 | -2.440810e-16 |
| 5 | 20210623 | 0.0002 | 0.023025 | 0.023225 | 0.0002 | -2.203641e-17 |
| 6 | 20210723 | 0.0002 | 0.027525 | 0.027725 | 0.0002 | -4.661256e-16 |
| 7 | 20210823 | 0.0002 | 0.028225 | 0.028425 | 0.0002 | -2.203641e-17 |
| 8 | 20210923 | 0.0002 | 0.024088 | 0.024288 | 0.0002 | -2.440810e-16 |
| 9 | 20211023 | 0.0002 | 0.032352 | 0.032552 | 0.0002 | -2.203641e-17 |
| 10 | 20221023 | 0.0002 | 0.032802 | 0.033002 | 0.0002 | -2.203641e-17 |
| 11 | 20231023 | 0.0002 | 0.033679 | 0.033879 | 0.0002 | -2.203641e-17 |
| 12 | 20241023 | 0.0002 | 0.034382 | 0.034582 | 0.0002 | -2.203641e-17 |
| 13 | 20251023 | 0.0002 | 0.034914 | 0.035114 | 0.0002 | -2.203641e-17 |
| 14 | 20261023 | 0.0002 | 0.035195 | 0.035395 | 0.0002 | -2.203641e-17 |
| 15 | 20271023 | 0.0002 | 0.035376 | 0.035576 | 0.0002 | -2.203641e-17 |
| 16 | 20281023 | 0.0002 | 0.035528 | 0.035728 | 0.0002 | -2.203641e-17 |
| 17 | 20291023 | 0.0002 | 0.035666 | 0.035866 | 0.0002 | -2.203641e-17 |
| 18 | 20301023 | 0.0002 | 0.035489 | 0.035689 | 0.0002 | -2.203641e-17 |
| 19 | 20321023 | 0.0002 | 0.035161 | 0.035361 | 0.0002 | -2.203641e-17 |
| 20 | 20351023 | 0.0002 | 0.034718 | 0.034918 | 0.0002 | -2.203641e-17 |
| 21 | 20401023 | 0.0002 | 0.033817 | 0.034017 | 0.0002 | -2.203641e-17 |
| 22 | 20451023 | 0.0002 | 0.032485 | 0.032685 | 0.0002 | -2.203641e-17 |
| 23 | 20501023 | 0.0002 | 0.031295 | 0.031495 | 0.0002 | -2.203641e-17 |
| 24 | 20551023 | 0.0002 | 0.030410 | 0.030610 | 0.0002 | -2.203641e-17 |
| 25 | 20601023 | 0.0002 | 0.029920 | 0.030120 | 0.0002 | -2.203641e-17 |
| 26 | 20651023 | 0.0002 | 0.029689 | 0.029889 | 0.0002 | -2.203641e-17 |
| 27 | 20701023 | 0.0002 | 0.029695 | 0.029895 | 0.0002 | -2.203641e-17 |
| 28 | 20801023 | 0.0002 | 0.029435 | 0.029635 | 0.0002 | -2.203641e-17 |
| 29 | 20901023 | 0.0002 | 0.029445 | 0.029645 | 0.0002 | -2.203641e-17 |

Table 32: The table gives the value of different swaprates and the clearing spread with relevant differences in the case of switched clearing house.

The plots [57] and [58] show that the difference between clearingspread and calculated difference between Swaprate under clearinghouses LCH and BILATERAL is insignificant. The first figure plots both swap rates(computed). The second figure shows the difference between clearing house spreads calculated difference between swap rates is very close to zero: the difference plot is reported on a scale by 10$^{-6}$, which shows that the difference is very close to zero.

![Figure 57: SwapRates with respect tomaturities for both clearinghouses.](./Fig/18.png)

![Figure 58: Difference between clearinghouse spread and computed difference between swap rates.](./Fig/19.png)

#### 4.1.11 Inflation Rates with Bilateral Clearing - Mars Request ID: 2022Aug04-LIMZHOU-18923

In this section, we test the implementation of the model change requested in MARS request with MARS ID 2022Aug04-LIMZHOU-18923. The request is for the approval of the setting UseInflationClearingSpreads = YES and InflationInterpolation = 'DIR' in inflation curves of UseType = 'INFLATION'), such as USCPI curves. Specifically, the setting allows to specify bilateral inflation rates by their clearing spreads to LCH inflation rates for inflation curves with a linear interpolation. The bilateral rates are obtained from the LCH base rate by specifying clearing spreads in the subtable 'ClearingSpreads' of the inflation curve. That is, the subtable provides the clearing spreads to the LCH base inflation curve for bilateral clearing. The request thus facilitates that inflation swaps and other CPI index related products may be dealt via bilateral clearing, rather than LCH clearing.

For the testing of bilateral inflation rates with flat interpolation, i.e. with InflationInterpolation = 'FLAT', such as in the case of UKRPI curves, we refer to Section 4.1.10.

In the following, we consider an inflation curve object with valuation date = 2022-04-22, settlement date = 2022-04-26, and Currency = 'USCPI'. We have the base clearing house specified as BaseClearingHouse='LCH'. That is, the subtable Swaps in the inflation curve object contains the zero rates corresponding to the LCH clearing house, and the subtable ClearingSpreads in the inflation curve contains the bilateral clearing spreads to the LCH base clearing house. Moreover, we consider ShortEndInflationInterpolation = 'YOY', which means that for short maturities <1y, the inflation rate is defined as the par rate of a YOY swap with that maturity. For longer maturities ≥ 1y, it is defined as the par rate of a ZC swap with that maturity.

##### 4.1.11.1 Comparison of Inflation Swap Rates

In this section, we test whether the difference in swap rates of inflation swaps with bilateral clearing and of inflation swaps cleared by the LCH matches the spreads given in the ClearingSpreads subtable for flat and linearly decreasing clearing spreads. To this end, we extract (via the dba function GetInflationValue) the bilateral CPI figures for a range of maturities and manually compute the bilateral inflation rates from these CPI figures. We then compare these bilateral inflation rates against the inflation rates in the Swaps subtable (LCH rates) of the inflation curve. The objective is to check whether their difference exactly matches the spreads in the ClearingSpreads subtable of the inflation curve object. That is, we expect to see that for maturities < 1y, it holds YOY[BILATERAL] - YOY[LCH] = ClearingSpread, and that for maturities ≥ 1y, we have ZC[BILATERAL] - ZC[LCH] = ClearingSpread, where 'YOY' and ZC denote the par swap rates of YOY and ZC swaps, respectively.

##### Flat Clearing Spreads

In the first test, we set the clearing spreads to -0.001 flat and compute the bilateral inflation rates manually in order to compare them against the LCH inflation rates in the Swaps subtable of the inflation curve.
The obtained results are depicted in Table 33. In particular, the last column 'ClearingSpread - Swap Rate Diffs.'
shows that the clearing spreads (with LCH as base clearing house) and the difference between the bilateral and
LCH zero rates match. Note that clearing spreads are not applied to 2m maturity (i.e. the maturity date 2022-06-01)
as the CPI fixing for that maturity has already been published.

| Instrument | Maturity | ClearingSpread | Swap Rate (Bilateral) | Swap Rate (LCH) | Swap Rate Diffs. | ClearingSpread - Swap Rate Diffs. |
| --- | --- | --- | --- | --- | --- | --- |
| YOY | 2022-06-01 | -0.001 | 0.085425 | 0.085425 | 0.000 | -1.000000e-03 |
| YOY | 2022-07-01 | -0.001 | 0.080654 | 0.081654 | -0.001 | -5.542442e-18 |
| YOY | 2022-08-01 | -0.001 | 0.077846 | 0.078846 | -0.001 | -5.542442e-18 |
| YOY | 2022-09-01 | -0.001 | 0.074540 | 0.075540 | -0.001 | -1.101543e-18 |
| YOY | 2022-10-01 | -0.001 | 0.073604 | 0.074604 | -0.001 | 3.339043e-18 |
| YOY | 2022-11-01 | -0.001 | 0.075226 | 0.076226 | -0.001 | -3.321995e-18 |
| YOY | 2022-12-01 | -0.001 | 0.075738 | 0.076738 | -0.001 | 1.118897e-18 |
| YOY | 2023-01-01 | -0.001 | 0.068493 | 0.069493 | -0.001 | 1.118897e-18 |
| YOY | 2023-02-01 | -0.001 | 0.064019 | 0.065019 | -0.001 | -3.321995e-18 |
| YOY | 2023-03-01 | -0.001 | 0.062586 | 0.063586 | -0.001 | -1.101543e-18 |
| ZC | 2023-04-26 | -0.001 | 0.054288 | 0.055287 | -0.001 | -3.321995e-18 |
| ZC | 2024-04-26 | -0.001 | 0.044912 | 0.045912 | -0.001 | -3.321995e-18 |
| ZC | 2025-04-26 | -0.001 | 0.040100 | 0.041100 | -0.001 | -1.101543e-18 |
| ZC | 2026-04-26 | -0.001 | 0.037250 | 0.038250 | -0.001 | -1.101543e-18 |
| ZC | 2027-04-26 | -0.001 | 0.035437 | 0.036437 | -0.001 | 1.118897e-18 |
| ZC | 2028-04-26 | -0.001 | 0.034067 | 0.035067 | -0.001 | 1.118897e-18 |
| ZC | 2029-04-26 | -0.001 | 0.033062 | 0.034062 | -0.001 | 1.118897e-18 |
| ZC | 2030-04-26 | -0.001 | 0.032350 | 0.033350 | -0.001 | -1.101543e-18 |
| ZC | 2031-04-26 | -0.001 | 0.031700 | 0.032700 | -0.001 | 1.118897e-18 |
| ZC | 2032-04-26 | -0.001 | 0.031275 | 0.032275 | -0.001 | 1.118897e-18 |
| ZC | 2034-04-26 | -0.001 | 0.030537 | 0.031537 | -0.001 | 1.118897e-18 |
| ZC | 2037-04-26 | -0.001 | 0.029538 | 0.030538 | -0.001 | 1.101543e-18 |
| ZC | 2042-04-26 | -0.001 | 0.028287 | 0.029287 | -0.001 | 1.118897e-18 |
| ZC | 2047-04-26 | -0.001 | 0.027637 | 0.028638 | -0.001 | 1.118897e-18 |
| ZC | 2052-04-26 | -0.001 | 0.027536 | 0.028536 | -0.001 | 1.118897e-18 |

Table 33: Comparison between manually computed bilateral inflation rates and the LCH inflation rates for flat clearing spreads. The difference between both rates matches the clearing spreads in the subtable ClearingSpreads of the inflation curve object, except for the 2m maturity (i.e. the maturity date 2022-06-01). The reason is that the CPI fixing for the 2m maturity has already been published, such that the clearing spread is not applied to that maturity.

Figures [59] and [60] illustrate that the difference between ClearingSpread and the difference between the swap rates from the different clearing houses is insignificant in the case of flat spreads. Specifically, Figure [59] shows the manually computed bilateral swap rates against the swap rates of the LCH clearing house. Figure [60] provides that the difference between ClearingSpread and the swap rate differences is near to zero. Note that the 2m maturity swap rates have been excluded for plotting.

![Figure 59: Bilateral and LCH swap rates as a function of maturity for flat ClearingSpread.](./Fig/59.png)

![Figure 60: Difference between ClearingSpread and Swap Rate Differences (i.e. Swap Rate (Bilateral) minus Swap Rate (LCH)) as a function of maturity for flat ClearingSpreads (the last column in Table 33). The difference is negligible.](./Fig/60.png)

##### Decreasing Clearing Spreads

In the second test, we set the clearing spreads to be linearly decreasing from -0.001 on and compute the bilateral inflation rates manually in order to compare them against the LCH inflation rates in the Swaps subtable of the inflation curve.
The obtained results are reported in Table 34. In particular, the last column 'Differences' shows that the clearing spreads (with LCH as base clearing house) and the difference between the bilateral and LCH zero rates match. Note that the clearing spreads are not applied to the 2m maturity (i.e. the maturity date 2022-06-01) as the CPI fixing for that maturity has already been published.

| Instrument | Maturity | ClearingSpread | Swap Rate (Bilateral) | Swap Rate (LCH) | Swap Rate Diffs. | ClearingSpread - Swap Rate Diffs. |
| --- | --- | --- | --- | --- | --- | --- |
| YOY | 2022-06-01 | -0.001000 | 0.085425 | 0.085425 | 0.000000 | -1.000000e-03 |
| YOY | 2022-07-01 | -0.001107 | 0.080547 | 0.081654 | -0.001107 | -5.501243e-18 |
| YOY | 2022-08-01 | -0.001214 | 0.077632 | 0.078846 | -0.001214 | -5.492211e-18 |
| YOY | 2022-09-01 | -0.001321 | 0.074219 | 0.075540 | -0.001321 | -9.861164e-17 |
| YOY | 2022-10-01 | -0.001429 | 0.073175 | 0.074604 | -0.001429 | -9.289915e-17 |
| YOY | 2022-11-01 | -0.001536 | 0.074690 | 0.076226 | -0.001536 | -6.336611e-18 |
| YOY | 2022-12-01 | -0.001643 | 0.075095 | 0.076738 | -0.001643 | 1.361752e-18 |
| YOY | 2023-01-01 | -0.001750 | 0.067743 | 0.069493 | -0.001750 | -3.037934e-18 |
| YOY | 2023-02-01 | -0.001857 | 0.063162 | 0.065019 | -0.001857 | -7.782828e-17 |
| YOY | 2023-03-01 | -0.001964 | 0.061622 | 0.063586 | -0.001964 | 1.439189e-18 |
| ZC | 2023-04-26 | -0.002071 | 0.053216 | 0.055287 | -0.002071 | -7.359223e-18 |
| ZC | 2024-04-26 | -0.002179 | 0.043734 | 0.045912 | -0.002179 | -2.875304e-18 |
| ZC | 2025-04-26 | -0.002286 | 0.038814 | 0.041100 | -0.002286 | -2.826273e-18 |
| ZC | 2026-04-26 | -0.002393 | 0.035857 | 0.038250 | -0.002393 | -5.724466e-17 |
| ZC | 2027-04-26 | -0.002500 | 0.033937 | 0.036437 | -0.002500 | -2.763674e-18 |
| ZC | 2028-04-26 | -0.002607 | 0.032460 | 0.035067 | -0.002607 | -4.943962e-17 |
| ZC | 2029-04-26 | -0.002714 | 0.031348 | 0.034062 | -0.002714 | -4.510281e-17 |
| ZC | 2030-04-26 | -0.002821 | 0.030529 | 0.033350 | -0.002821 | -4.119981e-17 |
| ZC | 2031-04-26 | -0.002929 | 0.029771 | 0.032700 | -0.002929 | -3.729663e-17 |
| ZC | 2032-04-26 | -0.003036 | 0.029239 | 0.032275 | -0.003036 | -2.650044e-18 |
| ZC | 2034-04-26 | -0.003143 | 0.028395 | 0.031537 | -0.003143 | 2.905682e-17 |
| ZC | 2037-04-26 | -0.003250 | 0.027288 | 0.030538 | -0.003250 | -2.813436e-17 |
| ZC | 2042-04-26 | -0.003357 | 0.025930 | 0.029287 | -0.003357 | -2.081868e-17 |
| ZC | 2047-04-26 | -0.003464 | 0.025173 | 0.028638 | -0.003464 | 1.691353e-18 |
| ZC | 2052-04-26 | -0.003571 | 0.024966 | 0.028536 | -0.003571 | -1.301043e-17 |

Table 34: Comparison between manually computed bilateral inflation rates and the LCH inflation rates for linearly decreasing clearing spreads. The difference between both rates matches the clearing spreads in the subtable ClearingSpreads of the inflation curve object, except for the 2m maturity (i.e. the maturity date 2022-06-01). The reason is that the CPI fixing for the 2m maturity has already been published, such that the clearing spread is not applied to that maturity.

Figures [61] and [62] illustrate that the difference between ClearingSpread and the difference between the swap rates from the different clearing houses is also insignificant in the case of linearly decreasing spreads. Specifically, Figure [61] shows the manually computed bilateral swap rates against the swap rates of the LCH clearing house. Figure [62] provides that the difference between ClearingSpread and swap rate differences is nearly zero. Note that the 2m maturity swap rates have been excluded for plotting.

![Figure 61: Bilateral and LCH swap rates as a function of maturity for linearly decreasing ClearingSpread.](./Fig/61.png)

![Figure 62: Difference between ClearingSpread and Swap Rate Differences (i.e. Swap Rate (Bilateral) minus Swap Rate (LCH)) as a function of maturity for linearly decreasing ClearingSpreads (the last column in Table 34). The difference is negligible.](./Fig/62.png)

##### 4.1.11.2 PV and Delta of Inflation Swaps

In this section, we set up inflation swaps with ClearingHouse = BILATERAL and price them under the choices PRICE and CLEARINGSPREADDELTA in order to confirm the correct implementation of the bilateral clearing spreads with LPI interpolation. Specifically, we set up YOY payer swaps with 3m, 6m, and 9m maturity, struck at the 3m, 6m, and 9m bilateral swap rates of the inflation curve (i.e. the strikes are the par bilateral inflation rates obtained from the inflation curve with the ClearingSpreads subtable), respectively. Similarly, we set up ZC payer swap with 2y, 5y, and 30y maturity, struck at the 2y, 5y, and 30y bilateral swap rates of the inflation curve, respectively.

Table [35] shows that the considered swaps have zero PV, which confirms that the par bilateral inflation rates are correctly obtained.

| Swap maturity | Strike | PV |
| --- | --- | --- |
| 3m | 1.080654 | 5.684342e-14 |
| 6m | 1.073604 | -5.684342e-14 |
| 9m | 1.068493 | 0.000000e+00 |
| 2y | 1.091842 | -4.137235e-09 |
| 5y | 1.190199 | -3.196845e-09 |
| 30y | 2.259074 | -2.121510e-09 |

Table 35: PV of par bilateral YOY and ZC swaps with maturities 3m, 6m, 9m, 2y, 5y, and 30y for the USCPI curve. The PVs of the swaps are zero, showing that the par bilateral inflation rates are correctly obtained.

Table [36] shows the delta of the considered swaps with respect to clearing spreads for different maturity buckets.

We can clearly observe that the only bucket giving significant delta for the 3m swap is the 3m bucket, that the only bucket giving significant delta for the 6m swap is the 6m bucket, etc.. This is expected if the swaps are set up with strikes obtained from the curve. Note that for the maturities marked with '-' per swap instrument, there is no risk bucket in the result object and hence there is no impact of the swap with respect to this maturity bucket.

| Maturity | Swap_3m | Swap_6m | Swap_9m | Swap_2y | Swap_5y | Swap_30y |
| --- | --- | --- | --- | --- | --- | --- |
| 2m | 0.000000 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 3m | -0.009983 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 2.842171e-14 | 0.000000e+00 |
| 4m | 0.000000 | 0.000000e+00 | -1.421085e-14 | 0.000000e+00 | 2.842171e-14 | 0.000000e+00 |
| 5m | 0.000000 | -1.421085e-14 | -1.421085e-14 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 6m | - | -9.936486e-03 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 7m | - | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 8m | - | 0.000000e+00 | -1.421085e-14 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 9m | - | - | -9.872357e-03 | 0.000000e+00 | 0.000000e+00 | -2.842171e-14 |
| 10m | - | - | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 11m | - | - | 0.000000e+00 | 7.105427e-14 | 4.263256e-14 | 0.000000e+00 |
| 1y | - | - | 0.000000e+00 | 2.842171e-14 | 9.947598e-14 | 0.000000e+00 |
| 2y | - | - | - | -1.976232e-02 | 5.684342e-14 | 0.000000e+00 |
| 3y | - | - | - | 0.000000e+00 | 4.263256e-14 | 0.000000e+00 |
| 4y | - | - | - | - | 0.000000e+00 | 0.000000e+00 |
| 5y | - | - | - | - | -5.005114e-02 | -2.842171e-14 |
| 6y | - | - | - | - | 0.000000e+00 | 0.000000e+00 |
| 7y | - | - | - | - | - | -2.842171e-14 |
| 8y | - | - | - | - | - | 0.000000e+00 |
| 9y | - | - | - | - | - | 4.263256e-14 |
| 10y | - | - | - | - | - | 6.252776e-13 |
| 12y | - | - | - | - | - | 2.415845e-13 |
| 15y | - | - | - | - | - | 1.278937e-13 |
| 20y | - | - | - | - | - | 5.684342e-14 |
| 25y | - | - | - | - | - | 4.121148e-13 |
| 30y | - | - | - | - | - | -3.245732e-01 |
| 35y | - | - | - | - | - | 0.000000e+00 |

### 4.2 Product Testing : InflAssetSwap

Here we consider a InflAssetSwap trade in a SWAP DBA security template. More specifically, it receives semi-annual payments based on INFLATION ratio with USCPI as underlying, whereas it pays quarterly payments with Libor plus a spread. Swap effective date is 15th July 2015, and end date is 15th July 2025.

The Receive leg is denoted by the name "Inflation" in the security object. So we denote the PV of this leg as $PV_{Infl}$ and it is calculated as per the following equation:

$PV_{Infl} = N_{Infl} \cdot \sum_{i=1}^{n} \Delta_i \cdot DF_{funding}(T_{i,p}) \cdot \left( M \cdot \frac{I(T_{i,s})}{I_0} + spread_{Infl} \right)$

The Pay leg is denoted by the name "Float" in the security object. So we denote the PV of Pay leg as $PV_{Float}$ and it is calculated as follows :

$PV_{Float} = N_{Float} \cdot \sum_{j=1}^{m} \Delta_j \cdot DF_{funding}(T_{j,p}) \cdot (L(0; T_{j,s}, T_{j,s} + 3M) + spread_{Float})$

Here $T_{i,p}, T_{i,s}$ denote the PayDate and SetDate of the $i^{th}$ cashflow.

$DF(\cdot)$ denotes the discount factor calculated from Nominal Curve at time $t$.

$I(\cdot)$ denotes the inflation forward value at time t seen at time 0.

$L(\cdot; t, t + 3M)$ represents the USD 3M LIBOR rate at time $t$ seen at time 0.

$N_{Infl}, N_{Float}$ denote the trade notional for inflation and Float legs, respectively.

$M$ denote the Multiplier for Rec leg.

$\Delta_i$ denotes $i^{th}$ time fraction between setdate and paydate.

Price of the trade is computed by adding the PVs of both the legs, i.e.,

$$PV = PV_{Infl} + PV_{Float}$$

Some more trade details are provided below:

* Valuation Date : 29th September, 2023
* Report Currency : USD
* Curve Currency : USD
* Funding Name : eurstr
* Inflation Leg Notional ($N_{Infl}$) : -75,000,000 USD
* Float Leg Notional ($N_{Float}$) : 73,223,970.53 USD
* Inflation Leg Multiplier ($M$) is 0.375% for all coupon but the last one where it is 100%
* $I_0$ : = 237.14365
* $spread_{Infl}$ for Inflation Leg is 0 for all coupon but the last one where it is -97.63 %
* $spread_{Float}$ for Float Leg : 0.31 %
* LIBORFallBackType : ISDA-BBG
* FixingMethod : HYBRID

Now we present the testings for the said deal. All the testings were done in DBA Version 1300. The corresponding model is DBOPT – RateDeterministic_InflationDeterministic.

#### 4.2.1 EOD Testing

#### 4.2.1.1 Cashflow Replication of the Trade

Here we present the cashflow table of the Inflation leg. Manual calculations were performed according to the equation mentioned in 25. These numbers are compared against DBA values. It is seen PV are in close agreement with each other and error between these calculations are negligible. The tests are passed.

Below table shows Inflation leg of the trade. The replication is presented only where PayDate is after the Valuation-Date (i.e., after 2023-09-29).

| SetDate | PayDate | Coupon | Coupon Man. | PVLot | PV Man. | Error |
| --- | --- | --- | --- | --- | --- | --- |
| 20240115 | 20240115 | 0.00486 | 0.00486 | -173092.1597 | -173092.1597 | 0 |
| 20240715 | 20240715 | 0.00493 | 0.00493 | -176718.0914 | -176718.0914 | 0 |
| 20250115 | 20250115 | 0.00497 | 0.00497 | -173506.6906 | -173506.6906 | 0 |
| 20250715 | 20250715 | 0.00505 | 0.00505 | -172200.9231 | -172200.9231 | -3.91E-10 |
| 20250815 | 20250815 | 0.37147 | 0.37147 | 25312545.68 | 25312545.68 | 1.87E-07 |

Table 37: Cashflow replication of the Inflation leg of the InflAssetSwap trade.

#### 4.2.1.2 Stability Testing : USD Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USD curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 63: PV of the InflAssetSwap as a function of USD curve shifts. Effect on PV while shifting the nominal curve is due to the effect of discounting on the Inflation Leg. When Curve is absolutely shifted, discount factor decreases, hence the PV of the Inflation Leg with shift amount. Note that the Notional of the Inflation Leg is negative. Hence the trend reverses from decreasing to increasing.](./Fig/63.png)

#### 4.2.1.2 Stability Testing : USD Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USD curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 63: PV of the InflAssetSwap as a function of USD curve shifts. Effect on PV while shifting the nominal curve is due to the effect of discounting on the Inflation Leg. When Curve is absolutely shifted, discount factor decreases, hence the PV of the Inflation Leg with shift amount. Note that the Notional of the Inflation Leg is negative. Hence the trend reverses from decreasing to increasing.](./Fig/29.png)

![Figure 64: USD FLATDELTA of InflAssetSwap as a function of USD curve shifts.](./Fig/30.png)
![Figure 65: USCPI FLATDELTA of InflAssetSwap as a function of USD curve shifts.](./Fig/31.png)

![Figure 66: USD FLATGAMMA of InflAssetSwap as a function of USD curve shifts.](./Fig/32.png)
![Figure 67: USCPI FLATGAMMA of InflAssetSwap as a function of USD curve shifts.](./Fig/33.png)

#### 4.2.1.3 Stability Testing : USCPI Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USCPI Inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 68: PV of the InflAssetSwap as a function of USCPI inflation curve shifts. With increasing shifts in inflation zero rates, inflation forwards increase, hence coupon in Inflation Leg of the trade. Considering the negative notional of the Inflation Leg, this will lead to decrease in PV as expected.](./Fig/34.png)

![Figure 69: USD FLATDELTA of InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/35.png)
![Figure 70: USCPI FLATDELTA of InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/36.png)

![Figure 71: USD FLATGAMMA of InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/37.png)
![Figure 72: USCPI FLATGAMMA of InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/38.png)

#### 4.2.1.4 Taylor Expansion Consistency Testing

Now we show the Taylor series based approximate PVs for the said trade.

In the following plots, we shift the underlying curves separately and see that the PV computed using DBA pricing is approximated well by manually calculated PV using Taylor series approximation around zero shift for both IR curve and Inflation curve.

![Figure 73: PV computed using DBA vs manually computed PV using Taylor approximation for InflAssetSwap as a function of parallel shift of USD Curve.](./Fig/39.png)
![Figure 74: PV computed using DBA vs manually computed PV using Taylor approximation for InflAssetSwap as a function of parallel shift of USCPI curve.](./Fig/40.png)

Now we simultaneously shift the underlying curves and checked the PV profile and calculated the relative difference of DBA and Manual calculated Taylor Approximated PVs. Overall, The 3D plot surface plot shows PV changes smoothly under underlying curve shifts. The contour plot of relative errors shows the close match between DBA and Taylor approximated numbers with differences only being significant for large moves in risk factors. This is expected and results shows adequacy of Delta and Gamma risks for risk management.

Presented below are plots:

![Figure 75: PV of the InflAssetSwap as a function of simultaneous shifts of USD Curve and USCPI curve.](./Fig/41.png)
![Figure 76: Relative error between DBA and Taylor Approximate PVs of the InflAssetSwap as a function of simultaneous shifts of USD Curve and USCPI curve.](./Fig/42.png)

#### 4.2.2 CCAR Testing

In this section, we test the InflAssetSwap trade as described in 4.2 under the recent CCAR 2023 scenarios and compare them with the Base scenario.

#### 4.2.2.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product under Base and latest 2023 CCAR scenarios.

![Figure 77: Plot of the zero rate of USD Curve under the Base scenario and the CCAR scenarios.](./Fig/43.png)

#### 4.2.2.2 Stability Testing : USD Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USD curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 78: PV of the InflAssetSwap as a function of USD curve shifts.](./Fig/44.png)

![Figure 79: USD FLATDELTA of InflAssetSwap as a function of USD curve shifts.](./Fig/45.png)
![Figure 80: USCPI FLATDELTA of InflAssetSwap as a function of USD curve shifts.](./Fig/46.png)

![Figure 81: USD FLATGAMMA of InflAssetSwap as a function of USD curve shifts.](./Fig/47.png)
![Figure 82: USCPI FLATGAMMA of InflAssetSwap as a function of USD curve shifts.](./Fig/48.png)

#### 4.2.2.3 Stability Testing : USCPI Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USCPI Inflation Curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 83: PV of the InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/49.png)

![Figure 84: USD FLATDELTA of InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/50.png)
![Figure 85: USCPI FLATDELTA of InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/51.png)

![Figure 86: USD FLATGAMMA of InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/52.png)
![Figure 87: USCPI FLATGAMMA of InflAssetSwap as a function of USCPI inflation curve shifts.](./Fig/53.png)

#### 4.2.3 IRRBB Testing

In this section, we test the stability of the InflAssetSwap trade as described in section 4.2 under the IRRBB scenarios and compare them with the Base scenario.

#### 4.2.3.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, the effects of each scenario are as expected by their names, for example, the parallel up is a parallel shift of the base curve.

![Figure 88: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/54.png)
![Figure 89: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the parallel scenarios.](./Fig/55.png)

![Figure 90: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the short scenarios.](./Fig/56.png)
![Figure 91: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the long scenarios.](./Fig/57.png)

![Figure 92: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/58.png)
![Figure 93: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/59.png)

#### 4.2.3.2 Stability Testing : USD Curve Shift

We test the stability of the PV under absolute shifts of the USD Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 94: PV of the InflAssetSwap under USD curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/60.png)
![Figure 95: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the parallel scenarios.](./Fig/61.png)

![Figure 96: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the short scenarios.](./Fig/62.png)
![Figure 97: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the long scenarios.](./Fig/63.png)

![Figure 98: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/64.png)
![Figure 99: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/65.png)

#### 4.2.3.3 Stability Testing : USCPI Curve Shift

We test the stability of the PV under absolute shifts of the USCPI Inflation Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 100: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/66.png)
![Figure 101: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the parallel scenarios.](./Fig/67.png)

![Figure 102: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the short scenarios.](./Fig/68.png)
![Figure 103: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the long scenarios.](./Fig/69.png)

![Figure 104: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/104.png)

![Figure 105: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/105.png)

#### 4.2.4 MultiVariate Testing

In this section, we show the results of the multivariate test for the InflAssetSwap trade as described in Subsection 4.2.

Table [38] lists the underlying risk factors which are used for the testing of the InflAssetSwap deal. In particular, we can observe that the product is sensitive to all its risk factors. The resulting transitions of the PV under the up and down stressed scenario are shown in Figure [105].

| Type | Currency | AssetName | RiskFactor | Sensitivity | MRM Shock Avail. |
| --- | --- | --- | --- | --- | --- |
| IRCURVE | USD | USD | SWAP | YES | YES |
| INFLATIONCURVE | USCPI | USCPI | CLEARINGSPREAD | YES | NO |
| INFLATIONCURVE | USCPI | USCPI | SWAP | YES | YES |
| IRCURVE | EUR | EUR | CDSSPREAD | YES | YES |
| IRCURVE | EUR | EUR | DISCOUNTSPREAD | YES | YES |
| IRCURVE | EUR | EUR | SWAP | YES | YES |

Table 38: Risk factors used for the InflAssetSwap MultiVariate Testing.

![Figure 106: Transition of the PV of the InflAssetSwap in the up and down stressed scenarios.](./Fig/73.png)

### 4.3 Product Testing : InflSwapYOY

Here we consider an InflSwapYOY trade in a MULTISWAP DBA security template. More specifically, it receives annual payments based on INFLATION return with CPIXEMU as underlying, whereas it pays annual payments with Libor plus a spread. Swap effective date is 11th October 2019, and end date is 11th October 2033.

The receive leg coupon is computed by adding a convexity adjustment to the 1 year inflation return. Denote the PV of the Receive leg as $PV_{Rec}$ and calculated as follows:

$PV_{Rec} = N \cdot \sum_{i=1}^{n} \Delta_i \cdot DF_{funding}(T_{i,p}) \cdot \left( \frac{1}{RateBase(T_{i,s} - 1y, T_{i,s})} \left( \frac{I(T_{i,s})}{I(T_{i,s} - 1y)} - 1 \right) + CMT(T_{i,s} - 1y, T_{i,s}) \right)$

FixingMethod for the security is RATESET which means that the rate for the Pay leg (RateIndexType = LIBOR) is taken from the security. The security flag that provides the rate for the Pay leg here is "PreviousCoupon" which is zero. Therefore, coupon is constant (given by spread) and PV of the Pay leg (denoted by $PV_{Pay}$) is obtained as follows:

$PV_{Pay} = N \cdot \sum_{i=1}^{n} \Delta_i \cdot DF_{funding}(T_{i,p}) \cdot spread$

where $T_{i,p}, T_{i,s}$ denote the PayDate and SetDate of the $i^{th}$ cashflow.

$CMT(T_{i,s} - 1y, T_{i,s})$ denotes the convexity adjustment for the inflation return.

$DF(\cdot)$ denotes the discount factor calculated from Nominal Curve at time $t$.

$I(.)$ denotes the inflation forward value at time t seen at time 0.

$N$ denotes the trade notional.

$\Delta_i$ denotes $i^{th}$ time fraction between setdate and paydate.

Price of the trade is computed by subtracting the Pay leg PV from the Rec leg PV, i.e.,

$$PV = PV_{Rec} - PV_{Pay}$$

Some more trade details are provided below:

* Valuation Date : 6th October, 2023
* Report Currency : EUR
* Curve Currency : EUR
* Funding Name : usdois
* Notional ($N$) : 275 EUR
* $spread$ : 1.24 %

Now we present the testings for the said deal. All the testings were done in DBA Version 1300. The corresponding model is DBOPT – RateDeterministic_InflationDeterministic.

#### 4.3.1 EOD Testing

#### 4.3.1.1 Effect of Convexity Adjustment on PV

Here we show the effect of convexity adjustment in the Receive leg coupon given by [28]. In the following tables, we see that there is significant difference in the Price when pricing with vs without CMT object.

| Shift in CPXTEMU curve | PV with CMT | PV without CMT | Error |
| --- | --- | --- | --- |
| -0.0300 | -3.1029e+07 | -3.1150e+07 | 121712.3680 |
| -0.0255 | -2.0471e+07 | -2.0593e+07 | 121712.3680 |
| -0.0210 | -9.9136e+06 | -1.0035e+07 | 121712.3680 |
| -0.0165 | 8.4347e+05 | 6.2175e+05 | 121712.3680 |
| -0.0120 | 1.1201e+07 | 1.1079e+07 | 121712.3680 |
| -0.0075 | 2.1759e+07 | 2.1638e+07 | 121712.3680 |
| -0.0030 | 3.2317e+07 | 3.2195e+07 | 121712.3680 |
| 0.0015 | 4.2872e+07 | 4.2750e+07 | 121712.3680 |
| 0.0060 | 5.3428e+07 | 5.3307e+07 | 121712.3680 |
| 0.0105 | 6.3986e+07 | 6.3864e+07 | 121712.3680 |
| 0.0150 | 7.4543e+07 | 7.4421e+07 | 121712.3680 |
| 0.0195 | 8.5100e+07 | 8.4979e+07 | 121712.3680 |
| 0.0240 | 9.5657e+07 | 9.5536e+07 | 121712.3680 |
| 0.0285 | 1.0621e+08 | 1.0609e+08 | 121712.3680 |

Table 39: Comparing PV of the InflSwapYOY trade when priced with vs without convexity adjustment as the Inflation curve is shifted.

| Shift in EUR curve | PV with CMT | PV without CMT | Error |
| --- | --- | --- | --- |
| -0.0300 | 4.4453e+07 | 4.4303e+07 | 150239.1953 |
| -0.0255 | 4.3408e+07 | 4.3463e+07 | 144462.1773 |
| -0.0210 | 4.2793e+07 | 4.2651e+07 | 140873.4936 |
| -0.0165 | 4.2006e+07 | 4.1870e+07 | 136464.8655 |
| -0.0120 | 4.1248e+07 | 4.1116e+07 | 132227.6992 |
| -0.0075 | 4.0516e+07 | 4.0388e+07 | 128154.9938 |
| -0.0030 | 3.9810e+07 | 3.9685e+07 | 124238.1295 |
| 0.0015 | 3.9128e+07 | 3.9008e+07 | 120473.3779 |
| 0.0060 | 3.8470e+07 | 3.8353e+07 | 116851.1125 |
| 0.0105 | 3.7834e+07 | 3.7720e+07 | 113368.0859 |
| 0.0150 | 3.7220e+07 | 3.7110e+07 | 110012.3507 |
| 0.0195 | 3.6625e+07 | 3.6519e+07 | 106784.2472 |
| 0.0240 | 3.6052e+07 | 3.5949e+07 | 103676.3863 |
| 0.0285 | 3.5497e+07 | 3.5397e+07 | 100683.6318 |

Table 40: Comparing PV of the InflSwapYOY trade when priced with vs without convexity adjustment as the IR curve is shifted.

#### 4.3.1.2 Cashflow Replication of the Trade

Here we present the cashflow table of the receive leg and Pay leg, manual calculations were performed according to the equation mentioned in [28] and [29]. These numbers are compared against DBA values. It is seen PV are in close agreement with each other and error between these calculations are negligible. The tests are passed.

Below table shows Receive leg of the trade. The replication is presented only where PayDate is after the ValuationDate (i.e., after 2023-10-06).

| SetDate | PayDate | Coupon | Coupon Man. | PVLot (10^2) | PV Man. (10^2) | Error (10^2) |
| --- | --- | --- | --- | --- | --- | --- |
| 20231011 | 20231011 | 0.05264 | 0.05264 | 14.46815 | 14.46815 | 0 |
| 20241011 | 20241011 | 0.02550 | 0.02550 | 6.73880 | 6.73880 | 0 |
| 20251013 | 20251013 | 0.02262 | 0.02262 | 5.82199 | 5.82199 | -3.396E-14 |
| 20261012 | 20261012 | 0.02337 | 0.02337 | 5.79127 | 5.79127 | 0 |
| 20271011 | 20271011 | 0.02378 | 0.02378 | 5.72170 | 5.72170 | 1.332E-14 |
| 20281011 | 20281011 | 0.02425 | 0.02425 | 5.67090 | 5.67090 | -1.155E-14 |
| 20291011 | 20291011 | 0.02445 | 0.02445 | 5.53555 | 5.53555 | 0 |
| 20301011 | 20301011 | 0.02477 | 0.02477 | 5.42408 | 5.42408 | 1.243E-14 |
| 20311013 | 20311013 | 0.02533 | 0.02533 | 5.38719 | 5.38719 | -8.882E-15 |
| 20321011 | 20321011 | 0.02569 | 0.02569 | 5.21336 | 5.21336 | 1.954E-14 |
| 20331011 | 20331011 | 0.02532 | 0.02532 | 4.98166 | 4.98166 | -7.994E-15 |

Table 41: Cashflow replication of the Receive leg of the InflSwapYOY trade.

#### 4.3.1.3 Stability Testing : EUR Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapYOY trade as detailed in 4.3 under parallel shifts of the EUR curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 107: PV of the InflSwapYOY as a function of EUR curve shifts. Effect on PV while shifting the nominal curve is due to discounting. When Curve is absolutely shifted, discount factor decreases, hence the PV with shift amount.](./Fig/107.png)

![Figure 109: CPXTEMU FLATDELTA of InflSwapYOY as a function of EUR curve shifts.](./Fig/79.png)

![Figure 110: EUR FLATGAMMA of InflSwapYOY as a function of EUR curve shifts.](./Fig/80.png)
![Figure 111: CPXTEMU FLATGAMMA of InflSwapYOY as a function of EUR curve shifts.](./Fig/81.png)

#### 4.3.1.4 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapYOY trade as detailed in 4.3 under parallel shifts of the CPXTEMU inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 112: PV of the InflSwapYOY as a function of CPXTEMU inflation curve shifts. With increasing shifts in inflation zero rates, inflation forwards increases, hence coupon in Receive leg of the trade. This will lead to increase in PV as expected.](./Fig/82.png)

![Figure 113: EUR FLATDELTA of InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/83.png)
![Figure 114: CPXTEMU FLATDELTA of InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/84.png)

![Figure 115: EUR FLATGAMMA of InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/85.png)
![Figure 116: CPXTEMU FLATGAMMA of InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/86.png)

#### 4.3.1.5 Taylor Expansion Consistency Testing

Now we show the Taylor series based approximate PVs for the said trade.

In the following plots, we shift the underlying curves separately and see that the PV computed using DBA pricing is approximated well by manually calculated PV using Taylor series approximation around zero shift for both IR curve and Inflation curve.

![Figure 117: PV computed using DBA vs manually computed PV using Taylor approximation for InflSwapYOY as a function of parallel shift of EUR Curve.](./Fig/87.png)
![Figure 118: PV computed using DBA vs manually computed PV using Taylor approximation for InflSwapYOY as a function of parallel shift of CPXTEMU curve.](./Fig/88.png)

Now we simultaneously shift the underlying curves and checked the PV profile and calculated the relative difference of DBA and Manual calculated Taylor Approximated PVs. Overall, The 3D plot surface plot shows PV changes smoothly under underlying curve shifts. The contour plot of relative errors shows the close match between DBA and Taylor approximated numbers with differences only being significant for large moves in risk factors. This is expected and results shows adequacy of Delta and Gamma risks for risk management.

Presented below are plots:

![Figure 119: PV of the InflSwapYOY as a function of simultaneous shifts of EUR Curve and CPXTEMU curve.](./Fig/89.png)
![Figure 120: Relative error between DBA and Taylor Approximate PVs of the InflSwapYOY as a function of simultaneous shifts of EUR Curve and CPXTEMU curve.](./Fig/90.png)

#### 4.3.2 CCAR Testing

In this section, we test the InflSwapYOY trade as described in 4.3 under the recent CCAR 2023 scenarios and compare them with the Base scenario.

#### 4.3.2.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product under Base and latest 2023 CCAR scenarios.

![Figure 121: Plot of the zero rate of EUR Curve under the Base scenario and the CCAR scenarios.](./Fig/91.png)

#### 4.3.2.2 Stability Testing : EUR Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapYOY trade as detailed in 4.3 under parallel shifts of the EUR curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 122: PV of the InflSwapYOY as a function of EUR curve shifts.](./Fig/92.png)

![Figure 123: EUR FLATDELTA of InflSwapYOY as a function of EUR curve shifts.](./Fig/93.png)
![Figure 124: CPXTEMU FLATDELTA of InflSwapYOY as a function of EUR curve shifts.](./Fig/94.png)

![Figure 125: EUR FLATGAMMA of InflSwapYOY as a function of EUR curve shifts.](./Fig/95.png)
![Figure 126: CPXTEMU FLATGAMMA of InflSwapYOY as a function of EUR curve shifts.](./Fig/96.png)

#### 4.3.2.3 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapYOY trade as detailed in 4.3 under parallel shifts of the CPXTEMU inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 127: PV of the InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/97.png)

![Figure 128: EUR FLATDELTA of InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/98.png)
![Figure 129: CPXTEMU FLATDELTA of InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/99.png)

![Figure 130: EUR FLATGAMMA of InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/100.png)
![Figure 131: CPXTEMU FLATGAMMA of InflSwapYOY as a function of CPXTEMU inflation curve shifts.](./Fig/101.png)

#### 4.3.3 IRRBB Testing

In this section, we test the stability of the InflSwapYOY trade as described in section 4.3 under the IRRBB scenarios and compare them with the Base scenario.

#### 4.3.3.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, the effects of each scenario are as expected by their names, for example, the parallel up is a parallel shift of the base curve.

![Figure 132: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/102.png)
![Figure 133: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and the parallel scenarios.](./Fig/103.png)

![Figure 134: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and the short scenarios.](./Fig/104.png)
![Figure 135: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and the long scenarios.](./Fig/105.png)

![Figure 136: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/106.png)
![Figure 137: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/107.png)

#### 4.3.3.2 Stability Testing : EUR Curve Shift

We test the stability of the PV under absolute shifts of the EUR Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 138: PV of the InflSwapYOY under EUR curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/108.png)
![Figure 139: PV of the InflSwapYOY under EUR curve shifts for the Base scenario and the parallel scenarios.](./Fig/109.png)

![Figure 140: PV of the InflSwapYOY under EUR curve shifts for the Base scenario and the short scenarios.](./Fig/110.png)
![Figure 141: PV of the InflSwapYOY under EUR curve shifts for the Base scenario and the long scenarios.](./Fig/111.png)

![Figure 142: PV of the InflSwapYOY under EUR curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/112.png)
![Figure 143: PV of the InflSwapYOY under EUR curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/113.png)

#### 4.3.3.3 Stability Testing : CPXTEMU Curve Shift

We test the stability of the PV under absolute shifts of the CPXTEMU Inflation Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 144: PV of the InflSwapYOY under CPXTEMU curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/114.png)
![Figure 145: PV of the InflSwapYOY under CPXTEMU curve shifts for the Base scenario and the parallel scenarios.](./Fig/115.png)

![Figure 146: PV of the InflSwapYOY under CPXTEMU curve shifts for the Base scenario and the short scenarios.](./Fig/116.png)
![Figure 147: PV of the InflSwapYOY under CPXTEMU curve shifts for the Base scenario and the long scenarios.](./Fig/117.png)

![Figure 148: PV of the InflSwapYOY under CPXTEMU curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/148.png)

![Figure 149: PV of the InflSwapYOY under CPXTEMU curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/149.png)

#### 4.3.4 MultiVariate Testing

In this section, we show the results of the multivariate test for the InflSwapYOY trade as described in Subsection 4.3.

Table [42] lists the underlying risk factors which are used for the testing of the InflSwapYOY Deal. In particular, we can observe that the product is sensitive to all its risk factors. The resulting transitions of the PV under the up and down stressed scenario are shown in Figure [150].

| Type | Currency | AssetName | RiskFactor | Sensitivity | MRM Shock Avail. |
| --- | --- | --- | --- | --- | --- |
| IRCURVE | EUR | EUR | CCYSPREAD | YES | YES |
| IRCURVE | EUR | EUR | SWAP | YES | YES |
| INFLATIONCURVE | CPXTEMU | CPXTEMU | SWAP | YES | YES |
| IRCURVE | USD | USD | DISCOUNTSPREAD | YES | YES |
| IRCURVE | USD | USD | SWAP | YES | YES |
| INFLATIONCMT | CPXTEMU | CPXTEMU | INFLATIONCMTMAT | YES | NO |

Table 42: Risk factors used for the InflSwapYOY MultiVariate Testing.

![Figure 150: Transition of the PV of the InflSwapYOY in the up and down stressed scenarios.](./Fig/121.png)

### 4.4 Product Testing : InflSwapZC

Here we consider an InflSwapZC trade in a SWAP DBA security template with a single cashflow. More specifically, it receives a single payment at the maturity of the trade based on INFLATION return with CPXTEMU as underlying, and it pays a single fixed payment. Swap effective date is 15th May 2020, and end date is 15th May 2030.

Denote the PV of the Receive leg as $PV_{Rec}$ and calculated as follows:

$PV_{Rec} = N \cdot \Delta \cdot DF_{funding}(T_p) \cdot M \cdot \left(\frac{I(T_s)}{I_0} - 1\right)$

The RateIndexType for the Pay leg is FIXED which means that the rate is effectively 0 which causes a constant value of the coupon = spread = 0.062. Therefore, the PV of the Pay leg (denote as $PV_{Pay}$) writes as follows -

$PV_{Pay} = N \cdot \Delta \cdot DF_{funding}(T_p) \cdot spread$

where $T_p, T_s$ denote the PayDate and SetDate of the single cashflow.

$DF(\cdot)$ denotes the discount factor calculated from Nominal Curve at time $t$.

$I(\cdot)$ denotes the inflation forward value at time t seen at time 0.

$N$ denotes the trade notional.

$M$ denotes the Multiplier.

$\Delta$ denotes the time fraction between setdate and paydate for the single cashflow.

Price of the trade is computed by subtracting the Pay leg PV from the Rec leg PV, i.e.,

$$PV = PV_{Rec} - PV_{Pay}$$

Some more trade details are provided below:

* Valuation Date : 9th October, 2023
* Report Currency : EUR
* Curve Currency : EUR
* Funding Name : euros
* Notional ($N$) : 9,80,000 EUR
* Multiplier ($M$) : 100%
* $I_0$ : = 104.23
* $spread$ : 6.22 %

Now we present the testings for the said deal. All the testings were done in DBA Version 1300. The corresponding model is DBOPT – RateDeterministic_InflationDeterministic.

#### 4.4.1 EOD Testing

#### 4.4.1.1 Cashflow Replication of the Trade

Here we present the cashflow table of the receive leg and Pay leg, manual calculations were performed according to the equation mentioned in [31] and [32]. Those numbers are compared against DBA values. It is seen PV are in close agreement with each other and there is zero error between these calculations. The tests are passed.

Below table shows Receive leg of the trade.

| SetDate | PayDate | Coupon | Coupon Man. | PVLot | PV Man. | Error |
| --- | --- | --- | --- | --- | --- | --- |
| 20300515 | 20300515 | 0.2764995 | 0.2764995 | 301796.0803 | 301796.0803 | 0 |

Table 43: Cashflow replication of the Receive leg of the InflSwapZC trade.

Now we present the Cashflow table of the Pay leg of the deal.

| SetDate | PayDate | Coupon | Coupon Man. | PVLot | PV Man. | Error |
| --- | --- | --- | --- | --- | --- | --- |
| 20300515 | 20300515 | 0.062174 | 0.062174 | 49537.64074 | 49537.64074 | 0 |

Table 44: Cashflow replication of the Pay leg of the InflSwapZC trade.

#### 4.4.1.2 Stability Testing : EUR Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapZC trade as detailed in 4.4 under parallel shifts of the EUR curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 151: PV of the InflSwapZC as a function of EUR curve shifts. Effect on PV while shifting the nominal curve is due to discounting. When Curve is absolutely shifted, discount factor decreases, hence the PV with shift amount.](./Fig/151.png)

![Figure 152: EUR FLATDELTA of InflSwapZC as a function of EUR curve shifts.](./Fig/125.png)
![Figure 153: CPXTEMU FLATDELTA of InflSwapZC as a function of EUR curve shifts.](./Fig/126.png)

![Figure 154: EUR FLATGAMMA of InflSwapZC as a function of EUR curve shifts.](./Fig/127.png)
![Figure 155: CPXTEMU FLATGAMMA of InflSwapZC as a function of EUR curve shifts.](./Fig/128.png)

#### 4.4.1.3 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapZC trade as detailed in 4.4 under parallel shifts of the CPXTEMU inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 156: PV of the InflSwap/ZC as a function of CPXTEMU curve shifts. With increasing shifts in inflation zero rates, inflation forwards increase, hence coupon in Receive leg of the trade. This will lead to increase in PV as expected.](./Fig/129.png)

![Figure 157: EUR FLATDELTA of the InflSwap/ZC as a function of CPXTEMU curve shifts. With increasing shifts in inflation zero rates, the change in delta is smooth as expected.](./Fig/129.png)

![Figure 158: CPXTEMU FLATDELTA of the InflSwap/ZC as a function of CPXTEMU curve shifts. With increasing shifts in inflation zero rates, the change in delta is smooth as expected.](./Fig/129.png)


![Figure 159: EUR FLATGAMMA of InfSwapZC as a function of CPXTEMU inflation curve shifts.](./Fig/159.png)

![Figure 160: CPXTEMU FLATGAMMA of InfSwapZC as a function of CPXTEMU inflation curve shifts.](./Fig/160.png)

#### 4.4.1.4 Taylor Expansion Consistency Testing

Now we show the Taylor series based approximate PVs for the said trade.

In the following plots, we shift the underlying curves separately and see that the PV computed using DBA pricing is approximated well by manually calculated PV using Taylor series approximation around zero shift for both IR curve and Inflation curve.

![Figure 161: PV computed using DBA vs manually computed PV using Taylor approximation for InfSwapZC as a function of parallel shift of EUR Curve.](./Fig/161.png)

![Figure 162: PV computed using DBA vs manually computed PV using Taylor approximation for InfSwapZC as a function of parallel shift of CPXTEMU curve.](./Fig/162.png)

#### EUR Scenario Zero Rates InfiSwapZC

![Figure 165: Plot of the zero rate of EUR Curve under the Base scenario and the CCAR scenarios.](./Fig/1.png)

##### 4.4.2.2 Stability Testing : EUR Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InfiSwapZC trade as detailed in 4.4 under parallel shifts of the EUR curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 166: PV of the InfiSwapZC as a function of EUR curve shifts.](./Fig/2.png)

![Figure 167: EUR FLATDELTA of InfiSwapZC as a function of EUR curve shifts.](./Fig/3.png)
![Figure 168: CPXTEMU FLATDELTA of InfiSwapZC as a function of EUR curve shifts.](./Fig/4.png)

![Figure 169: EUR FLATGAMMA of InfiSwapZC as a function of EUR curve shifts.](./Fig/5.png)
![Figure 170: CPXTEMU FLATGAMMA of InfiSwapZC as a function of EUR curve shifts.](./Fig/6.png)

#### 4.4.2.3 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InfiSwapZC trade as detailed in 4.4 under parallel shifts of the CPXTEMU inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 171: PV of the InfiSwapZC as a function of CPXTEMU inflation curve shifts.](./Fig/7.png)

![Figure 172: EUR FLATDELTA of InfiSwapZC as a function of CPXTEMU inflation curve shifts.](./Fig/8.png)
![Figure 173: CPXTEMU FLATDELTA of InfiSwapZC as a function of CPXTEMU inflation curve shifts.](./Fig/9.png)

![Figure 174: EUR FLATGAMMA of InfiSwapZC as a function of CPXTEMU inflation curve shifts.](./Fig/10.png)
![Figure 175: CPXTEMU FLATGAMMA of InfiSwapZC as a function of CPXTEMU inflation curve shifts.](./Fig/11.png)

#### 4.4.3 IRRBB Testing

In this section, we test the stability of the InfiSwapZC trade as described in section 4.4 under the IRRBB scenarios and compare them with the Base scenario.

#### 4.4.3.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, the effects of each scenario are as expected by their names, for example, the parallel up is a parallel shift of the base curve.

![Figure 176: Plot of the zero rate of the InfiSwapZC under EUR curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/12.png)
![Figure 177: Plot of the zero rate of the InfiSwapZC under EUR curve shifts for the Base scenario and the parallel scenarios.](./Fig/13.png)

![Figure 178: Plot of the zero rate of the InfiSwapZC under EUR curve shifts for the Base scenario and the short scenarios.](./Fig/14.png)
![Figure 179: Plot of the zero rate of the InfiSwapZC under EUR curve shifts for the Base scenario and the long scenarios.](./Fig/15.png)

![Figure 180: Plot of the zero rate of the InfiSwapZC under EUR curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/16.png)
![Figure 181: Plot of the zero rate of the InfiSwapZC under EUR curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/17.png)

#### 4.4.3.2 Stability Testing : EUR Curve Shift

We test the stability of the PV under absolute shifts of the EUR Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 182: PV of the InfiSwapZC under EUR curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/18.png)
![Figure 183: PV of the InfiSwapZC under EUR curve shifts for the Base scenario and the parallel scenarios.](./Fig/19.png)

![Figure 184: PV of the InfiSwapZC under EUR curve shifts for the Base scenario and the short scenarios.](./Fig/20.png)
![Figure 185: PV of the InfiSwapZC under EUR curve shifts for the Base scenario and the long scenarios.](./Fig/21.png)

![Figure 186: PV of the InfiSwapZC under EUR curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/22.png)
![Figure 187: PV of the InfiSwapZC under EUR curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/23.png)

#### 4.4.3.3 Stability Testing : CPXTEMU Curve Shift

We test the stability of the PV under absolute shifts of the CPXTEMU Inflation Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 188: PV of the InfiSwapZC under CPXTEMU curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/24.png)
![Figure 189: PV of the InfiSwapZC under CPXTEMU curve shifts for the Base scenario and the parallel scenarios.](./Fig/25.png)

![Figure 190: PV of the InfiSwapZC under CPXTEMU curve shifts for the Base scenario and the short scenarios.](./Fig/26.png)
![Figure 191: PV of the InfiSwapZC under CPXTEMU curve shifts for the Base scenario and the long scenarios.](./Fig/27.png)

![Figure 192: PV of the InfiSwapZC under CPXTEMU curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/28.png)
![Figure 193: PV of the InfiSwapZC under CPXTEMU curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/29.png)

#### 4.4.4 Multivariate Testing

In this section, we show the results of the multivariate test for the InfiSwapZC trade as described in Subsection 4.4.

Table 45 lists the underlying risk factors which are used for the testing of the InfiSwapZC Deal. In particular, we can observe that the product is sensitive to all its risk factors. The resulting transitions of the PV under the up and down stressed scenario are shown in Figure 194.

| Type | Currency | AssetName | RiskFactor | Sensitivity | MRM Shock Available |
| --- | --- | --- | --- | --- | --- |
| IRCCURVE | EUR | EUR | DISCOUNTSPREAD | YES | YES |
| IRCCURVE | EUR | EUR | SWAP | YES | YES |
| INFLATIONCURVE | CPXTEMU | CPXTEMU | SWAP | YES | YES |

Table 45: Risk factors used for the InfiSwapZC MultiVariate Testing.

![Figure 194: Transition of the PV of the InfiSwapZC in the up and down stressed scenarios.](./Fig/30.png)

### 4.5 Product Testing : IRSwapRealRate

Here we consider a IRSwapRealRate trade in a MULTISWAP DBA security template. More specifically, it receives semi-annual payments based on INFLATION ratio with CPXTEMU as underlying, whereas it pays semi-annual payments with Libor plus a spread. Swap effective date is 15th September 2009, and end date is 15th march 2041.

Denote the PV of the Receive leg as $PV_{Rec}$ and calculated as follows:

$$PV_{Rec} = N \cdot \sum_{i=1}^{n} \Delta_i \cdot DF_{funding}(T_{i,P}) \cdot \left(M \cdot \frac{I(T_{i,P})}{I_0} \right)$$

Similarly PV of the Pay leg (Denote as $PV_{Pay}$) writes as follows:

$$PV_{Pay} = N \cdot \sum_{i=1}^{n} \Delta_i \cdot DF_{funding}(T_{i,P}) \cdot (L(0, T_{i,s}, T_{i,e} + 6M) + spread)$$

Whereas $T_{i,P}$, $T_{i,s}$ denote the PayDate and SetDate of the $i^{th}$ cashflow,

$DF(\cdot)$ denotes the discount factor calculated from Nominal Curve at time $t$,

$I(\cdot)$ denotes the inflation forward value at time $t$ seen at time 0,

$L(0, t, t + 6M)$ represents the EUR 6M LIBOR rate at time $t$ seen at time 0,

$N$, $M$ denotes Trade notional and Multiplier respectively,

$\Delta_i$ denotes $i^{th}$ time fraction between setdate and paydate.

Some more trade details are provided below:

* Valuation Date : 16th February, 2018
* Report Currency : EUR
* Curve Currency : EUR
* Funding Name : eurois
* Notional ($N$) : 10, 000 EUR
* Multiplier ($M$) : 2.55%
* $I_0$ = 92.21
* $spread$ : 1.45 %

Now we present the testings for the said deal. All the testings were done in DBA Version 1300. The correponding model is DBOPT - RateDeterministic_InflationDeterministic.

#### 4.5.1 EOD Testing

#### 4.5.2 Cashflow Replication of the Trade

Here we present the cashflow table of the Receive leg and Pay leg, manual calculations were performed according to the equation mentioned in 34 and 35. Those numbers are compared against DBA values. It is seen PV are in close agreement with each other and error between these calculations are negligible. The tests are passed.

Below table shows Receive leg of the trade.

| SetDate | PayDate | Coupon | Coupon Man. | PVLot | PV Man. | Error |
| --- | --- | --- | --- | --- | --- | --- |
| 20180315 | 20180315 | 0.028242 | 0.028242 | 141.246779 | 141.246779 | 0.0E+00 |
| 20180915 | 20180917 | 0.028499 | 0.028499 | 142.789906 | 142.789906 | 0.0E+00 |
| 20190315 | 20190315 | 0.028999 | 0.028999 | 143.526305 | 143.526305 | 0.0E+00 |
| 20190915 | 20190916 | 0.029089 | 0.028889 | 145.134969 | 145.134969 | 0.0E+00 |
| 20200315 | 20200316 | 0.029874 | 0.029874 | 145.551622 | 145.551622 | 0.0E+00 |
| 20200915 | 20200915 | 0.029283 | 0.029283 | 146.922838 | 146.922838 | 0.0E+00 |
| 20210315 | 20210315 | 0.029386 | 0.029386 | 147.705497 | 147.705497 | 0.0E+00 |
| 20210915 | 20210915 | 0.029706 | 0.029706 | 148.225479 | 148.225479 | 0.0E+00 |
| 20220315 | 20220315 | 0.029824 | 0.029824 | 148.198122 | 148.198122 | 0.0E+00 |
| 20220915 | 20220915 | 0.030162 | 0.030162 | 148.149091 | 148.149091 | 0.0E+00 |
| 20230315 | 20230315 | 0.030290 | 0.030290 | 148.961467 | 148.961467 | 0.0E+00 |
| 20230915 | 20230915 | 0.030640 | 0.030640 | 149.762351 | 149.762351 | 0.0E+00 |
| 20240315 | 20240315 | 0.030777 | 0.030777 | 149.429810 | 149.429810 | 0.0E+00 |
| 20240915 | 20240916 | 0.031145 | 0.031145 | 150.108125 | 150.108125 | 0.0E+00 |
| 20250315 | 20250317 | 0.031295 | 0.031295 | 149.686986 | 149.686986 | 0.0E+00 |
| 20250915 | 20250915 | 0.031679 | 0.031679 | 150.302478 | 150.302478 | 0.0E+00 |
| 20260315 | 20260316 | 0.031844 | 0.031844 | 149.820616 | 149.820616 | 0.0E+00 |
| 20260915 | 20260915 | 0.032248 | 0.032248 | 150.407612 | 150.407612 | 0.0E+00 |
| 20270315 | 20270315 | 0.032429 | 0.032429 | 149.912049 | 149.912049 | 0.0E+00 |
| 20270915 | 20270915 | 0.032854 | 0.032854 | 150.455562 | 150.455562 | 0.0E+00 |
| 20280315 | 20280315 | 0.033048 | 0.033048 | 149.908384 | 149.908384 | 0.0E+00 |
| 20280915 | 20280915 | 0.033485 | 0.033485 | 150.401343 | 150.401343 | 0.0E+00 |
| 20290315 | 20290315 | 0.033685 | 0.033685 | 149.852025 | 149.852025 | 0.0E+00 |
| 20290915 | 20290917 | 0.034135 | 0.034135 | 150.208305 | 150.208305 | 0.0E+00 |
| 20300315 | 20300315 | 0.034349 | 0.034349 | 149.803895 | 149.803895 | 0.0E+00 |
| 20300915 | 20300916 | 0.034821 | 0.034821 | 150.054894 | 150.054894 | 0.0E+00 |
| 20310315 | 20310317 | 0.035052 | 0.035052 | 149.471953 | 149.471953 | 0.0E+00 |
| 20310915 | 20310915 | 0.035544 | 0.035544 | 149.982021 | 149.982021 | 0.0E+00 |
| 20320315 | 20320315 | 0.035788 | 0.035788 | 149.434123 | 149.434123 | 0.0E+00 |
| 20320915 | 20320915 | 0.036298 | 0.036298 | 149.971274 | 149.971274 | 0.0E+00 |
| 20330315 | 20330315 | 0.036550 | 0.036550 | 149.469150 | 149.469150 | 0.0E+00 |
| 20330915 | 20330915 | 0.037072 | 0.037072 | 150.037236 | 150.037236 | 0.0E+00 |
| 20340315 | 20340315 | 0.037336 | 0.037336 | 149.572880 | 149.572880 | 0.0E+00 |
| 20340915 | 20340915 | 0.037876 | 0.037876 | 150.177755 | 150.177755 | 0.0E+00 |
| 20350315 | 20350315 | 0.038152 | 0.038152 | 149.749679 | 149.749679 | 0.0E+00 |
| 20350915 | 20350917 | 0.038709 | 0.038709 | 150.376228 | 150.376228 | 0.0E+00 |
| 20360315 | 20360317 | 0.038993 | 0.038993 | 149.977212 | 149.977212 | 0.0E+00 |
| 20360915 | 20360915 | 0.039567 | 0.039567 | 150.686655 | 150.686655 | 0.0E+00 |
| 20370315 | 20370316 | 0.039859 | 0.039859 | 150.324583 | 150.324583 | 0.0E+00 |
| 20370915 | 20370915 | 0.040442 | 0.040442 | 151.057100 | 151.057100 | 0.0E+00 |
| 20380315 | 20380315 | 0.040738 | 0.040738 | 150.742876 | 150.742876 | 0.0E+00 |
| 20380915 | 20380915 | 0.041332 | 0.041332 | 151.514373 | 151.514373 | 0.0E+00 |
| 20390315 | 20390315 | 0.041635 | 0.041635 | 151.246695 | 151.246695 | 0.0E+00 |
| 20390915 | 20390915 | 0.042243 | 0.042243 | 152.067028 | 152.067028 | 0.0E+00 |
| 20400315 | 20400315 | 0.042553 | 0.042553 | 151.832874 | 151.832874 | 0.0E+00 |
| 20400915 | 20400917 | 0.043178 | 0.043178 | 152.689503 | 152.689503 | 0.0E+00 |
| 20410315 | 20410315 | 0.043496 | 0.043496 | 152.511378 | 152.511378 | 0.0E+00 |

Table 46: Cashflow replication of the Receive leg of the IRSwapRealRate trade.

Now we present the Cashflow table of the Pay leg of the deal.

| SetDate | PayDate | Coupon | Coupon Man. | PVLot | PV Man. | Error |
| --- | --- | --- | --- | --- | --- | --- |
| 20170915 | 20180315 | 0.011780 | 0.011780 | 59.242297 | 59.242297 | -1.4E-14 |
| 20180315 | 20180917 | 0.011821 | 0.011821 | 61.203982 | 61.203982 | 3.6E-14 |
| 20180917 | 20190315 | 0.012271 | 0.012271 | 61.241974 | 61.241974 | 4.5E-13 |
| 20190315 | 20190916 | 0.013693 | 0.013693 | 70.704211 | 70.704211 | 4.5E-13 |
| 20190916 | 20200316 | 0.016077 | 0.016077 | 81.658847 | 81.658847 | -2.4E-13 |
| 20200316 | 20200915 | 0.018400 | 0.018400 | 93.959405 | 93.959405 | 4.4E-13 |
| 20200915 | 20210315 | 0.020774 | 0.020774 | 104.572871 | 104.572871 | -8.1E-13 |
| 20210315 | 20210915 | 0.022883 | 0.022883 | 116.708613 | 116.708613 | 9.5E-13 |
| 20210915 | 20220315 | 0.024625 | 0.024625 | 123.046615 | 123.046615 | 1.8E-13 |
| 20220315 | 20220915 | 0.026251 | 0.026251 | 132.692347 | 132.692347 | 5.4E-13 |
| 20220915 | 20230315 | 0.027577 | 0.027577 | 136.372158 | 136.372158 | 1.1E-12 |
| 20230315 | 20230915 | 0.028756 | 0.028756 | 143.666934 | 143.666934 | 1.7E-13 |
| 20230915 | 20240315 | 0.029804 | 0.029804 | 146.307370 | 146.307370 | -5.1E-13 |
| 20240315 | 20240916 | 0.030765 | 0.030765 | 152.396200 | 152.396200 | 9.7E-13 |
| 20240916 | 20250317 | 0.031623 | 0.031623 | 152.934742 | 152.934742 | 5.1E-13 |
| 20250317 | 20250915 | 0.032492 | 0.032492 | 155.826743 | 155.826743 | 2.7E-13 |
| 20250915 | 20260316 | 0.033097 | 0.033097 | 157.446898 | 157.446898 | 2.0E-13 |
| 20260316 | 20260915 | 0.033559 | 0.033559 | 159.132250 | 159.132250 | 6.3E-13 |
| 20260915 | 20270315 | 0.034096 | 0.034096 | 158.492337 | 158.492337 | -8.2E-13 |
| 20270315 | 20270915 | 0.034661 | 0.034661 | 162.353793 | 162.353793 | -9.7E-13 |
| 20270915 | 20280315 | 0.035127 | 0.035127 | 161.111575 | 161.111575 | 4.5E-13 |
| 20280315 | 20280915 | 0.035492 | 0.035492 | 162.958566 | 162.958566 | 4.3E-13 |
| 20280915 | 20290315 | 0.035940 | 0.035940 | 160.715897 | 160.715897 | 1.1E-13 |
| 20290315 | 20290917 | 0.036547 | 0.036547 | 166.182172 | 166.182172 | -3.7E-13 |
| 20290917 | 20300315 | 0.036680 | 0.036680 | 158.866988 | 158.866988 | 4.0E-13 |
| 20300315 | 20300916 | 0.036667 | 0.036667 | 162.354356 | 162.354356 | 8.5E-13 |
| 20300916 | 20310317 | 0.036714 | 0.036714 | 158.297619 | 158.297619 | 4.5E-13 |
| 20310317 | 20310915 | 0.036693 | 0.036693 | 156.551599 | 156.551599 | 7.7E-13 |
| 20310915 | 20320315 | 0.036891 | 0.036891 | 154.483495 | 154.483495 | 4.3E-13 |
| 20320315 | 20320915 | 0.036409 | 0.036409 | 153.776198 | 153.776198 | 1.1E-13 |
| 20320915 | 20330315 | 0.036149 | 0.036149 | 148.653477 | 148.653477 | 6.7E-14 |
| 20330315 | 20330915 | 0.035903 | 0.035903 | 148.907123 | 148.907123 | -8.5E-14 |
| 20330915 | 20340315 | 0.035877 | 0.035877 | 144.528214 | 144.528214 | 2.8E-13 |
| 20340315 | 20340915 | 0.035737 | 0.035737 | 144.943560 | 144.943560 | 2.8E-13 |
| 20340915 | 20350315 | 0.035565 | 0.035565 | 140.370718 | 140.370718 | -8.5E-13 |
| 20350315 | 20350917 | 0.035368 | 0.035368 | 141.980651 | 141.980651 | -1.4E-13 |
| 20350917 | 20360317 | 0.035138 | 0.035138 | 136.648482 | 136.648482 | -2.3E-13 |
| 20360317 | 20360915 | 0.034883 | 0.034883 | 134.325298 | 134.325298 | 2.3E-13 |
| 20360915 | 20370316 | 0.034602 | 0.034602 | 131.947769 | 131.947769 | 4.8E-13 |
| 20370316 | 20370915 | 0.034291 | 0.034291 | 130.218071 | 130.218071 | 2.0E-13 |
| 20370915 | 20380315 | 0.033955 | 0.033955 | 126.342267 | 126.342267 | 5.7E-14 |
| 20380315 | 20380915 | 0.033612 | 0.033612 | 125.952697 | 125.952697 | 4.1E-13 |
| 20380915 | 20390315 | 0.033261 | 0.033261 | 121.495405 | 121.495405 | -6.0E-13 |
| 20390315 | 20390915 | 0.032945 | 0.032945 | 121.232425 | 121.232425 | 3.4E-13 |
| 20390915 | 20400315 | 0.032680 | 0.032680 | 117.829295 | 117.829295 | 1.8E-13 |
| 20400315 | 20400917 | 0.032411 | 0.032411 | 118.434138 | 118.434138 | 7.3E-13 |
| 20400917 | 20410315 | 0.032191 | 0.032191 | 112.245624 | 112.245624 | 7.4E-13 |

Table 47: Cashflow replication of the Pay leg of the IRSwapRealRate trade.

#### 4.5.2.1 Stability Testing : EUR Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRSwapRealRate trade as detailed in 4.5 under parallel shifts of the EUR curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 195: PV of the IRSwapRealRate as a function of EUR curve shifts. Effect of PV while shifting the nominal curve is due to discounting. When Curve is absolutely shifted, discount factor decreases, hence the PV with shift amount.](./Fig/31.png)

![Figure 196: EUR FLATDELTA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/32.png)
![Figure 197: CPXTEMU FLATDELTA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/33.png)

![Figure 198: EUR FLATGAMMA of IRIndexSingle_INFLATION as a function of EUR curve shifts.](./Fig/34.png)
![Figure 199: CPXTEMU FLATGAMMA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/35.png)

#### 4.5.2.2 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRSwapRealRate trade as detailed in 4.5 under parallel shifts of the CPXTEMU inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 200: PV of the IRSwapRealRate as a function of CPXTEMU inflation curve shifts. With increasing shifts in inflation zero rates, inflation forwards increases, hence coupon in Receive leg of the trade. This will lead to increase in PV as expected.](./Fig/36.png)

![Figure 201: EUR FLATDELTA of IRSwapRealRate as a function of CPXTEMU inflation curve shifts.](./Fig/37.png)
![Figure 202: CPXTEMU FLATDELTA of IRSwapRealRate as a function of CPXTEMU inflation curve shifts.](./Fig/38.png)

![Figure 203: EUR FLATGAMMA of IRIndexSingle_INFLATION as a function of CPXTEMU inflation curve shifts.](./Fig/39.png)
![Figure 204: CPXTEMU FLATGAMMA of IRSwapRealRate as a function of CPXTEMU inflation curve shifts.](./Fig/40.png)

#### 4.5.2.3 Stability Testing : Discount Spread (eurois) Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRSwapRealRate trade as detailed in 4.5 under parallel shifts of the eurois discount spread shifts. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 205: PV of the IRSwapRealRate as a function of eurois discount spread shifts. Effect is observed due to discount spread discounting and as discount factors decreases with increase in said spreads, PV is expected to decrease.](./Fig/41.png)
![Figure 206: EUR FLATDELTA of IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/42.png)

![Figure 207: CPXTEMU FLATDELTA of IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/43.png)
![Figure 208: EUR FLATGAMMA of IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/44.png)

![Figure 209: CPXTEMU FLATGAMMA of IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/45.png)

#### 4.5.2.4 Taylor Expansion Consistency Testing

Now we show the Taylor series based Approximate PVs for the said trade. Here we simultaneously shift the underlying curves and checked the PV profile and calculated the relative difference of DBA and Manual calculated Taylor Approximated PVs. Overall, the 3D plot surface plot shows PV changes smoothly under underlying curve shifts. The contour plot of relative errors shows the close match between DBA and Taylor approximated numbers with differences only being significant for large moves in risk factors. This is expected and results shows adequacy of Delta and Gamma risks for risk management.

Presented below are plots:

![Figure 210: PV of the IRSwapRealRate as a function of simultaneous shifts of EUR Curve and CPXTEMU curve.](./Fig/46.png)
![Figure 211: Relative error between DBA and Taylor Approximate PVs of the IRSwapRealRate as a function of simultaneous shifts of EUR Curve and CPXTEMU curve.](./Fig/47.png)

#### 4.5.3 CCAR Testing

In this section, we test the IRSwapRealRate trade as described in 4.5 under the recent CCAR 2023 scenarios and compare them with the Base scenario.

#### 4.5.3.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product under Base and latest 2023 CCAR scenarios.

![Figure 212: Plot of the zero rate of EUR Curve under the Base scenario and the CCAR scenarios.](./Fig/48.png)

#### 4.5.3.2 Stability Testing : EUR Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRSwapRealRate trade as detailed in 4.5 under parallel shifts of the EUR curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 213: PV of the IRSwapRealRate as a function of EUR curve shifts.](./Fig/49.png)

![Figure 214: EUR FLATDELTA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/50.png)
![Figure 215: CPXTEMU FLATDELTA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/51.png)

![Figure 216: EUR FLATGAMMA of IRIndexSingle_INFLATION as a function of EUR curve shifts.](./Fig/52.png)
![Figure 217: CPXTEMU FLATGAMMA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/53.png)

#### 4.5.3.3 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRSwapRealRate trade as detailed in 4.5 under parallel shifts of the CPXTEMU inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.
#### 4.5.3.3 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRSwapRealRate trade as detailed in 4.5 under parallel shifts of the CPXTEMU inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 214: EUR FLATDELTA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/1.png)

![Figure 215: CPXTEMU FLATDELTA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/2.png)

![Figure 216: EUR FLATGAMMA of IRIndexSingle_INFLATION as a function of EUR curve shifts.](./Fig/3.png)

![Figure 217: CPXTEMU FLATGAMMA of IRSwapRealRate as a function of EUR curve shifts.](./Fig/4.png)

##### 4.5.3.3 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRSwapRealRate trade as detailed in 4.5 under parallel shifts of the CPXTEMU inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 218: PV of the IRSwapRealRate as a function of CPXTEMU inflation curve shifts.](./Fig/5.png)

![Figure 219: EUR FLATDELTA of IRSwapRealRate as a function of CPXTEMU inflation curve shifts.](./Fig/6.png)

![Figure 220: CPXTEMU FLATDELTA of IRSwapRealRate as a function of CPXTEMU inflation curve shifts.](./Fig/7.png)

![Figure 221: EUR FLATGAMMA of IRIndexSingle_INFLATION as a function of CPXTEMU inflation curve shifts.](./Fig/8.png)

![Figure 222: CPXTEMU FLATGAMMA of IRSwapRealRate as a function of CPXTEMU inflation curve shifts.](./Fig/9.png)

##### 4.5.3.4 Stability Testing : Discount Spread (eurois) Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRSwapRealRate trade as detailed in 4.5 under parallel shifts of the eurois discount spread shifts. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 223: PV of the IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/10.png)

![Figure 224: EUR FLATDELTA of IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/11.png)

![Figure 225: CPXTEMU FLATDELTA of IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/12.png)

![Figure 226: EUR FLATGAMMA of IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/13.png)

![Figure 227: CPXTEMU FLATGAMMA of IRSwapRealRate as a function of eurois discount spread shifts.](./Fig/14.png)

#### 4.5.4 IRRBB Testing

In this section, we test the stability of the IRSwapRealRate trade as described in section 4.5 under the IRRBB scenarios and compare them with the Base scenario.

##### 4.5.4.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product. The effects of each scenario are as expected by their names, for example, the parallel up is a parallel shift of the base curve.

![Figure 228: Plot of the zero rate of EUR Curve under the Base scenario and the IRRBB scenarios.](./Fig/15.png)

##### 4.5.4.2 Stability Testing : EUR Curve Shift

We test the stability of the PV under absolute shifts of the EUR Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 229: PV of the IRSwapRealRate under EUR curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/16.png)

![Figure 230: PV of the IRSwapRealRate under EUR curve shifts for the Base scenario and the parallel scenarios.](./Fig/17.png)

![Figure 231: PV of the IRSwapRealRate under EUR curve shifts for the Base scenario and the short scenarios.](./Fig/18.png)

![Figure 232: PV of the IRSwapRealRate under EUR curve shifts for the Base scenario and the long scenarios.](./Fig/19.png)

![Figure 233: PV of the IRSwapRealRate under EUR curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/20.png)

![Figure 234: PV of the IRSwapRealRate under EUR curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/21.png)

##### 4.5.4.3 Stability Testing : CPXTEMU Curve Shift

We test the stability of the PV under absolute shifts of the CPXTEMU Inflation Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 235: PV of the IRSwapRealRate under CPXTEMU curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/22.png)

![Figure 236: PV of the IRSwapRealRate under CPXTEMU curve shifts for the Base scenario and the parallel scenarios.](./Fig/23.png)

![Figure 237: PV of the IRSwapRealRate under CPXTEMU curve shifts for the Base scenario and the short scenarios.](./Fig/24.png)

![Figure 238: PV of the IRSwapRealRate under CPXTEMU curve shifts for the Base scenario and the long scenarios.](./Fig/25.png)

![Figure 239: PV of the IRSwapRealRate under CPXTEMU curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/26.png)

![Figure 240: PV of the IRSwapRealRate under CPXTEMU curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/27.png)

#### 4.5.5 MultiVariate Testing

In this section, we show the results of the multivariate test for the IRSwapRealRate trade as described in Subsection 4.5.

Table 48 lists the underlying risk factors which are used for the testing of the IRSwapRealRate Deal. In particular, we can observe that the product is sensitive to all its risk factors. The resulting transitions of the PV under the up and down stressed scenario are shown in Figure 241.

| Type | Currency | AssetName | RiskFactor | Sensitivity | MRM SHOCK Area (3%) |
| --- | --- | --- | --- | --- | --- |
| IRRCURVE | EUR | EUR | DISCOUNTSPREAD | YES | NO |
| IRRCURVE | EUR | EUR | OISSPREAD | YES | YES |
| IRRCURVE | EUR | EUR | SPOTLIBOR6SPREAD-6M | YES | YES |
| IRRCURVE | EUR | EUR | SWAP | YES | YES |
| INFLATIONCURVE | CPXTEMU | CPXTEMU | SWAP | YES | YES |

Table 48: Risk factors used for the IRSwapRealRate MultiVariate Testing.

![Figure 241: Transition of the PV of the IRSwapRealRate in the up and down stressed scenarios.](./Fig/28.png)

### 4.6 Product Testing : IRIndexSingle_INFLATION, Mars Request : 21495 (18874)

In this section, we covers the testing for full approval of the product IRIndexSingle_INFLATION which is covered in Mars Request 2024Mar20 – MANCJAI – 21495 and 2022Jul27 – MANCJAI – 18874. Request 18874 was approved for DBX-RateDeterministic_InflationDeterministic configuration which was later retired and DBX-ShortRateDeterministic_InflationDeterministic was approved in request 21495.

It is to be noted that Provisional approval for this product is already signed-off and is covered in Mars Request 2023Mar14 – SCHAARN – 19722. In the provisional approval, 7 trades is booked under the DBX-RateDeterministic_InflationDeterministic model.

Impact of migrating this trade to Kannon under the proposed model is detailed below:

| DealID | PRDS | Kannon PVNC EUR | RiskEngine PVNC EUR | PVNC Diff (EUR) |
| --- | --- | --- | --- | --- |
| M406977M | IRIndexSingle_INFLATION | 569,988 | 569,629 | 359 |
| Q466273M | IRIndexSingle_INFLATION | 102,327 | 102,327 | 0 |
| G953051M | IRIndexSingle_INFLATION | 1,885,976 | 1,884,790 | 1186 |
| Q953076M | IRIndexSingle_INFLATION | 71,202 | 71,158 | 45 |
| Q969361M | IRIndexSingle_INFLATION | 190,984 | 190,864 | 120 |
| R173650M | IRIndexSingle_INFLATION | 5,926 | 5,923 | 3 |
| R436757M | IRIndexSingle_INFLATION | 5,303 | 5,300 | 3 |

Table 49: Impact of migration of IRIndexSingle_INFLATION trades to Kannon. A total impact of ≈ 2.3K EUR is reported.

#### 4.6.1 Index (Ticker : DBMBU10S) Description

Underlying index (Ticker : DBMBU10S) tracks a rules based strategy and is a 500 percent leveraged basket of the Sub-index which in turn tracks the return on an investment strategy relating to movements in the inflation market.

Index Closing Level at time $t$ is calculated as follows:

$$IL(t) = IL(r) + (SIL(t) - SIL(r)) \cdot U(r)$$

$SIL(t), SIL(r)$ denotes Sub-Index Closing level at time $t$ and rebalancing date $r$ respectively, a brief description of the index and its calculations are provided in the below section. $U(r)$ denotes Unit Holding on an Index Rebalancing date is calculated as follows:

$$U(r) = \frac{TW \cdot IL(r)}{SIL(r)}$$

$TW$ denotes Target Weight and is set to 5.

#### 4.6.2 Call Option Strategy Index (Ticker : DBMBU10D) Description

This Sub-Index (Ticker : DBMBU10D) represents a rule-based strategy which tracks the return of holding delta notional equivalent to the delta of a portfolio of call options. On any given business day, the sub will be notionally invested in the Underlying Index (Ticker : DBCUU10Y, a brief description is provided in the below section), each of which will have a specified tenor ans will respectively be assumed to be traded on a different specified period immediately preceding such Index business date. The strike in respect of each such notional call option is a specified percentage of the Underlying Index Closing level on the trade date.

In each business day, the delta in respect of each notional call option is calculated and the notional holding in respect of the Underlying Index will be determined based upon the average delta over a specified number of days of such call options. If the absolute movement in the Index exceeds a specified threshold when compared with the average delta in respect of the notional call options notionally invested in the underlying index and if the index was last rebalanced at greater than a specified threshold, the notional holding in the underlying index will be revised and index will rebalance. The Underlying Closing level in each index business day will be reduced by a Running Cost and a rebalancing cost on each Rebalancing date. Such incorporation means that the underlying Closing index level will be lower than the case where no fee is involved.

The calculation of the Sub-Index Closing Level in each index business date is provided below.

$$SIL(t) = \left\{SIL(r)\left[1-RC \cdot \frac{d(r,t)}{365}\right] \right\} + (UL(t) - UL(r)) \cdot U(r) - RebalancingCost(r)$$

$RC$ denotes Running Cost, set to 0.05%.
$UL(t), UL(r)$ denotes Underlying (Ticker : DBCUU10Y) Index Closing level at time $t$ and $r$ respectively, a brief description of the index is explained in the below section.

$U(r)$ denotes the Unit Holding and is calculated as follows:

$$U(r) = \frac{TW(r) \cdot SIL(r)}{UL(r)}$$

$RebalancingCost(r)$ denotes Cost associated with portfolio rebalancing falls on Rebalancing Date $r$ and is Calculated as follows:

$$RebalancingCost(r) = SIL(r) \cdot abs(TW(r) - CW(r)) \cdot PRC$$

$PRC$ denotes Percentage Rebalancing Cost and is set to 0.1%.

$CW(t)$ denotes Current Weight and calculated as follows:

$$CW(t) = \frac{U(r) \cdot UL(t)}{SIL(t)}$$

Now $TW(t)$ denotes target weight at time $t$ and is calculated as follows:

$$TW(t) = \frac{\sum_{i=1}^Y \left[\sum_{j=1}^m \Delta call(j, t-v)\right]}{Y \cdot m}$$

$Y$ and $m$ denotes Length of Delta Averaging Period (Set to 3 in our case) and Number of Call Options (set to 5) to be included in each index business day within the Delta Averaging Period respectively.

$\Delta call(j, t-v)$ denotes Delta of $j$th Call option with option expiry falling on date $t-v$. $v(1, 2, 3)$ denotes the number of business days preceding time $t$. $j(1, 2, 3, 4, 5)$ denote the $j$ th call option and those details are provided below:

| j | Trade Date in Business Days | Expiry Date in Business Days | Strike w.r.t. Index at Trade Date | Call/Put |
| --- | --- | --- | --- | --- |
| 1 | -50 | 10 | 1.007 | C |
| 2 | -40 | 20 | 1.007 | C |
| 3 | -30 | 30 | 1.007 | C |
| 4 | -20 | 40 | 1.007 | C |
| 5 | -10 | 50 | 1.007 | C |

Table 50: Portfolio of Call options used for Delta Calculation at $t$ for Sub-Index.

Now Call Delta $(\Delta call(j, t))$ is calculated as follows:

$$\Delta call(j, t) = \Phi(d_{1,c}[t,T'(j,t), S(t), K(j,c), \sigma(t-1b)])$$

$\Phi$ denotes Standard log-normal cumulative distribution function

$d_{1,c}$ is calculated as follows:

$$d_{1,c}(t, T_c, S_t, K_{1c}, \sigma_{t-1b}) = \frac{ln\left(\frac{S_t}{K_c}\right) + 0.5\tau_c\sigma_{t-1b}^2}{\sigma_{t-1b}\sqrt{\tau_c}}$$

where $\tau_c$ denotes Time fraction between Trade Date and Option expiry date.

$\sigma_{t-1b}$ denotes N-Index Business Day Realised volatility of the underlying index at immediate preceding business day at $t$ and is calculated as follows:

$$\sigma_t = \sqrt{252 \cdot \frac{\sum_{i=t-N}^t \left(RD(i,t) - \overline{RD(i,t)}\right)^2}{N}}$$

Where $N$ is the Length of Volatility Period, currently set to 50.

$RD(i, t)$ denotes Return of Underlying Index and is calculated as follows:

$$RD(i, t) = \frac{UL(i, t)}{UL(i, t-1b)} - 1$$

$\overline{RD(i,t)}$ denotes average of Underlying Index returns over length of period $N$ and is calculated as follows:

$$\overline{RD(i,t)} = \frac{\sum_{i=t-N}^t RD(i, t)}{N}$$

#### 4.6.3 DB Breakeven Inflation Swap Strategy Index (Ticker : DBCUU10Y) Description

Underlying Index is a strategy comprised of multiple Sub-Strategies which are themselves comprised of the same components, but which have different rebalancing dates. Each sub-strategy is designed to track the performance of holding a notional 10Y inflation receiver swap which has the following features:

1. Same swap term as the highest tenor in the maturity bucket of the strategy

2. References an inflation index for the inflation market with the same currency as the denomination of the strategy (USD in our case)

3. Receives the performance of the inflation index

4. Pays out the "Breakeven Inflation Rate" which is calculated by reference to an inflation swap curve

So the sub-strategy receives notional payment with respect to Inflation Index Linked Amount and is calculated by following equation:

$$N(r) \cdot \left(\frac{SSIL(t2)}{SSIL(t1)} - 1\right)$$

and pays $N(r) \cdot [(1 + FixedRate)^T - 1]$

Where $SSIL(.)$ denotes the sub-strategy index closing level.

The "Breakeven Inflation Rate" is the $FixedRate$ at which price of payer leg is equal to receiver leg.

On each rebalancing date for a Sub-Strategy, a new notional inflation receiver swap (as described in the paragraph above) will be deemed to be entered into. The Sub-Strategy tracks the performance of the new notional inflation receiver swap from, but excluding, such rebalancing date to, and including, the next rebalancing date. Each Strategy is itself rebalanced annually such that each Sub-Strategy will have equal weighting within such Strategy.

Now we present the Index Closing level formula for Inflation Strategy Index denoted by $UL(t)$:

$$UL(t) = UL(ar) \cdot \left[1 + \sum_{i=1}^N w(i) \cdot \left(\frac{SSIL_i(t)}{SSIL_i(ar)} - 1\right)\right]$$

Where $UL(t)$ and $UL(ar)$ denotes Inflation Strategy index closing level at times $t$ and rebalance time $ar$. Note time $r$ represents different rebalance time used in the Call option strategy index which is not necessarily overlaps on rebalance dates of inflation sub-strategy index rebalance dates (which is yearly in our case). $w(i)$ denotes the weight of each sub-strategy within the Inflation Strategy, in our case it is equally weighted ( 1/12 for each sub-strategy) for $N = 12$ sub-strategies, where each of sub-strategy portfolio gets rebalanced in one of 12 different months in a year.

Now the Sub-Strategy index closing level is calculated using following formula:

$$SSIL_i(t) = SSIL_i(ar_i) \cdot \left(1+ \frac{NPV_i(t) - NPV_i(ar_i)}{100}\right)$$

Where $NPV_i(t)$ denotes the Net Present Value of $i$th Sub-Strategy Inflation Swap valued at time $t$.

#### 4.6.4 Product Description

A transaction traded on a see through basis involving an index which has index components with the same currency and which belongs to the Inflation family of indices. The trade notional currency is the same as the index currency. This transaction will not have optionality.

The deal is templated in a DELTAONE DBA security which is used to model a cashflow which can be cancelled by the client. Given the existing fees, it is assumed that the client cancels the deal on valuation date. As a result, the PV of the deal writes as follows:

$$PV = \{Notional \cdot (IL(ValuationDate) - IL(AccrualBegin)) - Fees\} \cdot DF_{Funding}(T_p)$$

Where $IL(t)$ denotes the Index value of the Leveraged Strategy at time $t$, $DF_{(.)}$ denotes the discount factor. More trade details are provided below:

- Valuation Date : 20th July, 2022
- Accrual Begin : 17th July, 2022
- Pay Date $(T_p)$ : 25th July, 2022
- Notional : -10, 000 USD (Rescaled)
- Fees : 0
- Funding Name : usdsf

Now we present the testing related to the said deal. This is tested for the model DBX-RateDeterministic_InflationDeterministic. All the testings were carried out in DBAnalytics version 1380.

#### 4.6.5 EOD Testing

#### 4.6.5.1 Cashflow Replication

Here we replicate manually the cashflow and PV of the said deal and compared it against the DBA values. For manual Replication, A FRA style security is created in EQOPT DBA template and priced the security to calculate the Forward. Numbers from table 51 shows manual and DBA values are in close agreement with each other. The tests are passed.

| Notional | DBA SIL | Man. SIL | DBA IL | Man. IL | DBA PV | Man. PV | PV Error |
| --- | --- | --- | --- | --- | --- | --- | --- |
| -0.170966 | 105.645847 | 105.645847 | 124.612078 | 124.612078 | 0.427116 | 0.427116 | 5.5822019-13 |

Table 51: Cashflow Replication of the Trade. It is to be noted, PV calculation is done with trade notional different from the notional used in the rest of the testing.

#### 4.6.5.2 Stability Testing : USD Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRIndexSingle_INFLATION trade as detailed in 5.6 under parallel shifts of the USD curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered USD curve shifts in all scenarios, as expected.

![Figure 242: Underlying Inflation Strategy Index (UL) Closing Level at Valuation Date as a function of absolute USD Curve Shifts. As underlying references receiver inflation swaps, effect of PV is due to discounting when nominal curve is shifted. When Curves are shifted parallel which leads to lower discount factors, hence index level is expected to decrease with shift.](./Fig/29.png)

![Figure 243: Call Option Strategy index closing level (SIL) at Valuation Date as a function of absolute USD Curve Shifts. As evident from SIL equation 38, Index level is expected to decrease with decrease in Inflation Index Closing level. We have established from figure 242 that UL decreases with shift in curve, then downward trend in SIL is expected.](./Fig/30.png)

![Figure 244: PV of the IRIndexSingle_INFLATION as a function of USD curve shifts. From Equation 36, it is evident that Leverage Strategy Index Value decreases with decrease in Call Option Strategy index Closing Level (SIL). As shifting the curve in parallel leads to decrease in IL and as notional is negative, from Equation 51, PV is expected to increase. It is to be noted that discounting will have opposite effect in PV, but the effect is insignificant relative to impact attributed from change in Index values.](./Fig/31.png)

![Figure 245: USD FLATDELTA of IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/32.png)

![Figure 246: USCPI FLATDELTA of IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/33.png)

![Figure 247: USD FLATGAMMA of IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/34.png)

![Figure 248: USCPI FLATGAMMA of IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/35.png)

##### 4.6.5.3 Stability Testing : USCPI Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRIndexSingle_INFLATION trade as detailed in 4.6 under parallel shifts of the USCPI inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered USCPI curve shifts in all scenarios, as expected.

![Figure 249: Underlying Inflation Strategy Index (UL) Closing Level at Valuation Date as a function of absolute USCPI Curve Shifts. As underlying references receiver inflation swaps, overall level of inflation forwards is going to increase with shifts in Inflation Curve, which in turn leads to increase in index closing levels.](./Fig/36.png)

![Figure 250: Call Option Strategy Index Closing Level (SIL) at Valuation Date as a function of absolute USCPI Curve Shifts. As evident from SIL equation 38, index level is expected to increase with increase in Inflation Index Closing level. We have established from figure 249 that UL increases with shift in inflation curve, then upward trend in SIL is expected.](./Fig/37.png)

![Figure 251: PV of the IRIndexSingle_INFLATION as a function of USCPI curve shifts. From Equation 36, it is evident that Leverage Strategy Index Value increase with increase in Call Option Strategy Index Closing Levels (SIL). As shifting the inflation curve in parallel leads to increase in IL and as notional is negative, from Equation 51, PV is expected to decrease.](./Fig/38.png)

![Figure 252: USD FLATDELTA of IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/39.png)

![Figure 253: USCPI FLATDELTA of IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/40.png)

![Figure 254: USD FLATGAMMA of IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/41.png)

![Figure 255: USCPI FLATGAMMA of IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/42.png)

##### 4.6.5.4 Stability Testing : Discount Spread (usdsfr) Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRIndexSingle_INFLATION trade as detailed in 4.6 under parallel shifts of the usdsfr discount spread shifts. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 256: PV of the IRIndexSingle_INFLATION as a function of usdsfr discount spread shifts. Effect is observed due to discount spread discounting and as discount factors decreases with increase in said spreads, PV (see equation 51) is expected to decrease.](./Fig/43.png)

![Figure 257: USD FLATDELTA of IRIndexSingle_INFLATION as a function of usdsfr discount spread shifts.](./Fig/44.png)

![Figure 258: USCPI FLATDELTA of IRIndexSingle_INFLATION as a function of usdsfr discount spread shifts.](./Fig/45.png)

![Figure 259: USD FLATGAMMA of IRIndexSingle_INFLATION as a function of usdsfr discount spread shifts.](./Fig/46.png)

![Figure 260: USCPI FLATGAMMA of IRIndexSingle_INFLATION as a function of usdsfr discount spread shifts.](./Fig/47.png)

##### 4.6.5.5 Taylor Expansion Consistency Testing

Now we show the Taylor series based Approximate PVs for the said trade. Here we simultaneously shift the underlying curves and checked the PV profile and calculated the relative difference of DBA and Manual calculated Taylor Approximated PVs. Overall, The 3D plot surface plot shows PV changes smoothly under underlying curve shifts. The contour plot of relative errors shows the close match between DBA and Taylor approximated numbers with differences only being significant for large moves in risk factors. This is expected and results shows adequacy of Delta and Gamma risks for risk management.

Presented below are plots:

![Figure 261: PV of the IRIndexSingle_INFLATION as a function of simultaneous shifts of USD Curve and USCPI curve.](./Fig/48.png)

![Figure 262: Relative error between DBA and Taylor Approximate PVs of the IRIndexSingle_INFLATION as a function of simultaneous shifts of USD Curve and USCPI curve.](./Fig/49.png)

#### 4.6.6 CCAR Testing

In this section, we test the IRIndexSingle_INFLATION trade as described in 4.6 under the recent CCAR 2023 scenarios and compare them with the Base scenario.

##### 4.6.6.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product under Base and latest 2023 CCAR scenarios.

![Figure 263: Plot of the zero rate of USCPI Inflation Curve under the Base scenario and the CCAR scenarios.](./Fig/50.png)

#### 4.6.6.2 Stability Testing : USD Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRIndexSingle_INFLATION trade as detailed in 4.6 under parallel shifts of the USD curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered USD curve shifts in all CCAR scenarios, as expected.

![Figure 264: PV of the IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/51.png)

![Figure 265: USD FLATDELTA of IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/52.png)

![Figure 266: USCPI FLATDELTA of IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/53.png)

![Figure 267: USD FLATGAMMA of IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/54.png)

![Figure 268: USCPI FLATGAMMA of IRIndexSingle_INFLATION as a function of USD curve shifts.](./Fig/55.png)

#### 4.6.6.3 Stability Testing : USCPI Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the IRIndexSingle_INFLATION trade as detailed in 4.6 under parallel shifts of the USCPI Inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered USCPI curve shifts in all scenarios, as expected.

![Figure 269: PV of the IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/56.png)

![Figure 270: USD FLATDELTA of IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/57.png)

![Figure 271: USCPI FLATDELTA of IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/58.png)

![Figure 272: USD FLATGAMMA of IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/59.png)

![Figure 273: USCPI FLATGAMMA of IRIndexSingle_INFLATION as a function of USCPI curve shifts.](./Fig/60.png)

#### 4.6.7 IRRBB Testing

In this section, we test the stability of the IRIndexSingle_INFLATION trade as described in section 4.6 under the IRRBB scenarios and compare them with the Base scenario.

#### 4.6.7.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product. The effects of each scenario are as expected by their names, for example, the parallel up is a parallel shift of the base curve.

![Figure 274: Plot of the zero rate of USD Curve under the Base scenario and the IRRBB scenarios.](./Fig/61.png)

##### 4.6.7.2 Stability Testing : USD Curve Shift

Here we test the stability of the PV under absolute shifts of the USD Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 275: PV of the IRIndexSingle_INFLATION under USD curve shifts for the Base scenario and all IRRBB scenarios.](./Fig/62.png)

![Figure 276: PV of the IRIndexSingle_INFLATION under USD curve shifts for the Base scenario and the parallel scenarios.](./Fig/63.png)

![Figure 277: PV of the IRIndexSingle_INFLATION under USD curve shifts for the Base scenario and the short scenarios.](./Fig/64.png)

![Figure 278: PV of the IRIndexSingle_INFLATION under USD curve shifts for the Base scenario and the long scenarios.](./Fig/65.png)

##### 4.6.7.3 Stability Testing : USCPI Curve Shift

Here we test the stability of the PV under absolute shifts of the USCPI Inflation Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 283: PV of the IRIndexSingle_INFLATION under USCPI curve shifts for the Base scenario and the short scenarios.](./Fig/66.png)

![Figure 284: PV of the IRIndexSingle_INFLATION under USCPI curve shifts for the Base scenario and the long scenarios.](./Fig/67.png)

![Figure 285: PV of the IRIndexSingle_INFLATION under USCPI curve shifts for the Base scenario and the steepener/flattener scenarios.](./Fig/68.png)

![Figure 286: PV of the IRIndexSingle_INFLATION under USCPI curve shifts for the Base scenario and the negative steepener/flattener scenarios.](./Fig/69.png)

#### 4.6.8 MultiVariate Testing

In this section, we show the results of the multivariate test for the IRIndexSingle_INFLATION trade as described in Subsection 4.6.

Table 52 lists the underlying risk factors which are used for the testing of the IRIndexSingle_INFLATION Deal. It is to be noted, listed risk factors are not exhaustive set of Risk factors that are applicable to the trade as those are omitted due to absence of either sensitivity or availability of MRM shocks. The resulting transitions of the PV under the up and down stressed scenario are shown in Figure 287.

| Type | Currency | AssetName | RiskFactor |
| --- | --- | --- | --- |
| IRRCURVE | USD | USD | SWAP |
| INFLATIONCURVE | USCPI | USCPI | SWAP |

Table 52: Risk factors used for the IRIndexSingle_INFLATION MultiVariate Testing.

![Figure 287: Transition of the PV of the IRIndexSingle_INFLATION in the up and down stressed scenarios.](./Fig/70.png)

### 4.7 Model Parameter Testing

In this section, we test the model rules for the models DBOPT -RateDeterministic_InflationDeterministic and DBX -RateDeterministic_InflationDeterministic that are approved by MoRM in MARS. The model parameters are divided according to the object to which they belong within the DBA pricing framework.

#### 4.7.1 MODEL

The rules in this section are approved for the DBOPT model, and therefore correspond to DBOPT -RateDeterministic_InflationDeterministic model.

| Rule ID | | Minimal condition(s)/Condition(s) | Reference |
| --- | --- | --- | --- |
| Inflation0045 | Minimum condition(s): | MODEL::ModelName EQUAL_TO DBOPT | 4.7.1.1 |
| | Target condition(s): | MODEL::ModelMode IN PRICE, PRICEVALUETWODAY | |
| Inflation0049 | Target condition(s): | MODEL::RecalibCurves IN NO, YES | 4.7.1.2 |
| Rates0087 | Target condition(s): | MODEL::MINIMUMPAYOFFSMOOTHINGWEDGE NOT_EXISTS | 4.7.1.3 |
| Rates0088 | Target condition(s): | MODEL::PAYOFFSMOOTHINGUSETIMESCALING NOT_EXISTS | 4.7.1.4 |
| Rates0089 | Minimum condition(s): | MODEL::PAYOFFSMOOTHING EQUAL_TO YES | 4.7.1.5 |
| | Target condition(s): | MODEL::SMOOTHCMSNSPREADPAYOFF NOT_EQUAL_TO YES | |

##### 4.7.1.1 Model Rule Inflation0045

Minimum condition(s):
- MODEL::ModelName EQUAL_TO DBOPT

Target condition(s):
- MODEL::ModelMode IN PRICE, PRICEVALUETWODAY

The parameter ModelMode determines the pricing conventions. PRICE means price to value date of the curve; PRICEVALUETWODAY subtracts two days from the option expiries and the settle day of the curve to derive the number of volatility days and returns price to value date.

In order to test the parameter, we consider an Inflation ZC swap having set date 20451015 and price it in the following two ways:
1) As exactly booked, where the exercise date is two business days before the effective date, i.e. the start date of the underlying swap, with ModelMode equal to PRICE.
2) As not exactly booked, where the exercise date coincides with the effective date, i.e. the start date of the underlying swap, with ModelMode equal to PRICEVALUETWODAY.

We expect to find the same price in both cases, as the swap priced under mode PRICEVALUETWODAY the set date is increased by two business days. The following table shows that the discrepancy produce the same price. Table 54 exemplarily shows that the prices of an Inflation ZC swap is the same under both configurations. This confirms the correct functionality of the parameter ModelMode for the considered security.

| ModelMode | PRICE | PRICEVALUETWODAY |
| --- | --- | --- |
| SetDate | 20451015 | 20451017 |
| PayDate | 20451020 | 20451020 |
| RateIndexType | INFLATIONRETURN-RATIO-2MFLAT | INFLATIONRETURN-RATIO-2MFLAT |
| NetValue | -13493.34444768 | -13493.34444768 |

Table 54: PVs of the swaption when ModelMode is set equal to PRICE and PRICEVALUETWODAY and the exercise date is adjusted accordingly by two business days.

The following table is obtained by modifying the parameter value in the model of the InflAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| MODEL::ModelMode | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| PRICE | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| PRICESETTIE | FAIL | FAIL | -1.814226e+07 | -16510.5859 | 16057.5593 |
| PRICETHREEDAY | FAIL | FAIL | -1.814226e+07 | -16510.5859 | 16057.5593 |
| PRICETWODAY | FAIL | FAIL | -1.814226e+07 | -16510.5859 | 16057.5593 |
| PRICEVALUETWODAY | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| PRICEVALUETHREEDAY | FAIL | FAIL | -1.813069e+07 | -16520.0551 | 16047.3229 |
| PRICEVALUEONEDAY | FAIL | FAIL | -1.813069e+07 | -16520.0551 | 16047.3229 |
| PRICEONEDAY | FAIL | FAIL | -1.814226e+07 | -16510.5859 | 16057.5593 |

##### 4.7.1.2 Model Rule Inflation0049

Target condition(s):
- MODEL::RecalibCurves IN NO, YES

Possible values are YES and NO (default = NO). We turn on DS2 recalibration when either a), b) or c) is true. a) a MODEL has RecalibCurves = YES, b) a MODEL has RecalibCurvesD5 = RECALIBRATE (legacy feature which would be deprecated in future) c) a DICTIONARY has RECALIBCURVES = YES keyword. This means when c) is YES, we always turn on recalibration regardless of the dictionary configuration.

For the parameter testing, refer to Model Parameter Testing document [18].

The following table is obtained by modifying the parameter value in the model of the InflAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| MODEL::RecalibCurves | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| YES | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| NO | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.1.3 Model Rule Rates0087

Target condition(s):
- MODEL::MINIMUMPAYOFFSMOOTHINGWEDGE NOT_EXISTS

When property PayoffSmoothing is set to YES in DBOPT, MinimumPayoffSmoothingWedge together with PayoffSmoothingScaler, MaximumPayoffSmoothingWedge, and PayoffSmoothingUseTimeScaling determines the value of the smoothing region.

The rule is required as part of DBA request since the parameter MinimumPayoffSmoothingWedge is not approved for use until validated.

##### 4.7.1.4 Model Rule Rates0088

Target condition(s):
- MODEL::PAYOFFSMOOTHINGUSETIMESCALING NOT_EXISTS

When property PayoffSmoothing is set to YES in DBOPT, PayoffSmoothingUseTimeScaling together with PayoffSmoothingScaler, MaximumPayoffSmoothingWedge, and MinimumPayoffSmoothingWedge determines the value of the smoothing region.

The rule is required as part of DBA request since the parameter PayoffSmoothingWedge is not approved for use until validated.

##### 4.7.1.5 Model Rule Rates0089

Minimum condition(s):
- MODEL::PAYOFFSMOOTHING EQUAL_TO YES

Target condition(s):
- MODEL::SMOOTHCMSNSPREADPAYOFF NOT_EQUAL_TO YES

The rule is required as part of DBA request since the parameter PayoffSmoothing for securities triggered by parameter SmoothCmsNSpreadPayoff is not approved for use until validated.

#### 4.7.2 DBX

The rules in this section are general rules for any DBX model and hence approved for DBX -RateDeterministic_InflationDeterministic model. For the testing of these parameters, refer to the Model Parameter Testing document [18].

| Rule ID | | Minimal condition(s)/Condition(s) | Reference |
| --- | --- | --- | --- |
| Rates0863 | Minimum condition(s): | MODEL::ModelName EQUAL_TO DBX | 4.7.2.1 |
| | Target condition(s): | MODEL::NumberRuns GREATER_THAN_OR_EQUAL_TO 1 | |
| Rates0866 | Minimum condition(s): | MODEL::ModelName EQUAL_TO DBX | 4.7.2.2 |
| | Target condition(s): | MODEL::NumberSeedVarianceRuns GREATER_THAN_OR_EQUAL_TO 1 | |
| Rates0864 | Minimum condition(s): | MODEL::ModelName EQUAL_TO DBX | 4.7.2.3 |
| | Target condition(s): | MODEL::NumberSims GREATER_THAN_OR_EQUAL_TO 1000 | |
| Rates0865 | Minimum condition(s): | MODEL::ModelName EQUAL_TO DBX | 4.7.2.4 |
| | | MODEL::NumberRuns LESS_THAN 5 | |
| | | MODEL::NumberSeedVarianceRuns LESS_THAN 5 | |
| | Target condition(s): | MODEL::NumberSims GREATER_THAN_OR_EQUAL_TO 5000 | |

##### 4.7.2.1 Model Rule Rates0863

Minimum condition(s):
- MODEL::ModelName EQUAL_TO DBX

Target condition(s):
- MODEL::NumberRuns GREATER_THAN_OR_EQUAL_TO 1

NumberRuns/NumberSeedVarianceRuns is the number of independent simulations to perform for pricing. If this is set to three for example, three separate runs with say 2000 paths each will be used. The price returned will represent the average over three runs.

| MODEL::NumberRuns | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| 3 | PASS | PASS | 427115.948 | 299.6592 | 14810.3679 |
| 2 | PASS | PASS | 427115.948 | 299.6592 | 14810.3679 |
| 1 | PASS | PASS | 427115.948 | 299.6592 | 14810.3679 |

##### 4.7.2.2 Model Rule Rates0866

Minimum condition(s):
- MODEL::ModelName EQUAL_TO DBX

Target condition(s):
- MODEL::NumberSeedVarianceRuns GREATER_THAN_OR_EQUAL_TO 1

NumberRuns/NumberSeedVarianceRuns is the number of independent simulations to perform for pricing. If this is set to three for example, three separate runs with say 2000 paths each will be used. The price returned will represent the average over three runs.

#####  4.7.2.3 Model Rule Rates0864

Minimum condition(s):
- MODEL::ModelName EQUAL_TO DBX

Target condition(s):
- MODEL::NumberSims GREATER_THAN_OR_EQUAL_TO 1000

NumberSims is the number of simulations to perform during pricing. At 2000 simulations, the seed variance is typically for non-compound options, 2.5% of time value. The seed variance is typically lower for european options than american style options. These seed variance numbers depend on the choice of Variance Reduction.

| MODEL::NumberSims | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| 1000 | PASS | PASS | 427115.948 | 299.6592 | 14810.3679 |
| 2000 | PASS | PASS | 427115.948 | 299.6592 | 14810.3679 |
| 5000 | PASS | PASS | 427115.948 | 299.6592 | 14810.3679 |

##### 4.7.2.4 Model Rule Rates0865

Minimum condition(s):
- MODEL::ModelName EQUAL_TO DBX
- MODEL::NumberRuns LESS_THAN 5
- MODEL::NumberSeedVarianceRuns LESS_THAN 5

Target condition(s):
- MODEL::NumberSims GREATER_THAN_OR_EQUAL_TO 5000

NumberSims is the number of simulations to perform during pricing. At 2000 simulations, the seed variance is typically for non-compound options, 2.5% of time value. The seed variance is typically lower for european options than american style options. These seed variance numbers depend on the choice of Variance Reduction.

#### 4.7.3 CURVE

| Rule ID | | Minimal condition(s)/Condition(s) | Reference |
| --- | --- | --- | --- |
| Rates0853 | Target condition(s): | CURVE::SmoothFuturesExtrapolation IN FLAT, LINEAR, QUADRATIC | 4.7.3.1 |
| CURVE044 | Target condition(s): | CURVE::AVERAGINGCONVEXITY EQUAL_TO VOL | 4.7.3.2 |
| Inflation0007 | Target condition(s): | CURVE::INFLATIONINTERPOLATION IN FLAT, DIR, LINEAR, PWCONST_L, DIR_10, LINEAR_10, FLAT_15, PWCONST_L_15 | 4.7.3.3 |
| Inflation0008 | Target condition(s): | CURVE::BUILDMETHOD NOT_IN LINEAR_FORWARD, QUADRATIC_ZERO | 4.7.3.4 |
| Inflation0011 | Target condition(s): | CURVE::CashToFuture IN EXACT, EXACTCASH, EXACTCASH-1, CASHPRIORITY, LINEAR, NONE | 4.7.3.5 |
| Inflation0012 | Target condition(s): | CURVE::ExtrapMethod IN CONSTANT_FORWARD, CONSTANT_PAR, CONSTANT_ZERO, NATIVE | 4.7.3.6 |
| Inflation0013 | Target condition(s): | CURVE::CURVETYPE IN LIBOR, SPREAD, RBASSIS, CCYBASIS, BASIS | 4.7.3.7 |
| Inflation0014 | Target condition(s): | CURVE::OISUseRateBaseCurve IN NO, YES, HYBRID | 4.7.3.8 |
| Inflation0015 | Target condition(s): | CURVE::SmoothFutures IN NO, YES, BACKWARD, BACKWARDDAILY | 4.7.3.9 |
| Inflation0016 | Target condition(s): | CURVE::RecalibMethod IN APPROX, EXACT, EXACTFORCED | 4.7.3.10 |
| Inflation0017 | Target condition(s): | CURVE::SpotLiborUseBaseCurve IN NO, YES | 4.7.3.11 |
| Inflation0018 | Minimum condition(s): | CURVE::SPREADBUILDMETHOD NOT_LIKE "-" | 4.7.3.12 |
| | Target condition(s): | CURVE::SPREADBUILDMETHOD IN LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD | |
| Inflation0019 | Minimum condition(s): | CURVE::CASH::SPREADBUILDMETHOD NOT_LIKE "-" | 4.7.3.13 |
| | Target condition(s): | CURVE::CASH::SPREADBUILDMETHOD IN LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD | |
| Inflation0020 | Minimum condition(s): | CURVE::SPREADS::SPREADBUILDMETHOD NOT_LIKE "-" | 4.7.3.14 |
| | Target condition(s): | CURVE::SPREADS::SPREADBUILDMETHOD IN LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD | |
| Inflation0021 | Target condition(s): | CURVE::InflationSmoothDIR IN YES, NO | 4.7.3.15 |
| Inflation0022 | Target condition(s): | CURVE::CCYUseBaseCurve IN NO, YES | 4.7.3.16 |
| Inflation0023 | Target condition(s): | CURVE::USE_TYPE IN CROSSCCYSWAP, DISCOUNT, BASIS, LIBOR, INFLATION, TREASURY, CONVERTITY | 4.7.3.17 |
| Inflation0024 | Target condition(s): | CURVE::CASH::BASECURVE EQUAL_TO NONE | 4.7.3.18 |
| Inflation0027 | Target condition(s): | CURVE::InflationMethod EQUAL_TO EXACT | 4.7.3.19 |
| Inflation0028 | Minimum condition(s): | CURVE::BuildMethodCutOff LIKE "m | 4.7.3.20 |
model rule gives PASS flag, as expected, for all the allowed values of the parameter.

| CURVE::UseType | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| INFLATION | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| DISCOUNTBASIS | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| CROSSCCYSWAP | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| CONVERTIBILITY | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| TREASURY | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.18 Model Rule Inflation0024

Target condition(s):

* CURVE::CASH::BASECURVE EQUAL_TO NONE

When the SpotLiborSpreads subtable has the BaseCurve column, the Cash table needs to have the BaseCurve column too in order to define BaseCurve of the LIBOR cash in the Cash table. BaseCurve for RateType = OIS must be consistent what is implied by OISUseBaseCurve or UNSET. BaseCurve for RateType = LIBOR and Tenor = LiborBasis must be NONE, OIS or UNSET.

This just gives an alternative way to input the OIS rate and the OIS rate is thoroughly tested in the RateDeterministic MVR, we refer to the testing for the OIS rate in the document [4].

For the products priced using the current model as described in this MVR, no value other than NONE is supported for BaseCurve in CASH subtable. Pricing with BaseCurve = NONE produces PASS flag as expected by the rule. Following table is generated for the parameter value in the IR CURVE of the InfiAssetSwap trade.

| CURVE::CASH::BASECURVE | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| NONE | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.19 Model Rule Inflation0027

Target condition(s):

* CURVE::InflationMethod EQUAL_TO EXACT

The possible values are EXACT and APPROX (the default). For certain InflationInterpolation (particularly DIR), special treatment is required (e.g. modification of points used for curve building) if we wish to exactly recover prices of input instruments. But this can be less robust. EXACT means we want an EXACT fit notwithstanding robustness considerations.

The following table is obtained by modifying the parameter value in the IR Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::InflationMethod | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| EXACT | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.20 Model Rule Inflation0028

Minimum condition(s):

* CURVE::BuildMethodCutOff LIKE *m

Target condition(s):

* CURVE::BuildMethodCutOff (*)m LESS_THAN_OR_EQUAL_TO 48

The property BuildMethodCutOff is implemented for inflation curves with BuildMethod = HYBRID_CONSTANT_FORWARD, InflationInterpolation = FLAT and InflationQuoteType = MARKET. When a BuildMethodCutOff date is given, instruments with maturity date less than BuildMethodCutOff date are bootstrapped using CONSTANT_FORWARD method, while other instruments are bootstrapped using HYBRID_FORWARD method. The CutOff date must be bigger than the last cash maturity date (as all cash are always bootstrapped using CONSTANT_FORWARD).

We test for an inflation curve having BuildMethodCutOff = 37m, BuildMethod = HYBRID_CONSTANT_FORWARD, InflationInterpolation = FLAT and InflationQuoteType = MARKET. The results are satisfactory.

![Figure 292: When the BuildMethodCutOff is equal to 37m, the curve is built using the BuildMethod CONSTANT_FORWARD for the first 37 months (left) and with the method HYBRID_FORWARD from 37m on (right). The results are as expected.](./Fig/9.png)

The following table is obtained by modifying the parameter value in the Inflation Curve of the InflSwapYOY trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::BuildMethodCutOff | Actual Status | Expected Status | PV | EUR_FD | CPXTEMU_FD | EUR_PV |
| --- | --- | --- | --- | --- | --- | --- |
| 48m | PASS | PASS | 39352870.887 | 15055.3101 | -234602.4588 | 0 |
| 10m | PASS | PASS | 39352870.887 | 15055.3101 | -234602.4588 | 0 |
| 25m | PASS | PASS | 39352870.887 | 15055.3101 | -234602.4588 | 0 |
| 36m | PASS | PASS | 39352870.887 | 15055.3101 | -234602.4588 | 0 |

##### 4.7.3.21 Model Rule Inflation0029

Target condition(s):

* CURVE::OISDataCompression IN NO, YES

When set to YES, 1b WAVG OIS rates calculation in CURVE bootstrap (when OISSpreadType = WAVG) and pricing is speed up with an approximation: 1b WAVG is approximated by continuous WAVG.

For the parameter testing, refer to [4] document.

The following table is obtained by modifying the parameter value in the IR Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::OISDataCompression | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| YES | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| NO | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.22 Model Rule Inflation0030

Target condition(s):

* CURVE::TreasuryUseBaseCurve IN NO, YES

TreasuryUseBaseCurve controls usage of backbone curve for TREASURY discounting/forecasting.

For the parameter testing, refer to [4] document.

The following table is obtained by modifying the parameter value in the IR Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::TreasuryUseBaseCurve | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| YES | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| NO | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.23 Model Rule Inflation0031

(Correct the pattern from (*4D) to (*d) - CURVE_0007) Target condition(s):

* CURVE::NATURALTOLERANCE LIKE *d
* CURVE::NATURALTOLERANCE (*)[d] LESS_THAN_OR_EQUAL_TO 10

Tolerance (maximum tenor mismatch) allowed when mapping natural to libor rates.

The parameter is thoroughly tested in the document [4].

The following table is obtained by modifying the parameter value in the IR Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::NATURALTOLERANCE | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| 10d | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| 1m | FAIL | FAIL | -1.813069e+07 | -16520.0551 | 16047.3229 |
| 1w | FAIL | FAIL | -1.813069e+07 | -16520.0551 | 16047.3229 |
| 6d | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| 1d | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.24 Model Rule Inflation0032

Target condition(s):

* CURVE::InflationQuoteType IN MARKET, SEASONALITYADJUSTED

(2) BaseRateType = LIBOR:Tenor ... the curve from Cash/Futures/Swaps is LIBOR curve with Tenor. LiborBasis is ignored and internally set to Tenor. (3) BaseRateType = OIS ... the curve from Cash/Futures/Swaps is OIS CURVE. LiborBasis is ignored. (4) BaseRateType = OIS:RateIndexType ... the curve from Cash/Futures/Swaps is OIS CURVE with given RateIndexSubType. This is equivalent to setting BaseRateType OIS and BaseRateIndexSubType RateIndexType. CompFreq is introduced when BaseRateType = OIS. This determines compounding frequency of OIS.

The parameter is tested in the document [4].

The following table is obtained by modifying the parameter value in the IR Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::BaseRateType | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| LIBOR | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| OIS:SOFR | PASS | PASS | -1.889211e+07 | -16803.7569 | 16181.7586 |
| LIBOR:3M | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| OIS | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.26 Model Rule Inflation0034

Target condition(s):

* CURVE::TurnMethod IN CONSTANT_CASH, CONSTANT_FORWARD, PARALLEL_ZERO

The TurnMethod property dictates how rates should be calculated when one future completely encloses another, i.e. when an enclosing future both settles before and matures after another future - a situation that typically occurs when a turn future is enclosed by the December future. Even after both futures have been repriced, a further constraint is required to describe how the rates in the two segments of the enclosing future that neighbour the turn future are related.

The parameter is tested in the document [4].

The following table is obtained by modifying the parameter value in the IR Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::TurnMethod | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| PARALLEL_ZERO | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| CONSTANT_CASH | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| CONSTANT_FORWARD | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.27 Model Rule Inflation0035

Target condition(s):

* CURVE::ShortEndInflationInterpolation IN YOY, FLAT

ShortEndInflationInterpolation refers to interpolation applied for Swaps instruments with maturity less than 1y. It defaults to the same value as InflationInterpolation. In limited cases, however, we support a different value. Specifically, for InflationInterpolation DIR, for robustness reasons it may be better to use InflationInterpolation FLAT. Another possible value is YOY (Year-On-Year). When this value is used, the input instrument quotes YOY rates. This means the input levels and the risk should not be calculated or interpreted in the same way as in the longer term.

We test an UKRPI inflation curve having SettlementDate 05/02/2014, BuildMethod = HYBRID_CONSTANT_FORWARD, and we test InflationInterpolation = FLAT. We test the inflation index via the DBA function GetInflationValue for a period of 1 year and 1/2 from the SettlementDate in both cases ShortEndInflationInterpolation = FLAT and YOY. We can see that the values obtained for short end maturities (< 1 year) differ, whereas they agree for subsequent maturities, as expected.

![Figure 294: The inflation index of the UKRPI inflation curve under the two different values of ShortEndInflationInterpolation. For short end swaps maturities, between 1m and 1y the two methods give different values while the corresponding indexes coincide for 1Y up, as required.](./Fig/10.png)

The following table is obtained by modifying the parameter value in the Inflation Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::ShortEndInflationInterpolation | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| FLAT | PASS | PASS | -1.813182e+07 | -16520.1469 | 16041.6068 |
| YOY | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.28 Model Rule Inflation0036

Target condition(s):

* CURVE::HybridConstantForwardConnection IN LINEAR, QUADRATIC

The connection between the short end (built in CONSTANT_FORWARD) and the long end (HYBRID_FORWARD) of the curve is controlled by the flag HybridConstantForwardConnection. When set to QUADRATIC (default), the first instrument of the long end is built in ratio spline interpolation (curvature is calibrated). When set to LINEAR, the first instrument of the long end is built in linear interpolation (slope is calibrated) like the first instrument of HYBRID_FORWARD. LINEAR has less risk of oscillation or kinks at connection.

The parameter is tested in the document [4].

The following table is obtained by modifying the parameter value in the IR Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::HybridConstantForwardConnection | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| LINEAR | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| QUADRATIC | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.29 Model Rule Inflation0059

Target condition(s):

* CURVE::BUILDMETHOD IN CONSTANT_FORWARD, HYBRID_CONSTANT_FORWARD, HYBRID_FORWARD, LINEAR_ZERO, QUADRATIC_FORWARD

The property BuildMethod defines the method used to calculate implied rates at maturities between quoted market instruments - it is a mandatory property for an object of type CURVE.

For the analysis of the various BuildMethods used for an interest rate curve, we refer to [4].

For inflation curves, the property BuildMethod controls how inflation breakeven rates (in the Table "Spread") are used to calculate implied rates at maturities between quoted market instruments. The available methods for inflation curves are listed below:

* Hybrid_Constant_Forward
* Constant_Forward
* Hybrid_Forward
* Linear_Zero
* Quadratic_Forward

Although all these methods tend to evaluate the inflation curves in very similar fashions, some conspicuous differences can be observed when the inflation risk is concerned. The methods Hybrid_Constant_Forward, Hybrid_Forward, Constant_Forward and Linear_Zero produce curves that show the desired behaviour and yield similar results in evaluating the risks as a function of bumping the inflation curve at a given node, since for such interpolation methods the difference between the base inflation curve and the curve obtained by bumping the same curve at a single node is concentrated around the bumping node. On the other hand, the method Quadratic_Forward displays a slightly different pattern: when one of these methods is used, the same difference is spread over and "scattered" around a wider interval of time maturities. These methods are tested in detail in Sect. [4.1.6] We resume here the behaviour of each BuildMethod, and comparison with the generally used method Hybrid_Constant_Forward.

![Figure 295: Inflation index profile for the BuildMethods used in DBA to build the inflation curve using the DBA function GetInflationValue, for maturities spanning 10Y. For a detailed study of the various inflation risks related to each BuildMethod, see Sect. [4.1.6].](./Fig/11.png)

![Figure 296: The relative difference of the benchmark method HybridConstantForward with the methods ConstantForward (left) and HybridForward (right), obtained using the DBA GetInflationValue function. Note that the two coincide at the nodes of the interpolation (represented by the inflation breakeven rates). The method HybridConstantForward coincides with ConstantForward up to 37M and with HybridForward from 37M on, as expected.](./Fig/12.png)

![Figure 297: The relative difference of the benchmark method HybridConstantForward with the methods LinearZero (left) and QuadraticForward (right), obtained using the DBA GetInflationValue function. Note that the two coincide at the nodes of the interpolation (represented by the inflation breakeven rates), as expected.](./Fig/13.png)

The following table is obtained by modifying the parameter value in the IR Curve of the InfiAssetSwap trade. The corresponding PASS/FAIL flags are obtained to be the same as per the expectation set by the rule.

| CURVE::BUILDMETHOD | Actual Status | Expected Status | PV | USD_FD | USCPI_FD |
| --- | --- | --- | --- | --- | --- |
| HYBRID_CONSTANT_FORWARD | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| QUADRATIC_FORWARD | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| QUADRATIC_CONSTANT_FORWARD | FAIL | FAIL | -1.813069e+07 | -16520.0551 | 16047.3229 |
| LINEAR_ZERO | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| CONSTANT_FORWARD | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |
| HYBRID_FORWARD | PASS | PASS | -1.813069e+07 | -16520.0551 | 16047.3229 |

##### 4.7.3.30 Model Rule Inflation0060

Target condition(s):

* CURVE::AddPar IN NONE, LINEAR

The property AddPar is the interpolation technique used to insert implied par swap rates between quoted market swap rates.

The Property AddPar controls the interpolation technique used to insert implied par swap rates between quoted ones. Allowed values in production are NONE and LINEAR. DBA recommends not using the feature (i.e. using AddPar = NONE). The feature controls interpolation of swap rate levels by adding synthetic swap instruments whose maturities are from coupon dates of inputted swap instruments. The levels of these synthetic swap instruments are coming from interpolation in linear (AddPar = LINEAR). Test for this property is performed in the document [4] for the case of an Interest Rate curve. We test it here for an inflation UKRPI curve, having settlement date 05/02/2014, BuildMethodCutOff = 37M, using the DBA function GetInflationValue.
| No limitations | - | - | - | - |

Table 63: Compensating Control.

Table 64 details for each finding whether or not the compensating control is applied to mitigate the finding identified.

| Finding ID | Model Weakness | Compensating Control Methodology | Control Assessed |
| --- | --- | --- | --- |
| No open findings | - | - | - |

Table 64: Model Finding Uncertainty.

## 6 Control Assessment

When the pricing model is used as a servicer, please refer to top model validation report section on the control assessment of the servicer models.

### 6.1 Ongoing Performance Monitoring

The model performance monitoring relies on performance indicators defined by the Product Owners, product model users or control functions as necessary, to confirm that the model is performing as intended.

The following activities as linked to models are included in performance monitoring:

* Unexplained P&L due to model issues.
* Relative size of model reserves taken at product-model pair level (relative to PV and or trade count). Month-on-month changes in the value of a specific model reserve in excess of 1m euros automatically triggers further scrutiny.
* VC's output price testing results through IPV processes.
* Identification of risk instabilities produced by models.
11111
| ID | Rule | Business | Status | Last Change Date | Parameter Date |
| --- | --- | --- | --- | --- | --- |
| 1877 | Inflation0001 | CREDIT | Released/Approved | 2024-03-12 | 2017-06-12 |
| 1879 | Inflation0029 | INFLATION | Released/Approved | 2024-03-12 | 2019-06-27 |
| 1880 | Inflation0029 | INFLATION | Released/Approved | 2024-03-12 | 2019-06-19 |
| 1881 | Inflation0030 | INFLATION | Released/Approved | 2024-03-12 | 2019-06-19 |
| 1882 | Inflation0031 | RATES | Released/Approved | 2024-03-12 | 2019-06-27 |
| 1883 | Inflation0032 | CREDIT | Released/Approved | 2024-03-12 | 2019-06-19 |
| 1884 | Inflation0033 | INFLATION | Released/Approved | 2024-03-12 | 2020-07-29 |
| 1885 | Inflation0034 | INFLATION | Released/Approved | 2024-03-12 | 2019-06-27 |
| 1886 | Inflation0035 | CREDIT | Released/Approved | 2024-03-12 | 2020-07-07 |
| 1887 | Inflation0040 | INFLATION | Released/Approved | 2024-03-12 | 2020-06-29 |
| 1888 | Inflation0043 | INFLATION | Released/Approved | 2024-03-12 | 2019-07-27 |
| 1889 | Inflation0044 | INFLATION | Released/Approved | 2024-03-12 | 2019-07-27 |
| 1896 | Inflation0045 | INFLATION | Released/Approved | 2024-03-12 | 2020-06-09 |
| 1967 | Inflation-NUL8 | INFLATION | Released/Approved | 2024-03-12 | 2021-03-12 |

Target Condition(s): CURVE::InflationInterpolation in (FLAT, DIR, LINEAR, PWCONST_L, DIR_10, LINEAR_10, FLAT_15, PWCONST_L_15)

CIU ID: 795
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {DBAX_Version >= 449, VOL::VolType == CORR}
Target Condition(s): VOL::CorrelationInterpolationSpace != BERNSTEIN

CIU ID: 17775
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDING::Type == SPOTFX

CIU ID: 17776
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::RangeOfSpreadCalcMethod == EXACT

CIU ID: 17779
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::StabMaxFraction == 0.25

CIU ID: 17773
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::FrontLatticeFreq unset

CIU ID: 17777
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::FreqTimeVec unset

CIU ID: 17774
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::DecayTime unset

CIU ID: 1321
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::BuildMethod not in (LINEAR_FORWARD, QUADRATIC_ZERO)

CIU ID: 11860
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::AddPar in (NONE, LINEAR)

CIU ID: 11861
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::BuildMethod in (CONSTANT_FORWARD, HYBRID_CONSTANT_FORWARD, HYBRID_FORWARD, LINEAR_ZERO, QUADRATIC_FORWARD)

CIU ID: 11862
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::CashToFuture in (EXACT, EXACTCASH, EXACTCASH-1, CASHPRIORITY, LINEAR, NONE)

CIU ID: 11863
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::ExtraMethod in (CONSTANT_FORWARD, CONSTANT_PAR, CONSTANT_ZERO, NATIVE)

CIU ID: 11864
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::CurveType in (LIBOR, SPREAD, RBASIS, CCYBASIS, BASIS)

CIU ID: 11865
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::OISUseBaseCurve in (NO, YES, HYBRID)

CIU ID: 11866
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::SmoothFutures in (NO, YES, BACKWARD, BACKWARDDAILY)

CIU ID: 11867
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::RescaleMethod in (APPROX, EXACT, EXACTFORCED)

CIU ID: 11868
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::SpotLiborUseBaseCurve in (NO, YES)

CIU ID: 11869
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::SpreadBuildMethod not like "-"
Target Condition(s): CURVE::SpreadBuildMethod in (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD)

CIU ID: 11870
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::Cash::SpreadBuildMethod not like "-"
Target Condition(s): CURVE::Cash::SpreadBuildMethod in (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD)

CIU ID: 11871
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::Spreads::SpreadBuildMethod not like "-"
Target Condition(s): CURVE::Spreads::SpreadBuildMethod in (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD)

CIU ID: 11872
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::InflationSmoothDIR in (YES, NO)

CIU ID: 11873
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::CCYUseBaseCurve in (NO, YES)

CIU ID: 11874
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::UseType in (CROSSCCYSWAP, DISCOUNTBASIS, LIBOR, INFLATION, TREASURY, CONVERTIBILITY)

CIU ID: 11875
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::Cash::BaseCurve == NONE

CIU ID: 11876
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::InflationMethod == EXACT

CIU ID: 11878
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::BuildMethodCutOff like "m"
Target Condition(s): CURVE::BuildMethodCutOff [*]m <= 48

CIU ID: 11880
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::OISDate Compression in (NO, YES)

CIU ID: 11881
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::TreasuryUseBaseCurve in (NO, YES)

CIU ID: 11882
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {CURVE::NaturalYearsInc like "d", CURVE::NaturalYearsInc [*]d} <= 10

CIU ID: 11883
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::InflationQuoteType in (MARKET, SEASONALITYADJUSTED)

CIU ID: 11884
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::UseType in (DISCOUNTBASIS, LIBOR)
Target Condition(s): CURVE::BaseRateType in (LIBOR, LIBOR-*, OIS, *OIS-*)

CIU ID: 11885
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::TurnMethod in (CONSTANT_CASH, CONSTANT_FORWARD, PARALLEL_ZERO)

Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::ShortEndInflationInterpolation in (NO!, FLAT)

CIU ID: 11891
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::VarianceReduction in (ANTITHETIC, ANTITHETICPURE, ORTHOGONAL)

CIU ID: 11894
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::IntegrationFreq >= 12

CIU ID: 11895
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): FIXING::NaturalTolerance like "e"
Target Condition(s): FIXING::NaturalTolerance [*]e <= 1

CIU ID: 11896
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): MODEL::ModelName == DBOPT
Target Condition(s): MODEL::ModelMode in (PRICE, PRICEVALUETODAY)

CIU ID: 11897
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): FIXING::NaturalTolerance like "d"
Target Condition(s): FIXING::NaturalTolerance [*]d <= 10

CIU ID: 11898
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FIXING::InterpolateNatural in (YES, NO)

CIU ID: 11899
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::HybridConstantForwardConnection in (LINEAR, QUADRATIC)

CIU ID: 11900
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): MKTDATA::Type == INFLATION
Target Condition(s): MKTDATA::Interpolation in (DIR, DIR_*, FLAT, FLAT_*)

CIU ID: 11900
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): MODEL::RecalibCurves in (NO, YES)

CIU ID: 17778
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::AveragingConvexity == VOL

CIU ID: 797
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {DBAX_Version >= 449, VOL::VolType == CORR}
Target Condition(s): VOL::CorrelationInterpolationSpace != DENSITYSKEW

CIU ID: 1026
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): VOL::AnnuityMappingModel exists
Target Condition(s): VOL::AnnuityMappingModel != MULTIFACTORNONLINEAR

CIU ID: 1027
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): VOL::ReplicateCashOVG1 exists
Target Condition(s): VOL::ReplicateCashOVG1 != 3

CIU ID: 1028
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): MODEL::MinimumPayoffSmoothingWedge not exists

CIU ID: 1029
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): MODEL::PayoffSmoothingUseTimeScaling not exists

CIU ID: 1030
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): MODEL::PayoffSmoothing == YES
Target Condition(s): MODEL::SmoothCinetKSpreadPayoff != YES

CIU ID: 1031
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {VOL::NormalizeBlendTable::AoWishSpread not exists, VOL::NormalizeBlendTable::Strike not exists}

CIU ID: 20893
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CMT::CMTMode == MATRIX

CIU ID: 20894
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::SMOOTHFUTURESEXTRAPOLATION in (FLAT, LINEAR, QUADRATIC)

##### 6.2.1.2 DBX-RateDeterministic_InflationDeterministic

Table [120] and the subsequent listing provide the Conditions for Use for the model parameter rules that apply to the DBX-RateDeterministic_InflationDeterministic model.

| ID | Rule | Business | Status | Last Change Date | Parameter Date |
| --- | --- | --- | --- | --- | --- |
| 795 | Equities0003 | EQUITY | Approved/Approved | 2024-03-12 | 2017-04-05 |
| 797 | Rates0079 | RATES | Approved/Approved | 2024-03-12 | 2017-04-05 |
| 1026 | Rates0085 | RATES | Approved/Approved | 2024-03-12 | 2017-02-09 |
| 1027 | Rates0086 | RATES | Approved/Approved | 2024-03-12 | 2014-06-26 |
| 1031 | Rates0090 | RATES | Approved/Approved | 2024-03-12 | 2017-11-10 |
| 1320 | Inflation0007 | INFLATION | Approved/Approved | 2024-03-12 | 2018-02-13 |
| 1321 | Inflation0008 | INFLATION | Approved/Approved | 2024-03-12 | 2018-07-10 |
| 11860 | Inflation0009 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11861 | Inflation0059 | INFLATION | Approved/Approved | 2024-03-12 | 2018-07-10 |
| 11862 | Inflation0011 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11863 | Inflation0012 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11864 | Inflation0013 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11865 | Inflation0014 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11866 | Inflation0015 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11867 | Inflation0016 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11868 | Inflation0017 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11869 | Inflation0018 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11870 | Inflation0019 | RATES | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11871 | Inflation0020 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |
| 11872 | Inflation0021 | CREDIT | Approved/Approved | 2024-03-12 | 2020-06-12 |
| 11873 | Inflation0022 | INFLATION | Approved/Approved | 2024-03-12 | 2018-06-27 |


| ID | Rule | Business | Status | Last Change Date | Parameter Date |
| --- | --- | --- | --- | --- | --- |
| 11874 | Inflation0023 | INFLATION | Approved/Approved | 2024-03-12 | 2017-02-14 |
| 11875 | Inflation0024 | INFLATION | Approved/Approved | 2024-03-12 | 2019-06-27 |
| 11878 | Inflation0027 | CREDIT | Approved/Approved | 2024-03-12 | 2020-06-12 |
| 11879 | Inflation0028 | INFLATION | Approved/Approved | 2024-03-12 | 2020-06-12 |
| 11880 | Inflation0029 | INFLATION | Approved/Approved | 2024-03-12 | 2019-04-19 |
| 11881 | Inflation0030 | INFLATION | Approved/Approved | 2024-03-12 | 2019-06-11 |
| 11882 | Inflation0031 | RATES | Approved/Approved | 2024-03-12 | 2019-06-27 |
| 11883 | Inflation0032 | CREDIT | Approved/Approved | 2024-03-12 | 2020-06-12 |
| 11884 | Inflation0033 | INFLATION | Approved/Approved | 2024-03-12 | 2020-07-09 |
| 11885 | Inflation0034 | INFLATION | Approved/Approved | 2024-03-12 | 2019-06-27 |
| 11886 | Inflation0035 | CREDIT | Approved/Approved | 2024-03-12 | 2020-06-12 |
| 11887 | Inflation0036 | INFLATION | Approved/Approved | 2024-03-12 | 2019-06-27 |
| 11891 | Inflation0040 | INFLATION | Approved/Approved | 2024-03-12 | 2020-06-12 |
| 11894 | Inflation0043 | INFLATION | Approved/Approved | 2024-03-12 | 2020-06-12 |
| 11895 | Inflation0044 | INFLATION | Approved/Approved | 2024-03-12 | 2019-07-27 |
| 11897 | Inflation0046 | INFLATION | Approved/Approved | 2024-03-12 | 2019-07-27 |
| 11898 | Inflation0047 | CREDIT | Approved/Approved | 2024-03-12 | 2019-05-03 |
| 11908 | Inflation0057 | INFLATION | Approved/Approved | 2024-03-12 | 2020-07-09 |
| 17773 | FUNDINGVOL0021 | RATES | Approved/Approved | 2024-03-12 | 2021-06-24 |
| 17774 | FUNDINGVOL0023 | RATES | Approved/Approved | 2024-03-12 | 2021-06-24 |
| 17775 | FUNDING0001 | CREDIT | Approved/Approved | 2024-03-12 | 2021-06-24 |
| 17776 | FUNDINGVOL0019 | RATES | Approved/Approved | 2024-03-12 | 2021-06-24 |
| 17777 | FUNDINGVOL0022 | RATES | Approved/Approved | 2024-03-12 | 2021-06-24 |
| 17778 | CURVE0044 | RATES | Approved/Approved | 2024-03-12 | 2021-06-24 |
| 17779 | FUNDINGVOL0020 | RATES | Approved/Approved | 2024-03-12 | 2021-06-11 |
| 18730 | Basis10003 | FX | Approved/Approved | 2024-03-12 | 2021-09-24 |
| 20893 | Rates0852 | RATES | Approved/Approved | 2024-03-12 | 2019-06-27 |
| 20894 | Rates0853 | RATES | Approved/Approved | 2024-03-12 | 2021-09-24 |
| 20906 | Rates0863 | RATES | Approved/Approved | 2024-03-12 | 2019-01-06 |
| 20907 | Rates0864 | RATES | Approved/Approved | 2024-03-12 | 2019-04-18 |
| 20908 | Rates0865 | RATES | Approved/Approved | 2024-03-12 | 2019-04-18 |
| 20909 | Rates0866 | RATES | Approved/Approved | 2024-03-12 | 2019-04-18 |

Table 120: CFU rules for DBX-RateDeterministic_InflationDeterministic. Status: Status of the Subcondition and Condition for Use. Last Change Date: Date when there was a last change of the Condition for Use. ParamInfo Date: The last date when any parameter used in the CFU was created or updated, corresponds to the ParamInfo dependency date. The table is generated from MARS data available at 12/03/2024 11:31

CIU ID: 795
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {DBAX_Version >= 449, VOL::VolType == CORR}
Target Condition(s): VOL::CorrelationInterpolationSpace != BERNSTEIN

CIU ID: 797
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {DBAX_Version >= 449, VOL::VolType == CORR}
Target Condition(s): VOL::CorrelationInterpolationSpace != DENSITYSKEW

CIU ID: 1026
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): VOL::AnnuityMappingModel exists
Target Condition(s): VOL::AnnuityMappingModel != MULTIFACTORNONLINEAR

CIU ID: 1027
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): VOL::ReplicateCashOVG1 exists
Target Condition(s): VOL::ReplicateCashOVG1 != 3

CIU ID: 1031
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {VOL::NormalizeBlendTable::AtoWishSpread not exists, VOL::NormalizeBlendTable::Strike not exists}

CIU ID: 1320
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::InflationInterpolation in (FLAT, DIR, LINEAR, PWCONST_L, DIR_10, LINEAR_10, FLAT_15, PWCONST_L_15)

CIU ID: 1321
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::BuildMethod not in (LINEAR_FORWARD, QUADRATIC_ZERO)

CIU ID: 11860
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::AddPar in (NONE, LINEAR)

CIU ID: 11861
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::BuildMethod in (CONSTANT_FORWARD, HYBRID_CONSTANT_FORWARD, HYBRID_FORWARD, LINEAR_ZERO, QUADRATIC_FORWARD)

CIU ID: 11862
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::CashToFuture in (EXACT, EXACTCASH, EXACTCASH-1, CASHPRIORITY, LINEAR, NONE)

CIU ID: 11863
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::ExtraMethod in (CONSTANT_FORWARD, CONSTANT_PAR, CONSTANT_ZERO, NATIVE)

CIU ID: 11864
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::CurveType in (LIBOR, SPREAD, RBASIS, CCYBASIS, BASIS)

CIU ID: 11865
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::OISUseBaseCurve in (NO, YES, HYBRID)

CIU ID: 11866
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::SmoothFutures in (NO, YES, BACKWARD, BACKWARDDAILY)

CIU ID: 11867
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::RescaleMethod in (APPROX, EXACT, EXACTFORCED)

CIU ID: 11868
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::SpotLiborUseBaseCurve in (NO, YES)

CIU ID: 11869
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::SpreadBuildMethod not like "-"
Target Condition(s): CURVE::SpreadBuildMethod in (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD)

CIU ID: 11870
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::Cash::SpreadBuildMethod not like "-"
Target Condition(s): CURVE::Cash::SpreadBuildMethod in (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD)

CIU ID: 11871
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::Spreads::SpreadBuildMethod not like "-"
Target Condition(s): CURVE::Spreads::SpreadBuildMethod in (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD)

CIU ID: 11872
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::InflationSmoothDIR in (YES, NO)

CIU ID: 11873
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::CCYUseBaseCurve in (NO, YES)

CIU ID: 11874
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::UseType in (CROSSCCYSWAP, DISCOUNTBASIS, LIBOR, INFLATION, TREASURY, CONVERTIBILITY)

CIU ID: 11875
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::Cash::BaseCurve == NONE

CIU ID: 11876
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::InflationMethod == EXACT

CIU ID: 11878
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::BuildMethodCutOff like "m"
Target Condition(s): CURVE::BuildMethodCutOff [*]m <= 48

CIU ID: 11880
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::OISDate Compression in (NO, YES)

CIU ID: 11881
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::TreasuryUseBaseCurve in (NO, YES)

CIU ID: 11882
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {CURVE::NaturalYearsInc like "d", CURVE::NaturalYearsInc [*]d} <= 10

CIU ID: 11883
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::InflationQuoteType in (MARKET, SEASONALITYADJUSTED)

CIU ID: 11884
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): CURVE::UseType in (DISCOUNTBASIS, LIBOR)
Target Condition(s): CURVE::BaseRateType in (LIBOR, LIBOR-*, OIS, *OIS-*)

CIU ID: 11885
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::TurnMethod in (CONSTANT_CASH, CONSTANT_FORWARD, PARALLEL_ZERO)

Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::ShortEndInflationInterpolation in (NO!, FLAT)

CIU ID: 11891
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::VarianceReduction in (ANTITHETIC, ANTITHETICPURE, ORTHOGONAL)

CIU ID: 11894
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::IntegrationFreq >= 12

CIU ID: 11895
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): FIXING::NaturalTolerance like "e"
Target Condition(s): FIXING::NaturalTolerance [*]e <= 1

CIU ID: 11897
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): FIXING::NaturalTolerance like "d"
Target Condition(s): FIXING::NaturalTolerance [*]d <= 10

CIU ID: 11898
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FIXING::InterpolateNatural in (YES, NO)

CIU ID: 11899
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): MKTDATA::Type == INFLATION
Target Condition(s): MKTDATA::Interpolation in (DIR, DIR-*, FLAT, FLAT-*)

CIU ID: 17773
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::FrontLatticeFreq unset

CIU ID: 17774
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::DecayTime unset

CIU ID: 17775
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDING::Type == SPOTFX

CIU ID: 17776
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::RangeOfSpreadCalcMethod == EXACT

CIU ID: 17777
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::FreqTimeVec unset

CIU ID: 17778
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::AveragingConvexity == VOL

CIU ID: 17779
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): FUNDINGVOL::StabMaxFraction == 0.25

CIU ID: 18730
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): VOL::DIFFUSEFIXLDRIVER == NO

CIU ID: 20893
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CMT::CMTMode == MATRIX

CIU ID: 20894
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s):
Target Condition(s): CURVE::SMOOTHFUTURESEXTRAPOLATION in (FLAT, LINEAR, QUADRATIC)

CIU ID: 20906
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): MODEL::ModelName == DBX
Target Condition(s): MODEL::NumberRuns == 1

CIU ID: 20907
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): MODEL::ModelName == DBX
Target Condition(s): MODEL::NumberRuns == 1000

CIU ID: 20908
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): AND {MODEL::ModelName == DBX, MODEL::NumberRuns >= 2, MODEL::NumberSeedVarianceRuns <= 5}
Target Condition(s): MODEL::NumberRuns == 1000

CIU ID: 20909
Configuration: all configurations
PRDS Product(s): all products
Minimum Condition(s): MODEL::ModelName == DBX
Target Condition(s): MODEL::NumberSeedVarianceRuns == 1

#### 6.2.2 Stress Testing Parameter Ranges

Table [174] provides the risk factor shifts for all products in the EOD, CCAR 2020, IRRRB testing.

| Class | IRCURVE SWAP | INFLATIONCURVE SWAP |
| --- | --- | --- |
| EOD | [-5%, +5%] Abs. Shift | [-5%, +5%] Abs. Shift |
| CCAR | [-5%, +5%] Abs. Shift | [-5%, +5%] Abs. Shift |
| IRRRB | [-15%, +15%] Abs. Shift | [-15%, +15%] Abs. Shift |

Table 174: Ranges for IR and Inflation Curve Stress Testing.

### 6.3 Usage Controls

model usage exceptions. As per model use section of the pricing model risk policy, the usage exceptions in the Model Usage Exception Report are reported under the following categories:

- Model Exception (use of an unapproved model is based on approved model inventory in MARS).
- P-M Exception (product not approved for the approved model selected is based on approved product-model approval inventory in PRDS).
- Blank PRDS Product (trade not tagged with a PRDS product name).
- Model Parameter Usage Exceptions (trade using model parameter values which are not allowed based on prescribed conditions for use is based on MARS CIU/model rules).
- Unapproved dispersion.

Model and product combinations that have not been approved through MoRMs validation processes as well as retired and superseded models cannot be used by product model users for books and records fair value measurements or external risk reporting.

Interim controls are put in place over exceptions to manage, monitor and mitigate the risk of inappropriate or inaccurate model usage by product-model users. Exceptions must be remediated within a defined threshold period. Remediation activities could include a trade re-booking or the migration of a trade to an approved model. The validity of product tags assigned to trades by product-model users is independently verified by MRC through the Product Tagging Validation or PTV process.

### 6.4 Change Control

For Pricing models, implementation refers to DBA releases and deployment refers to integrating them into risk calculators.

The DBAnalytics code which is comprised of the C++ modelling/interface code, the test drivers files, the regression test files, their benchmark results, and the OnlineHelp are all maintained in source control suitable repositories. The code is labeled as releases are made and classified as part of the pricing model change process.

DBAnalytics are responsible for the daily production of binary executables for DEV, BETA, and PROD to the library. These are available from DBA website for download. The actual deployment of these binaries into the systems for official end-of-day PnL is the responsibility of the technology teams who maintain those systems. Since DBA is a common analytic to all systems and the model change will be applicable to all (whilst at different time horizon according to system release), the pricing model change usage control key principle relies on:

- The pricing model change process including classification and validation of model change. DBA will create a model parameter to enable and or disable the impact of model change. Model risk will control the release of the model change by adding a model parameter rule for any model change pending review.

- Monitoring model usage controls through continuous tracking of trades to detect the use of unapproved models.

- Implementation controls through mandatory use of strategic risk library and calculators, source control and release procedure.

### 6.5 Results from Annual Model Review

SR11.7 introduces the concept of an annual model review for each model as follows: Banks should conduct a periodic review - at least annually but more frequently if warranted - of each model to determine whether it is working as intended and if the existing validation activities are sufficient. Such a determination could simply affirm previous validation work, suggest updates to previous validation activities, or call for additional validation activities. All existing models within the approved model inventory must be subject to the Annual Model Review to determine whether the models continue to be valid and appropriate for the intended use given current market conditions, and whether associated controls remain sufficient. The performance of all active pricing models is assessed over the course of the year through on-going model performance monitoring.

As per the policy, the annual model review will consider

- Proposed global Model Risk Scorecard overrides to inherent risk rating : None.

- Model performance: Please refer to section Section[5.1]
  With the exception of the issues listed and described below (please list and describe relevant instances reported including subsequent completed actions) ongoing performance monitoring reported in 2020 did not reveal unexpected or inaccurate results attributable to model performance.

- Other relevant indicators not captured by the above, such as:
  - Changes in academic theory related to modelling that would require new models/changes to existing models:
    None identified.
  - Changes in the market that have rendered some model assumptions to be inappropriate or insufficient:
    None observed.
  - Model development regression testing indicated potential issues with the model:
    None observed.

Approval Decision: the annual model review process proposed outcome was that the DBOPT-RateDeterministic_InflationDeterministic was re-attested by the MCWG.

## 7 Document Change History

### 7.1 Change History Post July 15, 2015

| Revision | Author | Date | Comment |
| --- | --- | --- | --- |
| r12332 | shawn ge | 2015-07-20 | Server one-off process for SVN injection. |
| r14330 | vicente mataix pastor | 2015-10-22 | Adding stress test section. |
| r14640 | vicente mataix pastor | 2015-11-12 | Forgot to add picture for stress test. |
| r14643 | vicente mataix pastor | 2015-11-12 | Adding InflSwapYOY product to MVR. |
| r14644 | vicente mataix pastor | 2015-11-12 | Fixed typo from previous commit. |
| r14869 | vicente mataix pastor | 2015-11-25 | Added InflAssetSwap product to DBOPT-RateDeterministic_InflationDeterministic_MVR.tex. |
| r15078 | vicente mataix pastor | 2015-12-01 | Making InflSwapZC, YoY and Asset swap preferred products. |
| r15083 | vicente mataix pastor | 2015-12-01 | Adding YoY and InflAssetSwap products. |
| r18358 | andre loerx | 2016-04-18 | Rename MVR for DBOPT-RateDeterministic_InflationDeterministic. |
| r18358 | andre loerx | 2016-04-18 | Rename MVR for DBOPT-RateDeterministic_InflationDeterministic. |
| r29788 | ching hwa eu | 2017-06-02 | added InflSwapZC to the list of approved products for DS4 (without convexity adjustment) |
| r46725 | luigi previdi | 2018-05-11 | Added testing and preferred model for product IRSwapRealRate |
| r48832 | deepak baskaran | 2018-05-24 | 2018 Q2 Revalidation. New sections and testing added. Document formatted to follow the current template. |
| r50651 | luigi previdi | 2018-07-02 | Added Interpolation Methods Comparison section |
| r51134 | deepak baskaran | 2018-07-16 |  |
| r51135 | deepak baskaran | 2018-07-16 | 2018Q2 Revalidation. New testing added. Conditions of Use updated. |
| r51267 | deepak baskaran | 2018-07-18 | Added new Model Rules to Conditions for Use. |
| r51297 | deepak baskaran | 2018-07-19 |  |
| r51800 | marek oleksiewicz | 2018-07-31 | mars tables injected |
| r52050 | luigi previdi | 2018-08-06 | Added CCCAR 2017 testing |
| r52475 | luigi previdi | 2018-08-17 | Added CCAR 2017 testing, Conceptual Soundness section. Pythonized Excel files. |
| r53282 | olekmar | 2018-09-12 | risk tables updated, please delete old manually |
| r53826 | baskdee | 2018-09-18 | Minor typos corrected. |
| r53827 | baskdee | 2018-09-18 | Minor typos corrected. Log file linking error corrected. |
| r54458 | baskdee | 2018-10-01 | Updated Executive Summary to add CfU and Findings. |
| r54571 | baskdee | 2018-10-02 | Updated Executive Summary to add CfU and Findings. |
| r55454 | baskdee | 2018-10-09 | Changes to Table of Contents to fully reflect the scope of conducted tests. |
| r55601 | baskdee | 2018-10-10 | Changes to Table of Contents to fully reflect the scope of conducted tests. |
| r56026 | baskdee | 2018-10-29 | Added new tables to Model Limitations and Condition for Use Sections. Modified Section numbering, and added details to List of Contents. |
| r56034 | baskdee | 2018-10-29 | Added 2D PnL Explain for Product Testing and CCAR Testing. |
| r56046 | baskdee | 2018-10-30 | Minor Corrections to Model Testing Section to reflect conducted testing. |
| r57731 | euchi | 2019-01-29 | Added testing for InflationInterpolation = LINEAR-10. |
| r59709 | euchi | 2019-08-07 | Added testing for InflationInterpolation = FLAT-15. |
| r59878 | euchi | 2019-09-03 | Added SVAR testing |
| r59899 | euchi | 2019-09-09 | changed the link to SVN logs |
| r59910 | euchi | 2019-09-10 | added IRRRB testing |
| r60050 | lautgia | 2019-09-30 | Updated template and added extra testings. |
| r60075 | runaeri | 2019-10-04 | Template Update Additional Testing |
| r60087 | runaeri | 2019-10-07 | Revalidation Q3.2019 |
| r60142 | runaeri | 2019-10-11 | Updated Model Inventory |
| r60293 | prevlui | 2019-11-01 | Updated template; added MARS tables |
| r60308 | prevlui | 2019-11-04 | Updated Executive Summary |
| r61679 | prevlui | 2020-08-12 | Added model parameter testing and section |
| r61680 | prevlui | 2020-08-13 | Added CfUs for model parameters |
| r61684 | prevlui | 2020-08-13 | Forgot file in the last commit |
| r63512 | roymadh | 2021-04-14 |  |
| r63513 | roymadh | 2021-04-14 |  |
| r63515 | roymadh | 2021-04-14 | Adding Bilateral clearing spread report |
| r63517 | prevlui | 2021-04-15 | Added testing section on Inflation Bilateral Clearing Spreads as per Mars request 2021Feb25-LIMZHOU-16823 |
| r63704 | prevlui | 2021-05-11 | Added Multivar testing for EOD products |
| r63707 | prevlui | 2021-05-12 | Expanded Executive Summary |
| r64089 | prevlui | 2021-07-20 | Q3 2021 revalidation in progress. Re-tested EOD, Taylor tesing and CCAR2020 under DBA v.970 |
| r64138 | prevlui | 2021-08-19 | Q3 2021 revalidation. Tested all products for: EOD, CCAR 2020, Multivar, Taylor, IRRRB and updated Product/Model inventory |
| r64237 | banhdir | 2021-09-24 | Update CCAR 2020 shocks from midcycle to annual cycle |
| r64356 | banhdir | 2021-10-04 | Migration to new MVR template. |
| r64405 | banhdir | 2021-10-11 | Minor change of reference to a section. |
| r64596 | banhdir | 2021-11-03 | Resolved tagging issue for reconciliation. |

### 7.2 Change History Prior July 15, 2015

| Date | Change | DBA version |
| --- | --- | --- |
| 04-April-2014 | Initial version. | v190 |
| 01-July-2014 | Test for InflationInterpolation.MODFLAT | v210 |

## References

[1] DBA Quant, "Model Document", DB Internal paper, December (2016).
[2] Pricing Model Validation Key Operating Principles, Model Risk Management.
[3] DBAnalytics, CURVE and CMT Object Primer. Type III Document, DBAnalytics Research Paper 8732.
[4] GMVG, MVR RateDeterministic, Validation Document (2013).
[5] GMVG, MVR DBOPT-RatesMarket_AFSABR, Validation Document.
[6] GMVG, MVR DBOPT-RatesMarketCorr, Validation Document (2013).
[7] DB Analytics, Inflation Curve in DBAnalytics (Including Usage in Term Structure Modelling and Treatment for Exposure Calculations), FO document, 2013.
[8] Jeron Kerkhof, Inflation Derivatives Explained: Markets, Products, Pricing, Lehman Brothers (July 2005).
[9] GMVG DS4 Yield curve with Funding volatility , Validation Document 2016.
[10] Andersen, L.B.G. and Piterbarg, V.V., Interest Rate Modelling, Volume 3: Products and Risk Management, Atlantic Financial Press, 2010.
[11] Hiromitsu Takayanagi, Standardized Shock Primer, Type iii document, Deutsche Bank, September 2016.
[12] GMS, IRCurve Full-revaluation Risk Factor Model. Full Validation-MR PST Model ID 2404, Deutsche Bank, October 2017
[13] GMS, IRDBMVOL Full-revaluation Risk Factor Model. Full Validation MR PST Model ID 2405, Deutsche Bank, November 2017
[14] GMS, IRDBSPTVOL Full-revaluation Risk Factor Model, Full Validation MR PST Model ID 2406, Deutsche Bank, December 2017
[15] GMS, FXSpot/Report/FXSpot Full-revaluation Risk, Full Validation MR PST Model ID 2413, Deutsche Bank, October 2017.
[16] GMS, FXMARKETVOL Full-revaluation Risk Factor Model, Full Validation MR PST Model ID 2414, Deutsche Bank, December 2017.
[17] Basel Committee on Banking Supervision, Interest rate in the banking book, Bank for International Settlements, April 2016.
[18] Model Parameter Testing, MoRM, April 2023.