# DBOPT - Rate Deterministic & Inflation Deterministic Models

## üìã **Vue d'Ensemble**

Le mod√®le **DBOPT-RateDeterministic_InflationDeterministic** est un framework de pricing d√©terministe utilis√© pour l'√©valuation de produits financiers d√©pendant des taux d'int√©r√™t et de l'inflation sans optionalit√©. Ce mod√®le fait partie de la biblioth√®que DBAnalytics et constitue une m√©thodologie avanc√©e pour le pricing de titres ayant une solution analytique ferm√©e.

---

## üéØ **Caract√©ristiques Principales**

### **Mod√®les Couverts**
- **DBOPT-RateDeterministic_InflationDeterministic**
- **DBX-RateDeterministic_InflationDeterministic**

### **Produits Support√©s**
- **InflSwapZC*** - Inflation Zero Coupon Swaps
- **InflSwapYOY*** - Inflation Year-on-Year Swaps
- **InflAssetSwap*** - Inflation Asset Swaps
- **IRSwapRealRate*** - Interest Rate Real Rate Swaps
- **IRIndexSingle_INFLATION*** - Single Inflation Index

### **Usages Approuv√©s**
- ‚úÖ **End of Day (EOD)** - √âvaluation et gestion des risques
- ‚úÖ **VaR/HistSim/Multivariate** - Calculs de Value at Risk
- ‚úÖ **CCAR** - Tests de stress r√©glementaires
- ‚úÖ **IRRBB** - Interest Rate Risk in Banking Book

---

## üèóÔ∏è **Architecture du Framework**

### **Approche D√©terministe**
Le framework utilise une approche d√©terministe o√π :
- Les **taux d'int√©r√™t** sont des fonctions d√©terministes du temps
- L'**inflation** suit un mod√®le d√©terministe sans volatilit√©
- Le **pricing** est bas√© sur des arguments d'arbitrage sans volatilit√©

### **Composants Techniques**
```cpp
// Exemple d'impl√©mentation de courbe d'inflation dans Our project
class inflation_curve : public market_data {
private:
    datetime base_date_;
    ptr<interpolator<std::vector<double>, datetime, double>> inverse_dfs_;
    std::vector<double> seasonality_adjustment_;
    ptr_const<inflation_fixing> historic_fixings_;

public:
    double cpi(const datetime& to, const tenor& observation_lag) const;
    void initialize();
};
```

---

## üìä **√âvaluation des Risques**

### **Global Model Risk Assessment**

| Crit√®re | Rating | Justification |
|---------|--------|---------------|
| **Complexit√©** | LOW(1)/LOW(2) | Jugement SME du validateur |
| **Incertitude** | LOW(1)/LOW(2) | M√©thodologies sans faiblesses majeures |
| **D√©pendance** | HIGH(1)/HIGH(2) | Mod√®les de pricing √† forte d√©pendance |

---

## üìö **Documentation D√©taill√©e**

```{toctree}
:maxdepth: 2
:caption: Documentation DBOPT

executive_summary
introduction_model_validation
model_calibration_risk_sensitivities
model_change_description
validation_outline
detailed_model_testing
independent_validation_testing
product_testing_inflassetswap
product_testing_inflswapyoy
```

### **Sections Principales**

#### **üìã Documentation Fondamentale**
- **[Executive Summary](executive_summary.md)** - R√©sum√© ex√©cutif et √©valuation globale des risques
- **[Introduction & Model Validation](introduction_model_validation.md)** - Scope, description des produits et m√©thodologie
- **[Model Calibration & Risk Sensitivities](model_calibration_risk_sensitivities.md)** - Calibration et calcul des sensibilit√©s
- **[Model Change Description](model_change_description.md)** - Gestion des changements et √©volutions du mod√®le
- **[Validation Outline](validation_outline.md)** - Plan de validation et m√©thodologies de test

#### **üî¨ Tests et Validation D√©taill√©s**
- **[Detailed Model Testing](detailed_model_testing.md)** - Tests sp√©cifiques d√©taill√©s du mod√®le (interpolation, d√©lai, saisonnalit√©)
- **[Independent Validation Testing](independent_validation_testing.md)** - Tests de validation ind√©pendants et frameworks r√©glementaires

#### **üìä Tests de Produits Sp√©cifiques**
- **[Product Testing: InflAssetSwap](product_testing_inflassetswap.md)** - Tests complets pour Inflation Asset Swaps
- **[Product Testing: InflSwapYOY](product_testing_inflswapyoy.md)** - Tests complets pour Inflation Year-on-Year Swaps

---

## üîß **Impl√©mentation Technique Avanc√©e**

### **Courbes d'Inflation avec Ajustements Saisonniers**
Le framework utilise des courbes d'inflation sophistiqu√©es construites √† partir d'instruments de march√© :

```cpp
// Construction de courbe d'inflation avec ajustements saisonniers dans Our project
double inflation_curve::cpi(const datetime& to, const tenor& observation_lag) const {
    const auto date = datetime_helper::add_tenor(to, observation_lag, -1);

    if (date < base_date_) {
        return historic_fixings_->cpi(date);
    }

    if (XSIGMA_LIKELY(!seasonality_adjustment_.empty())) {
        year_month_day mdy(date);
        return cpi_b_ * inverse_dfs_->interpolate(date) *
               seasonality_adjustment_.at(year_month_day(date).month - 1);
    } else {
        return cpi_b_ * inverse_dfs_->interpolate(date);
    }
}
```
*Cette impl√©mentation C++ dans Our project montre comment la courbe d'inflation calcule les valeurs CPI en tenant compte des ajustements saisonniers mensuels et des fixings historiques pour assurer la continuit√© temporelle.*

### **Initialisation et Validation**
```cpp
// Initialisation compl√®te de la courbe d'inflation
void inflation_curve::initialize() {
    validate();

    cpi_b_ = historic_fixings_->cpi(base_date_);

    // Enregistrement des param√®tres pour diff√©rentiation automatique
    AAD_REGISTER_PARAMETER(inverse_dfs_, inverse_dfs_->state_parameters_size());
    AAD_REGISTER_PARAMETER(seasonality_adjustment_, seasonality_adjustment_.size());
    AAD_REGISTER_PARAMETER(cpi_b_, 1);
    AAD_REGISTER_PARAMETER(historic_fixings_, historic_fixings_->state_parameters_size());
}
```
*Cette m√©thode d'initialisation dans Our project configure tous les param√®tres n√©cessaires pour la diff√©rentiation automatique (AAD), permettant un calcul efficace des sensibilit√©s.*

### **Param√®tres de Configuration Critiques**

| Param√®tre | Valeur par D√©faut | Plage Approuv√©e | Description |
|-----------|-------------------|-----------------|-------------|
| `CURVE::InflationInterpolation` | PWCONST_L | (FLAT, DIR, LINEAR, PWCONST_L, DIR-10, LINEAR-10, FLAT-15, PWCONST_L-15) | M√©thode d'interpolation pour extraire les figures d'inflation |
| `CURVE::AddPar` | NONE | (NONE, LINEAR) | Technique d'interpolation pour ins√©rer les taux de swap par implicites |
| `CURVE::CashToFuture` | LINEAR | (EXACT, EXACTCASH, EXACTCASH-1, CASHPRIORITY, LINEAR, NONE) | Technique d'interpolation pour inf√©rer le taux stub des futures |
| `CURVE::ExtrapMethod` | NATIVE | (CONSTANT_FORWARD, CONSTANT_PAR, CONSTANT_ZERO, NATIVE) | M√©thode de calcul des taux au-del√† de ExtrapTime |

---

## üéØ **Avantages Techniques du Framework**

### **‚úÖ Performance et Pr√©cision**
- **Calculs analytiques** avec solutions ferm√©es pour produits lin√©aires
- **Pr√©cision num√©rique √©lev√©e** (erreurs < 0.01 bp)
- **Performance optimis√©e** pour calculs batch et temps r√©el
- **Int√©gration native** avec DBAnalytics et Our project

### **‚úÖ Robustesse et Validation**
- **Tests de stress complets** sous sc√©narios CCAR et IRRBB
- **Validation ind√©pendante** avec impl√©mentations alternatives
- **Monitoring continu** des param√®tres via MARS
- **Conformit√© r√©glementaire** v√©rifi√©e

### **‚úÖ Flexibilit√© d'Impl√©mentation**
- **Support multi-plateforme** (Excel, Python, Perl)
- **Int√©gration Kannon** et Risk Engine
- **APIs standardis√©es** pour d√©veloppement
- **Documentation compl√®te** et exemples d'usage

---

## üìà **Cas d'Usage D√©taill√©s**

### **√âvaluation End-of-Day Avanc√©e**
```cpp
// Exemple d'√©valuation EOD pour portefeuille d'inflation
class InflationPortfolioEvaluator {
public:
    struct EODResults {
        double total_pv;
        std::map<std::string, double> product_pv;
        std::map<std::string, double> sensitivities;
        std::map<std::string, double> risk_metrics;
    };

    EODResults evaluate_portfolio(
        const InflationPortfolio& portfolio,
        const MarketData& market_data) {

        EODResults results;

        // Calcul PV par produit
        for (const auto& product : portfolio.get_products()) {
            double pv = product->calculate_pv(market_data);
            results.product_pv[product->get_id()] = pv;
            results.total_pv += pv;
        }

        // Calcul des sensibilit√©s
        results.sensitivities = calculate_portfolio_sensitivities(portfolio, market_data);

        // M√©triques de risque
        results.risk_metrics = calculate_risk_metrics(portfolio, market_data);

        return results;
    }
};
```

### **Gestion des Risques Multivari√©e**
- **Calculs VaR** avec corr√©lations entre facteurs de risque
- **Tests de stress** sous sc√©narios r√©glementaires
- **Analyse de sensibilit√©** param√©trique compl√®te
- **Monitoring temps r√©el** des expositions

### **Pricing de Produits Complexes**
- **Swaps d'inflation** zero-coupon et year-on-year
- **Asset swaps** index√©s sur inflation avec spreads
- **Produits de taux r√©els** avec ajustements d'inflation
- **Indices composites** multi-devises

---

## üîç **Surveillance et Contr√¥le Qualit√©**

### **Model Parameter Monitoring**
- **Surveillance automatis√©e** via MARS
- **Alertes** sur d√©viations param√©triques
- **Reporting** p√©riodique des performances
- **Validation continue** des r√©sultats

### **Contr√¥les de Coh√©rence**
- **Tests de r√©plication** quotidiens
- **Validation crois√©e** avec mod√®les alternatifs
- **Monitoring des √©carts** de pricing
- **Analyse des tendances** temporelles

---

*Cette documentation compl√®te du framework DBOPT int√®gre les meilleures pratiques de Our project avec une validation rigoureuse et des impl√©mentations techniques avanc√©es pour le pricing d√©terministe de produits d'inflation.*
