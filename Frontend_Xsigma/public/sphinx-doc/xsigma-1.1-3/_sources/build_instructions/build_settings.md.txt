# Build Settings

XSIGMA has a number of settings available for its build. The common variables
to modify include:

  * `BUILD_SHARED_LIBS` (default `ON`): If set, shared libraries will be
    built. This is usually what is wanted.
  * `XSIGMA_USE_CUDA` (default `OFF`): Whether [CUDA][cuda] support will be available or
    not.
  * `XSIGMA_USE_MPI` (default `OFF`): Whether [MPI][mpi] support will be available or
    not.
  * `XSIGMA_WRAP_PYTHON` (default `OFF`; requires `XSIGMA_ENABLE_WRAPPING`): Whether
    Python support will be available or not.

Less common, but variables which may be of interest to some:

  * `XSIGMA_BUILD_EXAMPLES` (default `OFF`): If set, XSIGMA's example code will be
    added as tests to the XSIGMA test suite.
  * `XSIGMA_ENABLE_LOGGING` (default `ON`): If set, enhanced logging will be
    enabled.
  * `XSIGMA_LOGGING_TIME_PRECISION` (default `3`; requires `XSIGMA_ENABLE_LOGGING`):
    Change the precision of times output when `XSIGMA_ENABLE_LOGGING` is on.
  * `XSIGMA_BUILD_TESTING` (default `OFF`): Whether to build tests or not. Valid
    values are `OFF` (no testing), `WANT` (enable tests as possible), and `ON`
    (enable all tests; may error out if features otherwise disabled are
    required by test code).
  * `XSIGMA_ENABLE_KITS` (default `OFF`; requires `BUILD_SHARED_LIBS`): Compile
    XSIGMA into a smaller set of libraries. Can be useful on platforms where XSIGMA
    takes a long time to launch due to expensive disk access.
  * `XSIGMA_ENABLE_WRAPPING` (default `ON`): Whether any wrapping support will be
    available or not.
  * `XSIGMA_WRAP_JAVA` (default `OFF`; requires `XSIGMA_ENABLE_WRAPPING`):
    Whether Java support will be available or not.
  * `XSIGMA_WRAP_SERIALIZATION` (default `OFF`; requires `XSIGMA_ENABLE_WRAPPING`):
    Whether serialization code will be auto generated or not.
  * `XSIGMA_JAVA_INSTALL` (default `OFF`; requires `XSIGMA_WRAP_JAVA`):
    Whether to build the Java Maven package for XSIGMA.
  * `XSIGMA_SMP_IMPLEMENTATION_TYPE` (default `Sequential`): Set which SMPTools
    will be implemented by default. Must be either `Sequential`, `STDThread`,
    `OpenMP` or `TBB`. The backend can be changed at runtime if the desired
    backend has his option `XSIGMA_SMP_ENABLE_<backend_name>` set to `ON`.
  * `XSIGMA_ENABLE_CATALYST` (default `OFF`): Enable catalyst-dependent modules
    including the XSIGMA catalyst implementation. Depends on an external Catalyst.
  * `XSIGMA_WEBASSEMBLY_64_BIT` (default `OFF`):
    This option is applicable only when building with Emscripten toolchain.
    Adds -sMEMORY64 compiler and linker flags.
  * `XSIGMA_WEBASSEMBLY_THREADS` (default `OFF`):
    This option is applicable only when building with Emscripten toolchain.
    Adds -pthread compiler and linker flags. When `XSIGMA_BUILD_TESTING` is `ON`,
    this also runs unit tests in web workers, which is the only way for the tests
    to reliably load data files without having to embed entire datasets inside
    the test binaries.
  * `XSIGMA_TESTING_WASM_ENGINE` (default ``):
    Path to a wasm runtime executable. This is used to run C++ tests in wasm environments.
  * `XSIGMA_TESTING_WASM_ENGINE_ARGUMENTS` (default ``):
    Space separated arguments passed to the wasm runtime executable.

## OpenGL related build options:

When OpenGL is used, a valid rendering environment (e.g., X, Cocoa, SDL2, OSMesa, EGL) must be available.
Sanity checks are in place to prevent a broken build.

For specific platforms:
* Android: `xsigmaEGLRenderWindow` is the default.
* macOS: `xsigmaCocoaRenderWindow` is the default.
* iOS: `xsigmaIOSRenderWindow` is the default.
* WebAssembly: `xsigmaWebAssemblyOpenGLRenderWindow` is the default.

Please learn more about how you can influence the render window selection process in [](/advanced/runtime_settings.md#opengl)

## Additional Rendering related build options:
On Linux, the order of render window attempts is:

1. `xsigmaXOpenGLRenderWindow`
2. `xsigmaEGLRenderWindow`
3. `xsigmaOSOpenGLRenderWindow`

On Windows:

* `xsigmaWin32OpenGLRenderWindow`
* `xsigmaOSOpenGLRenderWindow`

By default, XSIGMA automatically selects the most appropriate render window class at runtime. This selection process uses the `Initialize` method of the compiled subclass to test whether the chosen setup is valid. If the initialization succeeds, the corresponding render window instance is returned.

The default values of the following CMake `XSIGMA_OPENGL_HAS_*` knobs are already configured so
that the above condition is always met on all supported platforms.

  * `XSIGMA_USE_COCOA` (default `ON`; requires macOS): Use Cocoa for
    render windows.
  * `XSIGMA_USE_X` (default `ON` for Unix-like platforms except macOS,
    iOS, and Emscripten, `OFF` otherwise): Use X for render windows.
  * `XSIGMA_USE_SDL2` (default `OFF`): Use SDL2 for render windows.
  * `XSIGMA_OPENGL_USE_GLES` (default `OFF`; forced `ON` for Android):
    Whether to use OpenGL ES API for OpenGL or not.
  * `XSIGMA_OPENGL_HAS_EGL` (default `ON` for Android and Linux, `OFF` otherwise):
    Use to indicate that the OpenGL library being used supports EGL
    context management.
  * `XSIGMA_DEFAULT_EGL_DEVICE_INDEX` (default `0`; requires
    `XSIGMA_OPENGL_HAS_EGL`): The default EGL device to use for EGL render
    windows.
  * `XSIGMA_ENABLE_WEBGPU` (default `OFF`; required if using Emscripten): Enable
    WebGPU rendering support.
  * `XSIGMA_DEFAULT_RENDER_WINDOW_OFFSCREEN` (default `OFF`): Whether to default
    to offscreen render windows by default or not.
  * `XSIGMA_USE_OPENGL_DELAYED_LOAD` (default `OFF`; requires Windows and CMake >=
    3.13): If set, use delayed loading to load the OpenGL DLL at runtime.
  * `XSIGMA_DEFAULT_RENDER_WINDOW_HEADLESS` (default `OFF`; only available if
    applicable): Default to a headless render window.
  * `XSIGMA_USE_WIN32_OPENGL` (default `ON` for Windows, forced `OFF` otherwise):
    Use Win32 APIs for render windows (typically only relevant for OSMesa on
    Windows builds).

More advanced options:

  * `XSIGMA_ABI_NAMESPACE_NAME` (default `<DEFAULT>` aka `""`): If set, XSIGMA will
     wrap all XSIGMA public symbols in an
     `inline namespace <XSIGMA_ABI_NAMESPACE_NAME>` to allow runtime co-habitation
     with different XSIGMA versions.
     Some C ABIs are also wrapped in this namespace using macro expansion
     `#define c_abi XSIGMA_ABI_NAMESPACE_MANGLE(c_abi)`
  * `XSIGMA_ABI_NAMESPACE_ATTRIBUTES` (default `<DEFAULT>` aka `""`): If set, XSIGMA will
     inject these attributes into the `inline namespace`. i.e.
     `inline namespace <XSIGMA_ABI_NAMESPACE_ATTRIBUTES> <XSIGMA_ABI_NAMESPACE_NAME>`
     The `XSIGMA_ABI_NAMESPACE_ATTRIBUTES` is only applied the the APIs inside of the
     namespace, not to C APIs.
  * `XSIGMA_BUILD_DOCUMENTATION` (default `OFF`): If set, XSIGMA will build its API
    documentation using Doxygen.
  * `XSIGMA_BUILD_SPHINX_DOCUMENTATION` (default `OFF`): If set, XSIGMA will build its sphinx
    documentation website.
  * `XSIGMA_BUILD_ALL_MODULES` (default `OFF`): If set, XSIGMA will enable all
    modules not disabled by other features.
  * `XSIGMA_ENABLE_REMOTE_MODULES` (default `ON`): If set, XSIGMA will try to build
    remote modules (the `Remote` directory). If unset, no remote modules will
    build.
  * `XSIGMA_ENABLE_EXTRA_BUILD_WARNINGS` (default `OFF`; requires CMake >= 3.19):
    If set, XSIGMA will enable additional build warnings.
  * `XSIGMA_ENABLE_EXTRA_BUILD_WARNINGS_EVERYTHING` (default `OFF`; requires
    `XSIGMA_ENABLE_EXTRA_BUILD_WARNINGS` and `-Weverything` support): If set, XSIGMA
    will enable all build warnings (with some explicitly turned off).
  * `XSIGMA_USE_EXTERNAL` (default `OFF`): Whether to prefer external third
    party libraries or the versions XSIGMA's source contains.
  * `XSIGMA_TARGET_SPECIFIC_COMPONENTS` (default `OFF`): Whether to install
    files into target-specific components (`<TARGET>-runtime`,
    `<TARGET>-development`, etc.) or general components (`runtime`,
    `development`, etc.)
  * `XSIGMA_VERSIONED_INSTALL` (default `ON`): Whether to add version numbers to
    XSIGMA's include directories and library names in the install tree.
  * `XSIGMA_CUSTOM_LIBRARY_SUFFIX` (default depends on `XSIGMA_VERSIONED_INSTALL`):
    The custom suffix for libraries built by XSIGMA. Defaults to either an empty
    string or `X.Y` where `X` and `Y` are XSIGMA's major and minor version
    components, respectively.
  * `XSIGMA_CUSTOM_LIBRARY_VERSION` (default depends on `XSIGMA_VERSIONED_INSTALL`):
    The custom version for libraries built by XSIGMA. Defaults to either an empty
    string  or `X.Y` where `X` and `Y` are XSIGMA's major and minor version if
    XSIGMA_VERSIONED_INSTALL is ON.
  * `XSIGMA_INSTALL_SDK` (default `ON`): If set, XSIGMA will install its headers,
    CMake API, etc. into its install tree for use.
  * `XSIGMA_FORBID_DOWNLOADS` (default `OFF`): If set, XSIGMA will error on any
    network activity required during the build (namely remote modules and
    testing data).
  * `XSIGMA_DATA_STORE` (default is complicated): If set or detected, points to
    where XSIGMA external data will be stored or looked up.
  * `XSIGMA_DATA_EXCLUDE_FROM_ALL` (default is complicated, but
    generally `OFF`): If set or detected, data downloads will only
    happen upon explicit request rather than through the build's
    default target.
  * `XSIGMA_RELOCATABLE_INSTALL` (default `ON`): If set, the install tree will be
    relocatable to another path. If unset, the install tree may be tied to the
    build machine with absolute paths, but finding dependencies in
    non-standard locations may require work without passing extra information
    when consuming XSIGMA.
  * `XSIGMA_UNIFIED_INSTALL_TREE` (default `OFF`): If set, the install tree is
    stipulated to be a unified install tree of XSIGMA and all of its dependencies;
    a unified tree usually simplifies things including, but not limited to,
    the Python module paths, library search paths, and plugin searching. This
    option is irrelevant if a relocatable install is requested as such setups
    assume that dependencies are set up either via a unified tree or some other
    mechanism such as modules).
  * `XSIGMA_ENABLE_SANITIZER` (default `OFF`): Whether to enable sanitization of
    the XSIGMA codebase or not.
  * `XSIGMA_SANITIZER` (default `address`; requires `XSIGMA_ENABLE_SANITIZER`): The
    sanitizer to use.
  * `XSIGMA_USE_LARGE_DATA` (default `OFF`; requires `XSIGMA_BUILD_TESTING`):
    Whether to enable tests which use "large" data or not (usually used to
    reduce the amount of data downloading required for the test suite).
  * `XSIGMA_USE_HIP` (default `OFF`; requires CMAKE >= 3.21 and NOT `XSIGMA_USE_CUDA`)
    Whether [HIP][hip] support will be available or not.
  * `XSIGMA_LEGACY_REMOVE` (default `OFF`): If set, XSIGMA will disable legacy,
    deprecated APIs.
  * `XSIGMA_LEGACY_SILENT` (default `OFF`; requires `XSIGMA_LEGACY_REMOVE` to be
    `OFF`): If set, usage of legacy, deprecated APIs will not cause warnings.
  * `XSIGMA_USE_FUTURE_CONST` (default `OFF`): If set, the `XSIGMA_FUTURE_CONST`
    macro expands to `const`; otherwise it expands to nothing. This is used to
    incrementally add more const correctness to the codebase while making it
    opt-in for backwards compatibility.
  * `XSIGMA_USE_FUTURE_BOOL` (default `OFF`): If set, the `xsigmaTypeBool`
    typedef is defined to `bool`; otherwise it's `int`. XSIGMA was created before
    C++ even had `bool`, and so its oldest code used `int`. Set to `ON` to opt in
    to using more real `bool`s, set to `OFF` only if required for backwards
    compatibility.
  * `XSIGMA_USE_TK` (default `OFF`; requires `XSIGMA_WRAP_PYTHON`): If set, XSIGMA will
    enable Tkinter support for XSIGMA widgets.
  * `XSIGMA_BUILD_COMPILE_TOOLS_ONLY` (default `OFF`): If set, XSIGMA will compile
    just its compile tools for use in a cross-compile build.
  * `XSIGMA_NO_PYTHON_THREADS` (default `OFF`): If set, then all Python threading
    in XSIGMA will be disabled.
  * `XSIGMA_PYTHON_FULL_THREADSAFE` (default `ON`): If set, lock the Python GIL
    for Python C API calls, to make it safe to allow Python thread concurrency.
  * `XSIGMA_SERIAL_TESTS_USE_MPIEXEC` (default `OFF`): Used on HPC to run
    serial tests on compute nodes. If set, it prefixes serial tests with
    "${MPIEXEC_EXECUTABLE}" "${MPIEXEC_NUMPROC_FLAG}" "1" ${MPIEXEC_PREFLAGS}
  * `XSIGMA_WINDOWS_PYTHON_DEBUGGABLE` (default `OFF`): Set to `ON` if using a
    debug build of Python.
  * `XSIGMA_WINDOWS_PYTHON_DEBUGGABLE_REPLACE_SUFFIX` (default `OFF`): Set to `ON`
    to use just a `_d` suffix for Python modules.
  * `XSIGMA_BUILD_PYI_FILES` (default `OFF`): Set to `ON` to build `.pyi` type
    hint files for XSIGMA's Python interfaces.
  * `XSIGMA_DLL_PATHS` (default `""` or `XSIGMA_DLL_PATHS` from the environment): If
    set, these paths will be added via Python 3.8's `os.add_dll_directory`
    mechanism in order to find dependent DLLs when loading XSIGMA's Python
    modules. Note that when using the variable, paths are in CMake form (using
    `/`) and in the environment are a path list in the platform's preferred
    format.
  * `XSIGMA_ENABLE_VR_COLLABORATION` (default `OFF`): If `ON`, includes support
    for multi client VR collaboration. Requires libzmq and cppzmq external libraries.
  * `XSIGMA_SMP_ENABLE_<backend_name>` (default `OFF` if needs an external library otherwise `ON`):
    If set, builds with the specified SMPTools backend implementation that can be
    changed on runtime with `XSIGMA_SMP_BACKEND_IN_USE` environment variable.
  * `XSIGMA_USE_VIDEO_FOR_WINDOWS` (default `OFF`; requires Windows): Enable the
    `xsigmaAVIWriter` class in the `XSIGMA::IOMovie` module.
  * `XSIGMA_USE_VIDEO_FOR_WINDOWS_CAPTURE` (default `OFF`; requires Windows):
    Enable the `xsigmaWin32VideoSource` class in the `XSIGMA::IOVideo` module.
  * `XSIGMA_USE_MICROSOFT_MEDIA_FOUNDATION` (default `OFF`; requires Windows):
    Enable the `xsigmaMP4Writer` class in the `XSIGMA::IOMovie` module.
  * `XSIGMA_USE_64BIT_TIMESTAMPS` (default `OFF`; forced on for 64-bit builds):
    Build with 64-bit `xsigmaMTimeType`.
  * `XSIGMA_USE_64BIT_IDS` (default `OFF` for 32-bit builds; `ON` for 64-bit
    builds): Whether `xsigmaIdType` should be 32-bit or 64-bit.
  * `XSIGMA_DEBUG_LEAKS` (default `OFF`): Whether XSIGMA will report leaked
    `xsigmaObject` instances at process destruction or not.
  * `XSIGMA_DEBUG_RANGE_ITERATORS` (default `OFF`; requires a `Debug` build):
    Detect errors with `for-range` iterators in XSIGMA (note that this is very
    slow).
  * `XSIGMA_ALWAYS_OPTIMIZE_ARRAY_ITERATORS` (default `OFF`; requires `NOT
    XSIGMA_DEBUG_RANGE_ITERATORS`): Optimize `for-range` array iterators even in
    `Debug` builds.
  * `XSIGMA_ALL_NEW_OBJECT_FACTORY` (default `OFF`): If `ON`, classes using
    `xsigmaStandardNewMacro` will use `xsigmaObjectFactoryNewMacro` allowing
    overrides to be available even when not explicitly requested through
    `xsigmaObjectFactoryNewMacro` or `xsigmaAbstractObjectFactoryNewMacro`.
  * `XSIGMA_ENABLE_XSIGMAM_OVERRIDES` (default `OFF`): If `ON`, enables factory override
     of certain XSIGMA filters by their XSIGMA-m counterparts. There is also a runtime
     switch that can be used to enable/disable the overrides at run-time (on by default).
     It can be accessed using the static function `xsigmamFilterOverrides::SetEnabled(bool)`.
  * `XSIGMA_GENERATE_SPDX` (default `OFF`): If `ON`, SPDX file will be generated at build time
     and installed for each module and third party, in order to be able to create a SBOM.
     See [](/api/cmake/ModuleSystem.md#spdx-files-generation) and
     [](/advanced/spdx_and_sbom.md) for more info.
  * `XSIGMA_ANARI_ENABLE_NVTX` (default `OFF`; requires CUDA Toolkit): If `ON`, enables the NVIDIA
     Tools Extension Library (NVTX) for profiling the ANARI rendering code and visualizing
     these events in tools like [NSight Systems][nsight].

`xsigmaArrayDispatch` related options:

The `XSIGMA_DISPATCH_<array_type>_ARRAYS` options (default `OFF` for all but AOS) enable the
specified type of array to be included in a dispatch type list. Explicit arrays (such as
AOS, SOA, Typed, and implicit arrays) are included in the `xsigmaArrayDispatchTypeList.h`
The implicit array framework is included in the `CommonCore` module. The following array types
currently exist for use with the XSIGMA dispatch mechanism:

  * `XSIGMA_DISPATCH_AOS_ARRAYS` (default `ON`): includes dispatching for the commonly used
    "array-of-structure" ordered arrays derived from `xsigmaAOSDataArrayTemplate`
  * `XSIGMA_DISPATCH_SOA_ARRAYS` (default `OFF`): includes dispatching for "structure-of-array"
    ordered arrays derived from `xsigmaSOADataArrayTemplate`
  * `XSIGMA_DISPATCH_TYPED_ARRAYS` (default `OFF`): includes dispatching for arrays derived
    from `xsigmaTypedDataArray`
  * `XSIGMA_DISPATCH_AFFINE_ARRAYS` (default `OFF`): includes dispatching for linearly varying
    `xsigmaAffineArray`s as part of the implicit array framework
  * `XSIGMA_DISPATCH_CONSTANT_ARRAYS` (default `OFF`): includes dispatching for constant arrays
    `xsigmaConstantArray` as part of the implicit array framework
  * `XSIGMA_DISPATCH_STD_FUNCTION_ARRAYS` (default `OFF`): includes dispatching for arrays with
    an `std::function` backend `xsigmaStdFunctionArray` as part of the implicit array framework

The outlier in terms of dispatch support is the family of arrays derived from
`xsigmaScaledSOADataArrayTemplate` which are automatically included in dispatch when built setting
the `XSIGMA_BUILD_SCALED_SOA_ARRAYS`.

```{warning}
Adding increasing numbers of arrays in the dispatch mechanism can greatly slow down compile times.
```

The XSIGMA module system provides a number of variables to control modules which
are not otherwise controlled by the other options provided.

  * `XSIGMA_MODULE_USE_EXTERNAL_<name>` (default depends on `XSIGMA_USE_EXTERNAL`):
    Use an external source for the named third-party module rather than the
    copy contained within the XSIGMA source tree.

     ````{warning}
       Activating this option within an interactive cmake configuration (i.e. ccmake, cmake-gui)
       could end up finding libraries in the standard locations rather than copies
       in non-standard locations.

       It is recommended to pass the variables necessary to find the intended external package to
       the first configure to avoid finding unintended copies of the external package.
       The variables which matter depend on the package being found, but those ending with
       `_LIBRARY` and `_INCLUDE_DIR` as well as the general CMake `find_package` variables ending
       with `_DIR` and `_ROOT` are likely candidates.

       Example:
       ```
       ccmake -D HDF5_ROOT:PATH=/home/user/myhdf5 ../xsigma/sources
       ```
     ````

  * `XSIGMA_MODULE_ENABLE_<name>` (default `DEFAULT`): Change the build settings
    for the named module. Valid values are those for the module system's build
    settings (see below).
  * `XSIGMA_GROUP_ENABLE_<name>` (default `DEFAULT`): Change the default build
    settings for modules belonging to the named group. Valid values are those
    for the module system's build settings (see below).

For variables which use the module system's build settings, the valid values are as follows:

  * `YES`: Require the module to be built.
  * `WANT`: Build the module if possible.
  * `DEFAULT`: Use the settings by the module's groups and
    `XSIGMA_BUILD_ALL_MODULES`.
  * `DONT_WANT`: Don't build the module unless required as a dependency.
  * `NO`: Do not build the module.

If any `YES` module requires a `NO` module, an error is raised.

[cuda]: https://developer.nvidia.com/cuda-zone
[hip]: https://en.wikipedia.org/wiki/ROCm
[mpi]: https://www.mcs.anl.gov/research/projects/mpi
[nsight]: https://developer.nvidia.com/nsight-systems
