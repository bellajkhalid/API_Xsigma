# Interest Rate Volatility Model GSABR

## 1 Executive Summary

The Global Model Risk Assessment is:

### Global Model Risk Assessment

| | Rating | Justification |
|----------|---------------|--------------|
| Complexity | LOW(1)/LOW(2) | Due to the validator SME judgement. |
| Uncertainty | LOW(1)/LOW(2) | Model methodologies do not give rise to any model weaknesses or limitations which leads to low level of uncertainty. |
| Reliance | HIGH(1)/ HIGH(2) | Pricing models have high reliance. |

Table 2: Model risk assessment for the two models in scope of this report: (1) DBOPT-RateDeterministic_InflationDeterministic, (2) DBX-RateDeterministic_InflationDeterministic.

The uncertainty rating has been determined based on consideration of model inputs, relevant model limitations, the risk factor representation required for the products being modelled, the nature of the numerical implementation and calibration approaches employed. The complexity rating has been determined based on consideration of the number and nature of risk factors modelled including their interdependency, the calibration approach employed, the mathematical specification of the model and where relevant, the sophistication of the broader processing environment of which the model is part. The reliance of all pricing models is high as the model outputs define the relevant officially reported metrics rather than merely informing them. Reduction of reliance on pricing model outputs is similarly inappropriate.

### 1.1 Summary of Main Validation Results

The models DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic are pricing models used for the following purposes: Generate asset and liability fair value measurements reported in official books and records and/or generate risk sensitivities (i.e. for End of Day risk management purpose and/or feeding Risk and Capital calculation) and re-price positions under stress scenarios as a servicer model, in the context of regulatory stress tests i.e. CCAR, in the Interest Risk in the Banking Book ("IRRBB") Delta Economic Value of Equity (EVE) calculation or in the context of full revaluation ("Full Reval") of (Stress) Value at Risk (SVaR/ HistSim/ Multivariate). The model is developed and maintained by DBAnalytics and is provided via dlls for use in Microsoft Excel, Python, Perl, and is made available in Kannon and Risk Engine.

The model is used for pricing products depending on interest rate and inflation that do not display any optionality, neither on the interest rate nor on the inflation index. In other words, the products are all linear with respect to the interest rate and inflation curve. The interest rate curve enters the valuation of these products essentially only in the construction of the discount factors, whereas the inflation curve $I(t)$ (built from inflation ZC rates from a given inflation index, using an interpolation method) is used to express the inflation value at date $T$, and $I(T)$ is used as the underlying of the product. For this reason, we use the RateDeterministic and InflationDeterministic theoretical frameworks for the valuation of these products.

The 'deterministic' assumption does not mean that the payoffs of the products under this model are assumed to be deterministic. It merely means that, due to the lack of the optionality, their PV is independent on the volatility, hence the pricing of the products is independent of any particular modelling of the interest rate or the inflation curve, being based only on general no-arbitrage arguments. The DBOPT framework is a DBA methodology for pricing securities having a closed-form solution.

The main validation testing carried out in Section 4 of this document verifies the behaviour of the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models for pricing inflation products with a linear payoff. In particular, in the first part of this section, we provide an overview of the key features of the DBA methodology for the construction of the inflation curve. This includes testing a full implementation of the inflation curve, as well as comparing several different build methods and parameter settings of the inflation curve. The second part of the independent testing looks in depth at the behaviour of products using the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models. The testing looks at the model under stresses of rates. In particular, it investigates the stability of PV and delta ladders under interest and inflation rate changes. Moreover, testing for Taylor dependency is also carried out. Other product specific testing is done as appropriate for each product, depending on its features. The behaviour of the products is also tested under the IRRBB and CCAR 2023 frameworks, as well as in a multivariate set-up where VaR shocks are simultaneously applied to the underlying risk factors. Eventually, we conduct the model parameter testing of the model, where we test all relevant model parameters that are used by the model and for their impact on the PV or other related quantities.

All the testing suggests that the model is fit for purpose. The model was reviewed for DBAnalytics v1300.

The DBOPT-RateDeterministic_InflationDeterministic model with configurations

DBOPT-RatesMarketDeterministic_InflationDeterministic

is recommended for use with the following products :

InflSwapZC*                   InflSwapYOY*

InflAssetSwap*               IRSwapRealRate*

The DBX-RateDeterministic_InflationDeterministic model with configurations

DBX-ShortRateDeterministic_InflationDeterministic

is recommended for use with the following products:

IRIndexSingle_INFLATION*

Products labelled with "*" indicate that the approved model is primary.

The model is recommended for use for the following usage(s):

- End of day valuation and risk management.

- As a servicer model employed in valuation subject to CCAR stress testing scenarios and HistSim Var (Multivariate).

- For the calculation of Delta Economic Value of Equity (EVE) under Interest Rate Risk in the Banking Book.

Table 3 summarises the valuation assessment per usage.

| Usage | Recommended for Use (RFU) |
|-------|---------------------------|
| EOD   | YES                       |
| VaR/ HistSim/ Multivariate | YES |
| CCAR  | YES                       |
| IRRBB | YES                       |

Table 3: Validation Assessment.

The review undertaken did not reveal any flaws in the theory or the relevant implementations.

The model assumptions are detailed in the model description section, see Section 2.3.

### 1.2 Limitations and Validation Findings Overview

#### Model Limitations

There are currently no model limitations that have been identified.

#### Validation Findings

There are currently no validation findings requiring to be addressed. There have been no closed validation findings.

### 1.3 Control Overview

Tables 4 to 10 list the conditions for use that have been raised to address model weaknesses identified in the course of validation. These are classified as Model Rule and should be monitored through the automated Model Parameter Monitoring process. All conditions for use are logged in MARS. Model parameters approved values and appropriate ranges are detailed in Section 6, and the parameter classification and accurate functioning of model rules is confirmed in Section 5.

### Model Parameters in CURVE Object

Table 4 provides the model parameters that are used in the CURVE object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|--------------|-----------------|-------|------------------------|
| CURVE::InflationInterpolation | PWCONST_L | (FLAT, DIR, LINEAR, PWCONST_L, DIR-10, LINEAR-10, FLAT-15, PWCONST_L-15) | 1320 | Defines the interpolation method used to extract the inflation figure from the table used as the base index for the zero coupon rates quoted. |
| CURVE::AddPar | NONE | (NONE, LINEAR) | 11860 | Determines the interpolation technique used to insert implied par swap rates between quoted market swap rates. |
| CURVE::CashToFuture | LINEAR | (EXACT, EXACTCASH, EXACTCASH-1, CASHPRIORITY, LINEAR, NONE) | 11862 | Specifies the interpolation technique used to infer the futures stub rate from cash rates. |
| CURVE::ExtrapMethod | NATIVE | (CONSTANT_FORWARD, CONSTANT_PAR, CONSTANT_ZERO, NATIVE) | 11863 | Defines the method used to calculate rates beyond ExtrapTime (if specified) or the maturity of the longest quoted market instrument (otherwise). |
| CURVE::CurveType | – | (LIBOR, SPREAD, RBASIS, CCYBASIS, BASIS) | 11864 | Defines how a given model uses the LIBOR curve and the SPREAD curve for forecasting (i.e. calculating forward rates) and discounting. |
| CURVE::OISUseBaseCurve | – | (NO, YES, HYBRID) | 11865 | Controls the usage of the backbone curve for OIS discounting/ forecasting. |
| CURVE::SmoothFutures | NO | (NO, YES, BACKWARD, BACKWARDDAILY) | 11866 | Determines how futures are used to construct a smooth curve. |
| CURVE::RecalibMethod | APPROX | (APPROX, EXACT, EXACTFORCED) | 11867 | Defines the interpolation of the discount factor curve. |
| CURVE::SpotLiborUseBaseCurve | – | (NO, YES) | 11868 | Controls the usage of the backbone curve for LIBOR discounting/ forecasting. |
| CURVE::SpreadBuildMethod | LINEAR_ZERO | (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD) | 11869 | Controls the interpolation of the spread adjustment factor on a backbone base curve to obtain various forecasting/discounting curves (e.g. OIS, CCY, 3m LIBOR, ...). |
| CURVE::Cash::SpreadBuildMethod | LINEAR_ZERO | (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD) | 11870 | See CURVE::SpreadBuildMethod for the subtable Cash. |
| CURVE::Spreads::SpreadBuildMethod | LINEAR_ZERO | (LINEAR_ZERO, CONSTANT_FORWARD, HYBRID_FORWARD, HYBRID_CONSTANT_FORWARD, QUADRATIC_FORWARD) | 11871 | See CURVE::SpreadBuildMethod for the subtable Spreads.

### Model Parameters in VOL Object

Table 5 provides the model parameters that are used in the DBOPTVOL object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|---------------|----------------|--------|----------------------|
| VOL::CorrelationInterpolationSpace | - | != DENSITYSKEW and != BERNSTEIN | 795 797 | Disallow usage of CorrelationInterpolation-Space = 'DENSITYSKEW' and = 'BERNSTEIN' in CORRELATION VOL objects. |
| VOL::AnnuityMappingModel | - | != MULTIFACTORNONLINEAR | 1026 | Disallow usage of CorrelationInterpolation-Space = 'DENSITYSKEW' and = 'BERNSTEIN' in CORRELATION VOL objects. |
| VOL::ReplicateCashDV01 | 1 | (1, 2) | 1027 | See VOL::AnnuityMappingModel. |
| VOL::SkewSabrBlendTable::AtmVolSpread | - | not exists | 1031 | SkewSabrBlend autocalibration is not to be used until validated. |
| VOL::SkewSabrBlendTable::Strike | - | not exists | 1031 | SkewSabrBlend autocalibration is not to be used until validated. |
| VOL::DIFFUSEFULLDRIVER | NO | (NO) | 18730 | DiffuseFullDriver can take value Yes or No (default). When it is set to Yes all the underlying in the driver are diffused, if it is set to no just the underlying needed for the security pricing are diffused and the driver is reduced accordingly. No changes are done on the driver weights as the driver performance is always normalised by the forward driver performance. Require VOL::DiffuseFullDriver=NO. Requested by DBA. |

### Model Parameters in FUNDINGVOL Object

Table 6 provides the model parameters that are used in the FUNDINGVOL object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|---------------|----------------|--------|----------------------|
| FUNDINGVOL::VarianceReduction | - | (ANTITHETIC, ANTITHETICPURE, ORTHOGONAL) | 11891 | The feature specifies the method to be used for reducing variance in the simulation. |
| FUNDINGVOL::IntegrationFreq | 12 | ≥ 12 | 11894 | Number of time steps per year to calculate volatility surface and convexity adjustments in analytic. |
| FUNDINGVOL::FrontLatticeFreq | unset | unset | 17773 | Linking model rules relative to MARS Request 17436. |
| FUNDINGVOL::DecayTime | unset | unset | 17774 | Linking model rules relative to MARS Request 17436. |
| FUNDINGVOL::ReinvestSpreadCalcMethod | EXACT | (EXACT) | 17776 | Linking model rules relative to MARS Request 17436. |
| FUNDINGVOL::FreqTimeVec | unset | unset | 17777 | Linking model rules relative to MARS Request 17436. |
| FUNDINGVOL::StateMaxFraction | 0.25 | 0.25 | 17779 | Linking model rules relative to MARS Request 17436. |

Table 6: Model parameters in the FUNDINGVOL object.

### Model Parameters in DBOPT Object

Table 7 provides the model parameters that are used in the DBOPT object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|---------------|----------------|--------|----------------------|
| MODEL::ModelMode | PRICE | (PRICE, PRICEVALUETODAY) | 11896 | Determines the pricing convention. |
| MODEL::RecalibCurves | NO | (YES, NO) | 11900 | Determines whether DS2 curves with a OIS-Spreads and CCYSpreads subtable are recalibrated on the fly or not. |
| MODEL:: MinimumPayoffSmoothingWedge | - | not exists | 1028 | Parameter is not approved for use until validated. |
| MODEL:: PayoffSmoothingUseTimeScaling | - | not exists | 1029 | Parameter is not approved for use until validated. |
| MODEL::SmoothCmsNSpreadPayoff | - | != YES | 1030 | Parameter SmoothCmsNSpreadPayoff is not approved for use until validated. |

Table 7: Model parameters in the DBOPT object.

### Model Parameters in DBX Object

Table 8 provides the model parameters that are used in the DBX object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|---------------|----------------|--------|----------------------|
| MODEL::NumberRuns | 1 | >= 1 | 20906 | NumberRuns/NumberSeedVarianceRuns is the number of independent simulations to perform for pricing. |
| MODEL::NumberSims | - | >= 1000 | 20907 | NumberSims is the number of simulations to perform during pricing. |
| MODEL::NumberSims | - | >= 5000 | 20908 | NumberSims is the number of simulations to perform during pricing. |
| MODEL::NumberSeedVarianceRuns | - | >= 1 | 20909 | NumberRuns/NumberSeedVarianceRuns is the number of independent simulations to perform for pricing. |

Table 8: Model parameters in the DBX object.

### Model Parameters in FIXING Object

Table 9 provides the model parameters that are used in the FIXING object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|---------------|----------------|--------|----------------------|
| FIXING::NaturalTolerance(*)(w) | 0 | ≤ 1 | 11895 | Tolerance (maximum tenor mismatch) allowed when mapping natural, i.e. rates with RateIndexType = 'NATURAL', to Libor rates. |
| FIXING::NaturalTolerance(*)(d) | 0 | ≤ 10 | 11897 | Tolerance (maximum tenor mismatch) allowed when mapping natural, i.e. rates with RateIndexType = 'NATURAL', to Libor rates. |
| FIXING::InterpolateNatural | YES | (YES, NO) | 11898 | Determines whether natural rate interpolation/extrapolation in the tenor space is allowed. |

Table 9: Model parameters in the FIXING object.

### Model Parameters in MKTDATA Object

Table 10 provides the model parameters that are used in the MKTDATA object of type 'INFLATION'.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|---------------|----------------|--------|----------------------|
| MKTDATA::Interpolation | FLAT | (DIR, DIR-*, FLAT, FLAT-*) | 11908 | Determines the interpolation used. Accordingly, after adding the lag, it will either not interpolate ('FLAT' or 'FLAT-*') or linearly interpolate ('DIR' or 'DIR-*') between the inflation CPI figures of the CPI reference day (depending on the appendix '-*') of the month and the same day of the following month. |

Table 10: Model parameters in the MKTDATA object.

### Model Parameters in FUNDING Object

Table 11 provides the model parameters that are used in the FUNDING object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|---------------|----------------|--------|----------------------|
| FUNDING::Type | SPOTFX | (SPOTFX) | 17775 | A FUNDING object of Type SPOTFX provides Spot FX rates for FUNDINGCURVE. |

Table 12 provides the model parameters that are used in the CMT object.

| Input Parameter | Default Value | Approved Range | CfU ID | Parameter Description |
|----------------|---------------|----------------|--------|----------------------|
| CMT::CMTMode | - | (MATRIX) | 20893 | CMT objects are distinguished by the values of the parameter CMTMode. |

Table 12: Model parameters in the CMT object.

## 2 Introduction to Model and Validation

### 2.1 Validation Scope

The scope of the validation is detailed in Section 1.1.

Products with similar features from a valuation perspective are grouped together and tested as a single consistent group wherein testing results for a representative product are deemed applicable and able to confer equivalent inference to the whole product group. The product grouping logic is presented in Section 2.2.2.

### 2.2 Product Description

In this section, we describe the products that the DBOPT-RateDeterministic_InflationDeterministic model covers and highlight their characteristics. To this end, let us recall that the DBOPT-RateDeterministic_InflationDeterministic model is approved for the following products :

InflSwapZC*                    InflSwapYOY*
InflAssetSwap*                IRSwapRealRate*

Whereas DBX-RateDeterministic_InflationDeterministic is approved for the following products :

IRIndexSingle_INFLATION*

Products labelled with "*" indicate that the approved model is primary.

### 2.2.1 PRDS Description

Table 13 is drawn from PRDS and provides a list and the definition of the PRDS products that are in scope for the validation of the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models. Note that the model is the preferred ones for all listed products.

| Product Name (Long Product Name) | Product Description |
|----------------------------------|---------------------|
| InflSwapZC (InflationSwapZeroCoupon) | An inflation swap involving the exchange of a regular stream of inflation-indexed payments for a stream of nominal interest payments and priced on a zero coupon basis, with payment exchanged at the end of the term. One party pays the compounded fixed rate and the other the actual inflation rate for the term. |
| InflSwapYOY (InflationSwapYearOnYear) | An inflation swap involving the exchange of a regular stream of inflation-indexed payments for a stream of nominal interest payments exchanged on a "year on year" basis, where the year-on-year rate of change of the underlying index is applied. One party pays the compounded fixed rate and the other the actual inflation rate for the year. |
| InflAssetSwap (InflationAssetSwap) | The interest rate swap transation involved in a structure where the investor buys an inflation linked bond and enters into an interest rate swap which swaps the coupon profile of the non zero coupon bond for a different, usually libor based, set of payments. Said Payments are not dependant on any default of the underlyingbond. The swap includes a Notional based inflation return at maturity in addition to the interim coupons, this Notional return is NOT subject to a floor. |
| IRSwapRealRate (InterestRateSwapRealRate) | The real rate swap is an inflation swap where the inflation leg pays a coupon adjusted by the inflation index specified in the contract. There may also be the payment of a notional uplift at maturity i.e. the difference between the original notional and the notional adjusted by the inflation rate applicable on the maturity date. |
| IRIndexSingle_INFLATION (IRIndexSingle_INFLATION) | A transaction traded on a see through basis involving an index which has index components with the same currency and which belongs to the Inflation family of indices. The trade notional currency is the same as the index currency. This transaction will not have optionality. |

Table 13: List and definition of the PRDS products in scope of the validation.

## 2.2.2 Product Grouping Table

For the purpose of model validation testing, we group the PRDS products above as described in Table 14.

| Product | Underlying | Coupon Structure | Underlying Specifics | Option | Barrier | Path Dependent |
|---------|------------|------------------|---------------------|--------|---------|----------------|
| InflSwapZC | Inflation | Linear | Linear | None | None | None |
| InflSwapYOY | Inflation | Linear | Convex | None | None | None |
| InflAssetSwap | Inflation-InterestRate | Linear | Linear | None | None | None |
| IRSwapRealRate | Inflation | Linear | Linear | None | None | None |
| IRIndexSingle_INFLATION | Inflation Index | Linear | Linear | None | None | None |

Table 14: Product Grouping Table. All products are explicitly tested in this MVR.

## 2.2.3 Portfolio Composition and PV of Trades

Table 15 provides a snapshot of all trades booked using the DBOPT-RateDeterministic_InflationDeterministic model as of 30th November 2023.

| Product | No. of Trades | PV (in million EUR) | Absolute PV (in million EUR) |
|---------|--------------|---------------------|------------------------------|
| InflAssetSwap | 147 | 338.18 | 2,712.24 |
| InflSwapYOY | 13 | -40.48 | 52.71 |
| InflSwapZC | 52,995 | -6,842.96 | 195,444.85 |

Table 15: Model inventory for the DBOPT-RateDeterministic_InflationDeterministic model as of 30th November 2023.

## 2.2.4 Product Overviews

### InflAssetSwap

InflAssetSwap is simply a swap one leg consisting of ZC inflation payments, the other leg paying either fixed or a Libor rate. Hence the PV of this product is simply the sum of PV's of the individual legs and hence InflSwapZC testing will cover testing for this product.

### InflSwapYOY

Similarly, InflSwapYOY, a Year on Year inflation swap is a product that given a tenor structure $T_0 < T_1 < ... < T_n$, pays at the end of each time interval $[T_{i-1}, T_i]$, the cash flows,

$$N\theta_iK \text{ vs } N\theta_i\left[\frac{I(T_i)}{I(T_{i-1} - 1Y)} - 1\right].  \tag{1}$$

### InflSwapZC

InflSwapZC is a zero coupon inflation swap, which swaps a fixed leg, given by the right hand side of equation (2) below, against an inflation floating leg.

$$N[(1+K)^\theta - 1] \text{ vs } N\left(\frac{I_T}{I_S} - 1\right), \tag{2}$$

where $T$ is the trade's maturity, $S$ the instrument's settlement date and $\theta$ is the accrual factor for the period $[S,T]$.

## 2.3 Model Description

The DBOPT-RateDeterministic_InflationDeterministic model with configurations

DBOPT-RatesMarketDeterministic_InflationDeterministic

The DBX-RateDeterministic_InflationDeterministic model with configurations

DBX-ShortRateDeterministic_InflationDeterministic

### Deterministic Interest Rates

The interest rate in each currency is assumed to be a deterministic function of time.

Let $r_t$ denote the instantaneous spot rate at time $t$ in a given currency. The money market account $B_t$ is then determined by the deterministic dynamics

$\mathrm{d}B_t = r_t B_t \mathrm{d}t, \quad B_0 = 1,$

which yield

$B_t = \exp \left\{ \int_0^t r_s \mathrm{d}s \right\}.$

The discount curve $1/B_t$ gives the pre-set value of a payment at time $t$, and the forward discount curve $D(t, T)$ gives the value at time $t$ of a payment done at time $T$:

$D(t, T) = \frac{B_t}{B_T} = \exp \left\{ -\int_t^T r_s \mathrm{d}s \right\}.$

### Deterministic Inflation

The inflation ratio and return between time $T$ and $S$ are defined by

$\frac{I(T)}{I(S)} \quad \text{and} \quad \frac{1}{\delta(S,T)}\left(\frac{I(T)}{I(S)}-1\right),$

respectively, where $\delta(S, T)$ is the year fraction between $S$ and $T$. The corresponding forward values of inflation ratio and return at time $t$ are

$F(t, T) = \mathbb{E}^T\left[\frac{I(T)}{I(S)}|\mathcal{F}_t\right]$

and

$F(t, T) = \frac{1}{\delta(S,T)}\mathbb{E}^T\left[\frac{I(T)}{I(S)}-1|\mathcal{F}_t\right],$

respectively.

For YoY, that is $S > t$, we then have

$F(0, T) = \frac{1}{\delta(S,T)}\mathbb{E}^T\left[\frac{I(T)}{I(S)}-1|\mathcal{F}_0\right]$

$= \frac{1}{\delta(S,T)}\frac{\mathbb{E}^T[I(T)|\mathcal{F}_0]}{\mathbb{E}^S[I(S)|\mathcal{F}_0]} + \text{CMT}(S,T),$

where the CMT object serves for convexity adjustment.

In particular, for the InflationDeterministic model, we have $\mathbb{E}^T[I(T)] = I(T)$.

### 2.3.1 Model Assumptions

We have the following model assumptions for the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models:

* No Arbitrage: It is assumed that there are no arbitrage opportunities.

* Interest Rates Dynamics: The products priced on this model are linear. The measure change calculations yields in analytical solution with respect to interest rate curve which depends only on the quantities obtained from the yield curve at time zero, that is no volatility dependence of PV and risk sensitivities of products. Hence, the discount factors and forward rates are fully determined once a yield curve is provided.

* Inflation Dynamics: The products priced on this model are linear. The measure change calculations yields in analytical solution with respect to inflation curve which depends only on the quantities obtained from the inflation yield curve at time zero, that is no volatility dependence of PV and risk sensitivities of products. Hence, the inflation discount factors and forwards are fully determined once a yield curve is provided.

### 2.3.2 Model Inputs

#### 2.3.2.1 Market Inputs

The following market inputs are used by the DBOPT-RateDeterministic_InflationDeterministic and DBX- RateDeterministic_InflationDeterministic models:

* Interest Rate Curve: This is constructed from market observables, such as cash rates, futures or interest rate swaps.

* Inflation Curve: This is constructed from market observables, such as inflation swaps, and the historical CPI figures.

#### 2.3.2.2 Model Parameters

The model parameters applying to DBOPT-RateDeterministic_InflationDeterministic and DBX- RateDeterministic_InflationDeterministic models are listed in Section 1.3.

### 2.3.3 Model Dynamics

The products considered in this MVR contain no optionality embedded. Such products can be replicated statically. Notice that this does not mean that their payoff is assumed to be deterministic, but that because of the lack of the optionality their PV is independent on the volatility.

The DBOPT model is one of the (quasi-)analytic pricing models available in the DBAnalytics library. The qualification "quasi" here refers to the fact that DBOPT relies heavily on numerical integration. In particular, for the products covered by this documents, the interest rate curve is used essentially only for the construction of the discount factors, and the inflation curve to express the inflation value at a certain date $T$, $I(T)$, as the underlying of the product. No dependency on the volatility of either the interest rate or inflation is thus needed and for the evaluation of the products a deterministic model, both for interest rate and inflation is sufficient.

Whereas DBX model - a Monte-Carlo model work by formulating the pricing problem to solve a particular expectation (the discounted payoff) under the risk-neutral measure. For simple linear products this should be done by simulating underlyings according to an intrinsic calculation.

When intrinsic calculations are invoked (i.e. CalcIntrinsic is set to 1) then the number of simulations used is set to one and the required random numbers for all the factors are set to zero. When intrinsic calculations are not invoked but all volatilities are zero, then the Monte-Carlo engine is 'smart' in the sense that it does not require a full simulation. In this case the number of simulations is also set to one and the required random numbers for all the factors are set to zero. The relevant forwards are centered so the result of the Monte-Carlo simulation in these two intrinsic cases is that each underlying factor follows the forward.

#### 2.3.3.1 Model Theory

The core computations of the RateDeterministic_InflationDeterministic framework reduces to curve interpolation and extrapolation.

#### 2.3.3.2 Model Implementation

DBA allows the creation of inflation curves from a set of instruments, namely inflation forwards, zero-coupon swaps and year on year swaps. That is, a continuum of - theoretical - discount factors $D_I(t)$ with maturity $t$ that reprices these instruments. In DBA this is done by creating an object of type "CURVE" with "UseType=INFLATION" and "CurveType=SPREAD".

Before going into the relation between these discount factors and inflation indices it's useful to recall some facts about inflation. These are taken from the FO document [7].

Inflation indices are computed monthly with the value for a specific month published at a later month, usually the 15th of the following month. E.g. the inflation value for August is published on the 15th of September. DBA curves can store past values of inflation in a table of "CPIFigures" with a column for "Date", the date to which the inflation figure refers to, and an "Index" column for the corresponding inflation index value published. In the example above the index refers to a whole month, in this case August, but since we need to input a specific date, DBA takes the convention of using the 1st of the month. So the user will have to input 01-Aug-14.

Another important idea is that of inflation lag, specified in the curve via "InflationDelayInput", which is an attribute of inflation indices. This is a time delay, typically specified as a number of months, which is applied to inflation product's set dates in order to retrieve the relevant inflation value. For example it is "3M" for USCPI, FRCPXTOB and CPXTEMU and 2M for UKRPI. In addition to this, there's an "InflationInterpolation" input which can be set to either FLAT (or PWCONST_L) or DIR (also LINEAR), including DIR-10 (aka LINEAR-10) and FLAT-15 (aka PWCONST_L-15).

These two inputs work together to retrieve a fixing in the following way. Say for example an inflation swap has a fixing on the 23rd of November. In order to obtain the corresponding inflation value we need to first apply the InflationDelayInput, say 3M, which takes us back to August. Because we're in the past we have a fixing for August but also for September, and this is where InflationInterpolation is used. If it's FLAT, the inflation value will simply be the August one. If it's DIR, it will be a linear combination of the August and September inflation values, although the weight will depend on the product's fixing date. More precisely the inflation value for DIR will be,

$wI(1st\, August) + (1 - w)I(1st\, September) \text{ where } w = \frac{1Dec - 23Nov}{1Dec - 1Nov}.$

The last entry in the table of CPIFigures is known as "LastKnownIndex" and it's used as the spot value for inflation. Inflation values after the last CPI index require the discount factors $D^I(t)$ bootstrapped to inflation instruments. Since we're using an interest rate curve to parametrize inflation values, we need to take into consideration its "ValuationDate", the date at which discounting starts (i.e. "today") and where discount factor equals one. However this date happens after the last CPI date, hence we need to shift dates by the difference between valuation date and last known index date. The difference is known as "InflationDelayOutput" and although the curve contains an input field for it, this is actually ignored and the user can not override this delay,

$\text{InflationDelayOutput} = \text{ValuationDate} - \text{LastCPIDate}. \tag{3}$

Given discount factors, inflation values for dates after last CPI date are given by

$I(date) = \frac{I_{LastCPIDate}}{D^I(date + InflationDelayOutput)}. \tag{4}$

so that when $date = LastCPIDate$ we have $I(lastCPIDate) = I_{LastCPIDate}$ as required.

The curve $D^I(t)$ is bootstrapped from instruments input in a "Swap" table with "SettlementDate" (optional, it overrides the curve's SettlementDate), "Maturity" and "ZeroRate" (the market coupon rate).

At the risk of overcomplicating things we're going to introduce further notation to describe curve instruments and inflation products in general. Given a security's "SetDate" $t$, we define $I_t$ as the inflation value after applying InflationDelayInput and InflationInterpolation. So we have for FLAT

$$\bar{I}_t = I(⌊t-\text{input}⌋),$$
$$= \frac{I_{lastCPIDate}}{D^I(⌊t-\text{input}⌋+output)}.$$

and DIR

$$\bar{I}_t = w(t)I(⌊t-\text{input}⌋) + (1 - w(t))I(⌊t-\text{input}⌋+1M),$$
$$= w(t)\frac{I_{lastCPIDate}}{D^I(⌊t-\text{input}⌋+output)} + (1-w(t))\frac{I_{lastCPIDate}}{D^I(⌊t-\text{input}⌋+1M + output)},$$

where "input" means "InflationDelayInput", "output" means "InflationDelayOutput" and $⌊t-\text{input}⌋$ denotes date $t$ delayed by "InflationDelayInput" and moved further to the first of the month. Equations (5) and (6) are applied whenever $⌊t-\text{input}⌋$ is on or before "LastCPIDate" and (5) and (6) otherwise.

Note that if $⌊t-\text{input}⌋+output$ is equal to last CPI date, in equation (6), the inflation value multiplying $w$ can be obtained from the CPI figures and the other one needs forecasting from the curve, hence the need of inflation delay output, i.e. equation (4), for consistency.

The intention behind this notation is to separate the dates given by a security schedule and the dates when inflation look ups actually occur. So for a given fixing date $t$, the look up in the CPIFigures table happens at $⌊t-\text{input}⌋$, the look up at the discount curve happens at $⌊t-\text{input}⌋+output$. Note that for DIR, the weight is computed at $t$, the un-shifted date.

Inflation swap instruments have the following payoff,

$$\frac{\bar{I}_T}{\bar{I}_S} = (1+K)^{\theta},$$

where $K$ is the "ZeroRate" input, $S$ the start date, and $T$ the maturity of the instrument.

If the instrument is a ZCSwap, then $S$ is the instrument's start or settlement date (the curve's SettlementDate if this is not provided in the instrument's table), and $T$ is the maturity provided in the swap's table. The accrual factor $\theta$ is computed as the difference between maturity and start as a whole number of months or years.

If the instrument is YoY, $S$ is $T$ minus one year, and $\theta = 1$.

The curve is built by bootstrapping discount factors via equations (5), (6) and (7). The method depends on input "BuildMethod". For example, "LinearZero" bootstraps linear yields at a set of pillar dates and interpolates linearly.

But note that in inflation, the set of curve pillar dates is given by the instrument maturities, shifted backwards by inflationDelayInput and then back to the first of the month if interpolation is FLAT, or to the next months' first date if DIR, and finally forward by inflationDelayOutput amount.

So the curve's pillar dates are given by $⌊T_i - input⌋+output$ for instrument maturities $T_i$ for FLAT, and $⌊T_i - input⌋+ 1M + output$ for DIR (i.e. the right bracketing date). A discount factor in this case is then given by

$$D^I(t) = \exp\left(\frac{-y_t(t - ValuationDate)}{365.25}\right),$$

with $y_t$ linearly interpolated between the pillar dates.

The swap's table interface doesn't differentiate between the two type of instruments however. ZCSwaps are always used for maturities greater than 1Y (350 days to be precise) and YoY for smaller maturities by default - in order to avoid having the denominator in the future. There is an input, "ShortEndInflationInterpolation" (with default value YoY) which can also take the value "FLAT" which means that ZCSwaps with fixings on the first of the month are used for maturities up to one year instead of YoY.

Furthermore, if inflation interpolation is DIR, the short term instruments (with maturity less than 350 days) will have fixings on the first of the month, whether these are YOY or zero coupon swaps. This means that for maturities under one year, with DIR interpolation, the weight in (6) and (6) is one so at the pillar dates it coincides with FLAT, and linear otherwise.

It is a known empirical fact that the observed inflation is subject to significant seasonality effects. In particular, inflation tends to have a seasonal component and component associated with festive seasons. The DBAnalytics models the seasonality effect using a Spreads table, which is specified in the inflation curve object, and contains a set of 12 dates (one for each month), specifying the multiplicative adjustment factor that is applied on top of the projected long term inflation for the specified date:

$$I_{adj}(T) = I_{unadj}(T) \cdot S(T)$$

#### 2.3.4 Model Calibration

Since the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic model does not use any volatility object, no volatility calibration is required. For details on the curve construction methodologies, we refer to the curve primer [3].

#### 2.3.5 Risk Sensitivities

Table 16 lists the risk sensitivities that are returned by the model, along with their corresponding DBA mode. In particular, the sensitivities and their modes are used to produce the test results in Section 4.

| Risk sensitivity | Underlying | DBA Mode | Comments |
| Delta | IR and Inflation Curve | FLATDELTA | The CURVE is shifted up by 1 bp absolute, i.e. PV(base) - PV(Up1bp) where Up1bp shifts the curve up by 1bp in absolute value. |
| OISSpreadDelta | IR Curve | FLATOISSPREADDELTA | The Spread within the OIS-Spreads table of the CURVE are shifted up by 1 bp absolute. |
| DiscountSpreadDelta | IR Curve | DISCOUNTSPREADDELTA | The Spread within the Dis-countSpreads table of the CURVE are shifted up by 1 bp absolute. |
| SpotLiborSpreadDelta | IR Curve | FLATSPOTLIBORSPREADDELTA | The Spread within the SpotLi-borSpreads table of the CURVE are shifted up by 1 bp absolute. |

Table 16: Risk sensitivities and their corresponding DBA modes.

All risk sensitivities are computed using the "shift/ bump and reprice" method, i.e. the DBA modes evaluate a dictionary before and after shifting the entries of the respective subtable(s) of a CURVE object (i.e. IRCURVE or INFLATIONCURVE).

#### 2.3.6 Model Outputs

We can extract from the model the PV and the risk sensitivities ("greeks") relative to changes in parameters such as interest rate and inflation curve moves. In particular, the main risk sensitivity of interest is Delta. Further risk sensitivities are the OIS spread delta, discount spread delta, and spot Libor spread delta.

### 2.4 Feeder and Servicer Models

The model DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic has no direct servicer or feeder models.

### 2.5 Model Change Description

DBAnalytics model developers log model changes in release notes, which are available through a dedicated website. In the release note, model developers identify the scope of the change made for the Product-Model combinations it is related to and how it can be identified through the library interface. Pricing model changes are categorised into major, minor, technical, non-model and other. The proposed change category is reviewed, and agreed by MoRM on the DBAnalytics website.

The changes not relating to pricing models or risk modes are currently not subject to validation, MoRM review the classification to ensure no pricing model related changes are misclassified. MoRM will only validate major and minor classified model changes.

In the following, we give a detailed description of the model changes in scope of this validation. The model changes are taken from MARS and are arranged in chronological order, beginning with the oldest.

• Release Note ID: 830_94, 880_71

• Description of Model Change:
  830_94 (Minor): Code changes to support ClearingSpreads for CURVE with UseType = INFLATION.
  880_71 (Non-model): The new field UseInflationClearingSpreads now has to be set to YES for Clear-
  ingSpreads to work in an inflation curve. This helps to control the usage of the feature with the filter object.

• Model Configuration:
  DBOPT-RatesMarketDeterministic_InflationDeterministic

• PRDS Product:
  —

• See Section 4.1.10 for model change testing results.

Request ID 18923

• Release Note ID: 1140_40, 1150_64

• Description of Model Change:
  1140_40 (Technical): A new feature for inflation CURVEs. The ClearingSpreads subtable is now supported in case InflationInterpolation=DIR, for example with USCPI CURVEs.
  1150_64 (Non-model): For DIR inflation CURVEs (e.g. USCPI), inflation clearing spreads are now activated only when UseInflationClearingSpreads=YES, otherwise any attempt to use inflation clearing spreads on a DIR curve would raise an error. Add FILTER rule to enforce UseInflationClearingSpreads=NO in case of DIR inflation CURVEs, pending MoRM approval.

• Model Configuration:
  DBOPT-RatesMarketDeterministic_InflationDeterministic

• PRDS Product:
  —

• See Section 4.1.11 for model change testing results.

### 2.6 Validation Outline

In this section, we give a description of the tests undertaken in the independent model validation in Section 4 as well as a list of the corresponding testing files. Accordingly, the first part of the section is dedicated to a model specific testing, where we provide an overview of the key features of the DBA methodology for the construction of the inflation curve. In particular, we compare the DIR and FLAT methods, test the inflation delay parameter, and deal with the issue of seasonality. We also address the comparison of several different build methods and in carry out a full implementation of the inflation curve.
In the second part, we investigate product specific features in accordance to the trade categorization taxonomy, which provides a systematic testing framework to validate the PM pairs approved for both the models. In particular, for each product category, we conduct stress tests under interest rate and inflation curve shifts for price and delta, as well as a test of the Taylor expansion consistency. We further conduct stress tests under the recent CCAR 2023 and IRRBB scenarios and carry out a multivariate test in which all underlying risk factors are simultaneously stressed.
Eventually, in the third part, we briefly describe the Model Parameter Monitoring testing of the DBOPT- RateDeterministic_InflationDeterministic and DBX- RateDeterministic_InflationDeterministic models.

#### 2.6.1 Model Specific Testing

The model specific testing files are listed in Table 17. The files are available from the SVN repository:

https://mars-svn.risk.intranet.db.com/doc/ModelApproval/branches/uat/mvdocs/ModelValidationReports/DBOPT-RateDeterministic_InflationDeterministic/.

| Test | Section | Testing File* |
|------|---------|--------------|
| Inflation Interpolation (DIR and FLAT) | §4.1.1 | ModelTesting_Testing.py <br> LINEAR_10.ipynb |
| Inflation Delay | §4.1.2 | ModelTesting_Testing.py <br> LINEAR_10.ipynb |
| Inflation Seasonality | §4.1.3 | ModelTesting_Testing.py <br> LINEAR_10.ipynb |
| Repricing instruments | §4.1.4 | ModelTesting_Testing.py |
| BuildMethodCutOff | §4.1.5 | BuildMethodCutOff.ipynb |
| Build Method Comparison | §4.1.6 | BuildMethod_HybridConstantForward.ipynb <br> BuildMethod_ConstantForward.ipynb <br> BuildMethod_CubicZero.ipynb <br> BuildMethod_HybridForward.ipynb <br> BuildMethod_LinearForward.ipynb <br> BuildMethod_LinearZero.ipynb <br> BuildMethod_QuadraticForward.ipynb <br> BuildMethod_QuadraticZero.ipynb |
| FlatInflationInterpLimit | §4.1.7 | FlatInflationInterpLimit.ipynb |
| InflationInterpolation MODFLAT | §4.1.8 | InflationInterpolationMODFLAT.ipynb |
| Independent Implementation of Inflation Curve | §4.1.9 | InflationCurve_Testing.py |
| Inflation Rates with Bilateral Clearing (InflationInterpolation = FLAT) | §4.1.10 | inflib.py |
| Inflation Rates with Bilateral Clearing (InflationInterpolation = DIR) | §4.1.11 | InflClearingSpreads_USCPI_testing.py |

Table 17: List of Model Testing Files.

#### 2.6.2 Product Testing

#### 2.6.2.1 End of Day Testing

Stress Testing

For the stability tests, we compute for all the products tested the PV and Flatdelta under absolute interest rate and inflation curve shifts. The range of the curve and volatility shifts are given in Table 174 for EOD testing. That is, the absolute interest rate and inflation curve shifts range from −500 to 500 bps. It is expected that all profiles of the considered products exhibit a smooth behaviour under the shifts and are in line with the intuition of the functionality of the product.

Taylor Expansion Consistency Testing

In the Taylor expansion consistency testing, we check whether the DBA calculated prices are consistent with the Taylor approximation as calculated from the PV, Flatdelta, and Flatgamma for shifts in the interest rate and inflation curves.

The Taylor formula used for the approximation is a simplified version of the 2-variable Taylor expansion of the price $P(s^{\text{IR}}, s^{\text{Infl}})$ as a function of the interest rate and inflation spots. More precisely, we choose to approximate $P(s^{\text{IR}}, s^{\text{Infl}})$ in a neighbourhood of the production values $(s_0^{\text{IR}}, s_0^{\text{Infl}})$ by means of the expression

$P(s^{\text{IR}}, s^{\text{Infl}}) \sim P((s_0^{\text{IR}}, s_0^{\text{Infl}}) + (s^{\text{IR}} - s_0^{\text{IR}})\frac{\partial P}{\partial s^{\text{IR}}}(s_0^{\text{IR}}, s_0^{\text{Infl}}) + \frac{1}{2}(s^{\text{IR}} - s_0^{\text{IR}})^2\frac{\partial^2 P}{\partial(s^{\text{IR}})^2}(s_0^{\text{IR}}, s_0^{\text{Infl}})$

$+ (s^{\text{Infl}} - s_0^{\text{Infl}})\frac{\partial P}{\partial s^{\text{Infl}}}(s_0^{\text{IR}}, s_0^{\text{Infl}}) + \frac{1}{2}(s^{\text{Infl}} - s_0^{\text{Infl}})^2\frac{\partial^2 P}{\partial(s^{\text{Infl}})^2}(s_0^{\text{IR}}, s_0^{\text{Infl}})$
in a small neighbourhood of $(s_0^{\text{IR}}, s_0^{\text{Infl}})$, i.e. for some value of $\delta$ such that $s_0^{\text{IR}} - \delta \leq s^{\text{IR}} \leq s_0^{\text{IR}} + \delta$ and $s_0^{\text{Infl}} - \delta \leq s^{\text{Infl}} \leq s_0^{\text{Infl}} + \delta$. In terms of the risks involved, represented by the Greeks $\Delta$ and $\Gamma$, we can equivalently rewrite the previous approximation as

$$P(s^{\text{IR}}, s^{\text{Infl}}) \sim P(s_0^{\text{IR}}, s_0^{\text{Infl}}) + (s^{\text{IR}} - s_0^{\text{IR}})\Delta(s_0^{\text{IR}}, s_0^{\text{Infl}}) + \frac{1}{2}(s^{\text{IR}} - s_0^{\text{IR}})^2\Gamma(s_0^{\text{IR}}, s_0^{\text{Infl}})$$

$$+ (s^{\text{Infl}} - s_0^{\text{Infl}})\Delta(s_0^{\text{IR}}, s_0^{\text{Infl}}) + \frac{1}{2}(s^{\text{Infl}} - s_0^{\text{Infl}})^2\Gamma(s_0^{\text{IR}}, s_0^{\text{Infl}}).$$

The motivation for the choice of our approximating formula appears clear, as we choose to approximate the PV surface around the production point $(s_0^{\text{IR}}, s_0^{\text{Infl}})$ through the hedging instruments customarily used by the Front office to hedge the products, discarding the remaining terms present in the second degree expansion of the Taylor formula.

#### 2.6.2.2    CCAR Testing

The CCAR methodology is included in the general stress testing framework as described in Standardized Shock Primer document [11]. This, in particular, includes a construction of CCAR stressed market data objects for adverse and severely adverse stress scenarios which have been reviewed and validated in [12], [13], [14], [15], [16]. For the purpose of this validation, CCAR market data objects are treated as given inputs and the main objective is to test the behaviour of a product-model pair in the CCAR stressed pricing contexts including convergence and stability of the returned PV and risk sensitivities.

We consider three separate scenarios in testing:

1. Base Scenario: This is the market data used in end of day pricing on the valuation date.

2. CCAR 1: This is the 2023 CCAR adverse Scenario. In terms of the market data relevant to the testing product, shocks are applied to all relevant objects in the EOD pricing dictionary as given by MoRM.

3. CCAR 2: This is the 2023 CCAR severely adverse scenario. In terms of the market data relevant to the testing product, shocks are applied to all relevant objects in the EOD pricing dictionary as given by MoRM.

The tests performed follow closely the EOD tests performed on the products for convergence and stress testing. Specifically, we test under the given scenarios whether the PV, and Flatdelta are stable as the interest and inflation curves are shifted in parallel between [-5%, 5%], cf. Table 174. Again, it is expected that all profiles of the considered products exhibit a smooth and the correct behaviour under the applied shifts.

#### 2.6.2.3    IRRBB Testing

Interest rate stress tests are conducted in this MVR according to the ten different scenarios defined under the IRRBB framework. This framework is part of the Basel capital frameworks Pillar 2 (Supervisory Review Process).

The BCBS document [17] describes eight Interest Rate shock scenarios that are required to be applied to IRRBB exposures in each currency for which a bank has material positions in the Banking Book. Eight Interest Rate currency dependent shock scenarios are prescribed that reflect currency-specific absolute interest rate shocks. Two of them (Steepener and Flatterner) have been extended to take their opposite shift in order to define two additional scenarios: Steepener Negative and Flattener Negative. The IRRBB Interest Rate scenarios are summarised as follows:

• Parallel shock up

• Parallel shock down

• Steepener shock (short rate down and long rates up)

• Steepener negative shock (opposite steepener shift)

• Flattener shock (short rates up and long rates down)

• Flattener negative shock (opposite flattener shift)

• Short rates shock up

• Short rates shock down

• Long rates shock up

• Long rates shock down

Further to the above, the 10 IRRBB scenarios are augmented with a relative shift on the volatility of 25%.

Specifically, we test under the given IRRBB scenarios whether the PV is stable as the interest and inflation curves are shifted in parallel between [-15%, 15%], cf. Table 174. All PV profiles are expected to exhibit a smooth and the correct behaviour under the applied shifts.

#### 2.6.2.4    VaR/Multivariate Testing

In the MultiVar test we check the trade PV dependence under simultaneous stress of the risk factors of the trade. The PV change from different risk factors may have positive/negative effect on the PV. To avoid a possible cancellation, we take into account the sign of the partial derivatives of the PV for the risk factors under study. Thus, we will be able to see what are the maximal/minimal values PV have in the risk factors defined region.

The PV of the trade can be written as follows

$$\text{PV}(x_1, \cdots, x_n),$$                                                                                                                      (9)

where the arguments $(x_1, \cdots, x_n)$ represent the various risk factors. We denote by $x_i^{\text{EOD}}$ the actual (End-of-Day) values and with $x_i^{\text{LOW}} \leq x_i^{\text{EOD}} \leq x_i^{\text{HIGH}}$ the local lower and upper bounds of the risk factors.

We define two functions of a single variable $\lambda$, defined in the interval $[0, 1]$:

$$f^{\text{UP}}(\lambda) = \text{PV}(x_1^{\text{EOD}} + \lambda \cdot (x_1^{\text{EDGE UP}} - x_1^{\text{EOD}}), \ldots, x_n^{\text{EOD}} + \lambda \cdot (x_n^{\text{EDGE UP}} - x_n^{\text{EOD}}))$$                                                               (10)

$$f^{\text{DOWN}}(\lambda) = \text{PV}(x_1^{\text{EOD}} + \lambda \cdot (x_1^{\text{EDGE DOWN}} - x_1^{\text{EOD}}), \ldots, x_n^{\text{EOD}} + \lambda \cdot (x_n^{\text{EDGE DOWN}} - x_n^{\text{EOD}}))$$                                                           (11)

where

$$x_i^{\text{EDGE UP}} = 
\begin{cases}
x_i^{\text{LOW}}, \frac{\partial \text{PV}(x_1, \cdots, x_n)}{\partial x_i} < 0 \\
x_i^{\text{UP}}, \frac{\partial \text{PV}(x_1, \cdots, x_n)}{\partial x_i} \geq 0
\end{cases}$$                                                                                                                     (12)

$$x_i^{\text{EDGE DOWN}} = 
\begin{cases}
x_i^{\text{LOW}}, \frac{\partial \text{PV}(x_1, \cdots, x_n)}{\partial x_i} \geq 0 \\
x_i^{\text{UP}}, \frac{\partial \text{PV}(x_1, \cdots, x_n)}{\partial x_i} < 0
\end{cases}$$                                                                                                                     (13)

Note that for $\lambda = 0$ the two functions match the EOD price, that is: $f^{\text{UP}}(0) = \text{PV}(x_1^{\text{EOD}}, \ldots, x_n^{\text{EOD}}) = f^{\text{DOWN}}(0)$, and for $\lambda = 1$ we have:

$$f_{\text{UP}}(1) = \max(\text{PV}(x))$$

and

$$f_{\text{DOWN}}(1) = \min(\text{PV}(x)),$$

where $x$ is the set of all possible values of the risk factors.

The function $f^{\text{UP}}$ is the function that represents the maximum possible value of the PV, and the function $f^{\text{DOWN}}$ is the function that represents the minimum possible value of the PV.
$$i_{Rate}(T) = \left( \frac{I_{Rate}(T)}{I(T_0)} \right)^{\frac{1}{T-T_0}} - 1 \quad \text{for } \mathrm{T} - \mathrm{T}_0 \geq 1,$$

$$i_{Rate}(T) = \frac{I_{Rate}(T)}{I_{Rate}(T - 1y)} - 1 \quad \text{for } \mathrm{T} - \mathrm{T}_0 \geq 1. \quad \quad \quad \quad \quad \quad (14)$$

Therefore, the mapping of the inflation curve to a rate curve is expressed by the following relation:

$$I (T) = \frac{I (T_0)}{D (T - nM)} \cdot S(T - nM)IF (T), \quad \quad \quad \quad \quad \quad (15)$$

where the function $D(x)$ is the DBA DiscFact function, $S(x)$ accounts for seasonality, the factor $nM$ measures the inflation delay and $IF (T)$ represents the interpolation factor to determine the value of the inflation rate at a specific month (within two consecutive nodes of the interpolation).

The seasonality factor $S (T - nM)$ is an adjustment factor that is taken into account as it is observed in the market that inflation is not constant along the year, but it is higher during some months and lower during some others. Similarly, the presence of an inflation delay factor $nM$ is justified by the standard market practice to evaluate the inflation index at a certain month subject to an inflation lag, typically of 2 or 3 months, and we take that into account by shifting back of $n$ months in time to get the index fixing. It is general market practice in inflation curve construction that these effects should be taken into consideration, cf. [8].

An interpolation scheme is specified by the BuildMethod field. We analyse a wide range of interpolation schemes in Section 4.1.6, where we make sure that the interpolation methods approved for interest rate curves apply as well to the inflation curves.

A good interpolation method should give both a smooth curve (before seasonality) and locality of risks. The curve smoothness ensures that forwards are continuous and possibly smooth, which is a generally desirable property from the perspective of financial modelling. On the other hand, locality of risks, implies that the hedges that can be constructed using such interpolation method are sensible and stable. We have analysed several interpolation schemes from this point of view and concluded that, although from the pricing point of view there are no remarkable differences, as the curves constructed are all smooth, when applied to the risks some interpolation methods show non-locality and instability of the hedges. We have thus selected the two Build Methods Constant_Forward and Hybrid_Constant_Forward as the most reliable for the correct pricing and evaluation of the inflation derivatives covered by this MVR.

## Locality of Risks
### Hybrid_Constant_Forward

![Figure 1](./Fig/1.png)

Figure 1: The locality of the risks in the build method Hybrid_Constant_Forward. The hedging quantities $H_i(T)$, represented here, are calculated as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for an instrument with maturity $T = 5Y6M$. These quantities are equal to zero when $T_i$ is far from $T$ and the nonzero $H_i(T)$ are concentrated, almost symmetrically, for nodes $i$ such that $T_i$ is close to the maturity $T = 5Y6M$, showing locality of the risks and stability of the resulting hedges, as desired.

![Figure 2](./Fig/2.png)

Figure 2: The locality of the risks in the build method Constant_Forward. The hedging quantities $H_i(T)$, represented here, are calculated as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for an instrument with maturity $T = 5Y6M$. These quantities are equal to zero when $T_i$ is far from $T$ and the nonzero $H_i(T)$ are concentrated at nodes $i$ such that $T_i$ is close to the maturity $T = 5Y6M$, showing locality of the risks and stability of the resulting hedges, as desired.

After this realization, the focus shifts to the reconstruction of the interpolation methods used to construct the inflation curve. The interpolation scheme is used to obtain the discount factors for intermediate dates (i.e., dates between two consecutive maturities as given in the swap subtable of the curve, nodes of the interpolation). In Section 4.1.9 we present the results of our general independent interpolation of the inflation curve, which shows that we are able, using a specific interpolation scheme, to manually re-obtain inflation rates that match almost perfectly the ones obtained through the DBA GetInflationValue function. This last result, in particular, shows the correctness of the implementation of the inflation curve within the DBA framework.

![Figure 3](./Fig/3.png)

Figure 3: The results of independent implementation of the inflation curve. The figures show the comparison between the outputs from our independently implemented inflation curve and the DBA inflation curve. The top graphs show the values of projected inflation (left) and the equivalent inflation rate (right) extracted from the two inflation curves for month start dates for maturities upto 70 years. The curves on the two graphs are indistinguishable to the eye (the difference is close to the order of machine precision). The difference between the two curves is shown in the bottom graphs for projected inflation (left) and inflation rate (right).

## 3.2.2 Assessment of Calibration Approach

Since the volatilities of interest and inflation rates are zero in the DBOPT-RateDeterministic_InflationDeterministic and DBX-RateDeterministic_InflationDeterministic models, no volatility calibration is required. Moreover, the interest and inflation curves are directly read from the DB market rates library, so no calibration of the calibration approach is required.

## 3.3 Assessment of Model Assumptions and Limitations

The model assumptions and limitations are listed in Sections 2.3.1 and 5.1.1, respectively. In particular, the list of model assumptions and limitations is deemed complete and there is no relevant missing item that should be added to the documentation.

### 3.3.1 Assessment of Model Assumption

Table 20 lists the model assumptions and gives a statement on their conceptual suitability.

| Assumption | Conceptual Suitability |
|------------|------------------------|
| No Arbitrage | The assumption that there are no arbitrage opportunities is a fundamental assumption for all realistic models that are used for pricing/ hedging derivatives. Since the volatilities of interest rates and inflation are zero in the DBOPT-RateDeterministic_InflationDeterministic model, the modelling of interest rates and inflation reduces to the construction of applicable interest and inflation curves from market instruments, which is arbitrage-free. |
| Interest Rates Dynamics | The products priced on this model are linear. The measure change calculations yields in analytical solution with respect to interest rate curve which depends only on the quantities obtained from the yield curve at time zero, that is no volatility dependence of PV and risk sensitivities of products. Hence, the discount factors and forward rates are fully determined once a yield curve is provided. |
| Inflation Dynamics | The products priced on this model are linear. The measure change calculations yields in analytical solution with respect to inflation curve which depends only on the quantities obtained from the inflation yield curve at time zero, that is no volatility dependence of PV and risk sensitivities of products. Hence, the inflation discount factors and forwards are fully determined once a yield curve is provided. |

Table 20: Model assumptions and their conceptual suitability.

### 3.3.2 Assessment of Model Limitations

There are currently no limitations associated to the model, hence no assessment of model limitations is required.

## 3.4 Expert Judgements in the Model

In addition to the model specification detailed in Section 2.3, the market inputs specified in Section 2.3.2.1 are subject to IPV process and the following model parameters are subject to the following expert judgement:

* There are currently no model parameters calculated using expert judgement.

## 3.5 Assessment of Model Documentation

Model users are responsible for seeking model validation for all new model and product combinations prior to use, through the submission of Model Approval Requests in line with the documentation standards set out by MoRM. Documentation should be sufficient to permit independent review and to facilitate potential replication and/or upgrade of the model by others, independent of the original developer.

The following steps are carried out in evaluating the Model Approval Request submissions:

* Upon being assigned to the Model Approval Request, the Primary Approver must review the submission to confirm completeness and adequacy against the minimum standards.

* If the Model Approval Request does not comply with submission standards or if additional information is required, the Primary Approver will reject the request and clearly document the reasons for this as well as follow up actions required by model owner/developer submitting the request, prior to resubmission.

MoRM will not commence validation until the Model Approval Request is accepted.

At any time during the validation process, MoRM have the right to request additional information they deem necessary for effective validation, even if outside the submission requirements listed in this document. MoRM may also ask for the model documents to be updated during the course of the validation. Additional supporting information obtained during the validation is also recorded in MARS.

The pricing model developer document requirements to check:

| Section | Content | MoRM check |
|---------|---------|------------|
| Executive summary | | |
| | Model Developer<br>Documentation Info<br>Model configuration<br>Product Owner<br>Business Area, Line or Asset Class<br>Risk Management Systems | Yes<br>Yes<br>No<br>Yes<br>Yes<br>Yes |
| Products description | | |
| Product Scope | PRDS name and definition<br>NPA Reference<br>Mathematical description of the payoff<br>Product contractual parameters<br>Product scripting | Yes<br>Yes<br>Yes<br>Yes<br>Yes |
| Product grouping | | |
| Product model appropriateness | Product main characteristics and features | Yes |
| Model appropriateness for products it will be used for | Product-Model Combination appropriateness | Yes |
| Product Risk factor identification | Key Risk factors<br>Risk sensitivities<br>Calibration instruments<br>Products calibration instrument choice | Yes<br>Yes<br>Yes<br>Yes |
| Product model weakness identification | Product-Model Combination Limitations | Yes |
| Model Configuration Testing and Results | | |
| Convergence and stability tests | | Yes (convergence tests not relevant) |
| Limiting case and alternative model testing | | Yes (replication testing) |
| Calibration algorithm and risk sensitivities | | Not relevant |
| Risk factor tests | End of Day condition and VAR<br>CCAR and EBA conditions<br>IRRBB | Yes<br>Yes<br>Yes |
| Testing evidence | | Yes |
| Implementation testing and justification of model behaviour | | Yes |
| Model configuration testing | | Yes |
| References | | Yes |

Table 21: Review of model developer document.

## 3.6 IT Implementation Testing

For Pricing models, implementation refers to DBA releases and deployment refers to integrating them into risk calculators. The deployed model library executable code must be held in a secure and controlled environment or embedded in a system which is held in a secure and controlled environment.

DBAnalytics production system reconciliation: Independent model validation testing is undertaken using DBAnalytics. Since no additional processing of DBAnalytics is undertaken and no further external analytics are being run in strategic production systems, it can be assured that model output produced with a consistent version of DBAnalytics will yield equivalent results whether run locally by individual users or in official production systems.

The following implementation tests have been carried out by DBA:

* Price Replication Tests:
  Verification of the performance of the DBOPT-RateDeterministic_InflationDeterministic model by replicating the PV in Excel through interpolation of interest rates and inflation curves.

* Sensitivity Analysis:
  PV and Flatdelta as a function of parallel interest rate and inflation curve shifts.

* Risk Factor Tests:
  Verify the PV behaviour of the products with respect to risk factor shifts.

* Scenario Analysis:
  Verify the PV behaviour of the products under applicable VaR scenarios, CCAR shocks, and IRRBB scenarios.

# 4 Independent Validation Testing

## 4.1 Model Specific Testing

### 4.1.1 Inflation Interpolation

We begin our testing of the model by focusing on the Inflation Interpolation methodology, and it's impact on the projected inflation forwards. In particular, DBAnalytics supports two types of curve interpolation, namely FLAT and DIR (see equations 5 and 6). In Figure 4 we show the impact of the choice of interpolation on the projected inflation forward (obtained from the inflation curve using the DBAnalytics GetInflationValue function). The resulting behaviour, for both interpolation types, is fully consistent with equations 5 and 6.

![Figure 4: Forward Inflation (DIR vs FLAT)](./Fig/4.png)

Figure 4: Illustration of the impact of choice of inflation interpolation on projected inflation forwards. The plot compares DIR and FLAT interpolation settings. Both curves show expected behaviour of inflation forwards.

While it is most common to interpolate linearly between the 1st of each month, in Tokyo the inflation interpolation runs from the 10th to the 10th of the following month, the linear interpolation between those dates are run with "InflationInterpolation = LINEAR-10". In Figure 5 we compare between the interpolations LINEAR-10 and FLAT and compare with the manual calculation of inflation forward. We see consistent results. For this test, we use the Japanese inflation index JCPNJGBI.

![Figure 5: Forward Inflation (LINEAR-10 vs FLAT) and (LINEAR-10 vs MANUAL)](./Fig/5.png)

Figure 5: Illustration of the impact of choice of inflation interpolation on projected inflation forwards. The first plot compares LINEAR-10 and FLAT interpolation settings. Both curves show expected behaviour of inflation forwards. The second plot shows same results when comparing inflation forward calculation with LINEAR-10 and manual interpolation. For this test, we use the Japanese inflation index JCPNJGBI.

While it is most common to interpolate linearly between the 1st of each month, in Israel the inflation interpolation runs from the 15th to the 15th of the following month, the flat interpolation between those dates are run with "InflationInterpolation = FLAT-15". In Figure 6 we compare between the interpolations FLAT-1 and FLAT-15 and compare with the manual calculation of inflation forward. We see consistent results. For this test, we use the Israelian inflation index ISCPIL.

![Figure 6: Forward Inflation (FLAT-15 vs FLAT-1) and (FLAT-15 vs MANUAL)](./Fig/6.png)

Figure 6: Illustration of the impact of choice of inflation interpolation on projected inflation forwards. The first plot compares FLAT-15 and FLAT-1 interpolation settings. Both curves show expected behaviour of inflation forwards. One can see jumps on the FLAT-15 graph in the middle where FLAT-1 is constant as expected because the inflation forward jumps in the 15th of a month, in the middle where FLAT-1 jumps (the 1st of the month). The second plot shows same results when comparing inflation forward calculation with FLAT-15 and manual interpolation.

### 4.1.2 Inflation Delay

In the current subsection we look at the inflation delay (lag) parameter. This parameter specifies refers to the lag between the date for which the inflation index curve is queried and the actual fixing date of the inflation index corresponding to the date of query. One typically has a lag of a few months between the two, with the fixing date preceeding the later.

In Figure 7 we show the impact of the inflation delay setting on the inflation fowards (obtained using the DBAnalytics GetInflationValue function), for the two interpolation settings DIR and FLAT. For the current test, we use the UKRPI index curve for 20-Feb-2018 COB. The figure shows that, for both the interpolation settings, the 2M delay curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve by the expected offset of two months. This test validates the appropriateness of implementation of the delay functionality in DBAnalytics.

#### Figure 7: Illustration of the impact of delay setting on inflation forward. The plot on the left shows the effect of delay for interpolation setting DIR, while the plot on the right shows the effect of delay for interpolation setting FLAT. For both plots, the 2M delayed curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve. This validates the appropriateness of implementation.For the current test, we use the UKRPI index curve for 20-Feb-2018 COB.

In Figure 8 we show the impact of the inflation delay setting on the inflation forwards (obtained using the DBAnalytics GetInflationValue function), for the interpolation setting LINEAR-10. For the current test, we use the JCPNJGBI index curve for 18-Jan-2019 COB. The figure shows that the 3M delay curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve by the expected offset of three months. This test validates the appropriateness of implementation of the delay functionality in DBAnalytics.

#### Figure 8: Illustration of the impact of delay setting on inflation forward. The plot shows the effect of delay for interpolation setting LINEAR-10. For both plots, the 3M delayed curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve. This validates the appropriateness of implementation. For the current test, we use the JCPNJGBI index.

In Figure 9 we show the impact of the inflation delay setting on the inflation towards (obtained using the DBAnalytics GetInflationValue function), for the interpolation setting FLAT-15. For the current test, we use the ISCPIL index curve for 5-Aug-2019 COB. The figure shows that the 1M delay curve is exactly shifted in a parallel fashion in comparison to the 0M delayed curve by the expected offset of three months. This test validates the appropriateness of implementation of the delay functionality in DBAnalytics.

### 4.1.3 Inflation Seasonality

In the current subsection we look at the impact of seasonality adjustments on the projected inflation forwards. For the current test we consider UKRPI index curve for 20-Feb-2018 COB. In Figure 10 we show the impact of seasonality adjustments on the projected inflation forwards. As expected, the seasonality adjusted curves exhibit oscillations around the unadjusted curves. In order to quantitatively verify the validity of implementation of seasonality in DBAnalytics, we investigate the validity of Equation 8. More specifically, we have compared the ratio of two curves (with seasonality adjustement and without the adjustment) with the seasonality factors that are explicitly specified in the inflation curve object. The results, presented in Figure 11, show a close match. This test validates the appropriateness of implementation of the seasonality adjustment for inflation curves in DBAnalytics.

#### Figure 10: Illustration of the impact of seasonality adjustment. The plot on the left shows the effect of for interpolation setting DIR, while the plot on the right shows the effect for interpolation setting FLAT. For both plots, one can see an expected oscillation of the seasonality adjustment around the unadjusted curve. This validates the appropriateness of implementation. For the current test, we use the UKRPI index curve for 20-Feb-2018 COB.

#### Figure 11: The figure shows a comparison of seasonality factors obtained from the ratio of adjusted inflation forwards and unadjusted inflation forwards, to the input seasonality factors specified in the inflation curve Spread table. The current figure shows the results for interpolation setting FLAT. Qe use the UKRPI index curve for 20-Feb-2018 COB. The close match validates the appropriateness of implementation of the seasonality adjustment for inflation curves in DBAnalytics.

In Figure 12 we show the seasonality adjustments on the projected inflation forwards for the index JCPNJGBI. As expected, the seasonality adjusted curves exhibit oscillations around the unadjusted curves. This test validates the appropriateness of implementation of the seasonality adjustment for inflation curves in DBAnalytics.

### 4.1.4 Repricing Instruments

#### 4.1.4.1 UKRPI

We have repriced ZC swaps referencing the UKRPI index, for 20-Feb-2018 COB. The results are shown in Figure 13, and show a perfect match between ZC inflation rate obtained from directly from the inflation curve using the GetInflationValue function (Input) and the ZC inflation rate obtained from the DBOPT pricing model (Repriced).

#### Figure 13: A comparison of ZC inflation rate obtained directly from the inflation curve using the GetInflationValue function (Input) and the ZC inflation rate obtained from the DBOPT pricing model (Repriced). The results show a perfect match.

### 4.1.5 BuildMethodCutOff

In this section we investigate the body property BuildMethodCutOff which works with InflationInterpolation FLAT takes place.

In the following we a UKRPI curve, with zero rates ranging from 2.6% to 3.75%. The seasonality spreads are set to 1 in most cases and the relevant CPI fixings for the settlement date (29. Aug. 2013) are 249.7 (UKRPI), 116.95 (CPXTEMU), and 125.76 (FRCPXTOB), respectively.

We carry out the following test, illustrated in Figures (14) and (15). Monthly zero rates were used up to 2 years to build the UKRPI curve, hence we do not expect any differences between CONSTANT_FORWARD and HYBRID_FORWARD. The HYBRID_CONSTANT_FORWARD inflation curve coincides with the HYBRID_FORWARD one when no BuildMethodCutOff is set (default), but when "BuildMethodCutOff = 37M", it matches the CONSTANT_FORWARD curve up to the 36th month as expected.

In Figure (15) we plot the graph of the difference of the HYBRID_CONSTANT_FORWARD inflation curve with the two plain build methods, in the inflation rate space, and in Figure (15) the graph of the same difference in the inflation ZC rate space. While we observe no deviation below 36M compared to the CONSTANT_FORWARD method, there is no difference compared to the HYBRID_FORWARD method above the 36th month.

#### Figure 14: UKRPI inflation rate curve deviations (using HYBRID_CONSTANT_FORWARD with BuildMethodCutOff = 37M) compared to the two plain build methods.

#### Figure 15: UKRPI inflation ZC rate curve deviations (using HYBRID_CONSTANT_FORWARD with BuildMethodCutOff = 37M) compared to the two plain build methods.

Notice that the HYBRID_FORWARD method is used beyond the 36th month, whereas we set BuildMethodCutOff to 37M. This is due to the fact the switch is actually applied beyond the last maturity of zero rates in the swap subtable which is strictly smaller than the BuildMethodCutOff setting. This can be seen in Figures 16 and 17. For Figure 16 we chose the cut off after 66 month, however, the switch is applied after 60 month (5 year) which is the last maturity in the swap subtable which is below 66. More interestingly, for Figure 17 we chose 96 month (= 8 years) which corresponds to a zero swap rate maturity in the subtable. However, the switch is applied after 84 month (= 7 years), since this is the last maturity in the subtable which is strictly smaller than 96 month.

#### Figure 16: UKRPI inflation curve deviations (using HYBRID_CONSTANT_FORWARD with BuildMethodCutOff = 66M) compared to the two plain build methods.

#### Figure 17: UKRPI inflation curve deviations (using HYBRID_CONSTANT_FORWARD with BuildMethodCutOff = 96M) compared to the two plain build methods.

### 4.1.6 Build Method Comparison

In this section we compare both the inflation values and the risks for different Build Methods. We consider a UKRPI inflation curve with Valuation Date and Settlement Date 05-Feb-2014, last CPI date 01-Dec-2013, InflationDelayInput = InflationDelayOutput = 2 months and InflationInterpolation = FLAT.

We investigate the following Build Methods:

* ConstantForward
* HybridForward
* LinearZero
* LinearForward
* QuadraticZero
* CubicZero
* QuadraticForward.

Although all these methods tend to evaluate the inflation curves in very similar fashions, some conspicuous differences can be observed when the inflation risk is concerned. The methods HybridConstantForward, HybridForward, ConstantForward and LinearZero produce curves that show the desired behaviour and yield similar results in evaluating the risks as a function of bumping the inflation curve at a given node, since for such interpolation methods the difference between the base inflation curve and the curve obtained by bumping the same curve at a single node is concentrated around the bumping node. On the other hand, the methods LinearForward, QuadraticZero, CubicZero and QuadraticForward display a slightly different pattern: when one of these methods is used, the same difference is spread over and "scattered" around a wide interval of time maturities.

In the following, we test the effects of non-locality of the various interpolation schemes.

#### 4.1.6.1 Hybrid Constant Forward

We start by examining the method HybridConstantForward. We consider the inflation curve (normalized at the Valuation Date) and the implied ZC inflation rates.

We consider the inflation curve $I(t)$ and the corresponding zero rates $i(t)$, both interpolated using the Hybrid Constant Forward method. The relationship between $I(t)$ and $i(t)$ is given as follows. If $T_0$ is the valuation date and $n$ denotes the numbers of years after valuation date, then, if $n \geq 1$, we have

$\frac{I(T_0 + n)}{I(T_0)} = (1 + i(n))^n,$

while for $n < 1$, and for $m$ the number of months after $T_0$, we have

$\frac{I(m)}{I(m - 1y)} = (1 + i(m)).$

The previous tests show that the interpolation method HybridConstantForward satisfies the conditions for an effective interpolation method to build an inflation curve out of the basic data represented by the inflation ZC rates (contained in the table "Swaps" of the curve). As we have seen, both the pricing and the risks are evaluated consistently under this interpolation method.

In the following we thus proceed to test the other interpolation methods against the HybridConstantForwardMethod, which we consider as our benchmark interpolation method for the inflation curve.

### 4.1.6.2 Constant Forward

In this section we compare the curve constructed with the method Constant Forward with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Figure 21: The difference between the inflation curve with Build Method HybridConstantForward and the one with ConstantForward method. Both curves have been normalized by dividing them by $I(ValuationDate)$, so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/1.png)

![Figure 23: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and ConstantForward) remains localized in a neighbourhood of the bumped node.](./Fig/1.png)

We next repeat the hedging test for the interpolation method ConstantForward. We obtain the desired behaviour also for this method. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1.

![Figure 24: The quantities $H_i(T)$ as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity $T = 5Y6M$. These quantities are equal to zero when $T_i$ is far from $T$ and the nonzero $H_i(T)$ are concentrated at nodes $i$ such that $T_i$ is close to the maturity $T = 5Y6M$, as desidred.](./Fig/1.png)

### 4.1.6.3 Hybrid Forward

In this section we compare the curve constructed with the method Hybrid Forward with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot the difference between them. We see that the two curves closely match.

![Figure 25: The difference between the inflation curve with Build Method HybridConstantForward and the one with HybridForward method. Both curves have been normalized by dividing them by $I(ValuationDate)$, so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/1.png)

![Figure 26: The difference between the inflation ZC Rates implied by the normalized inflation curves with Build Method HybridConstantForward and with HybridForward method. The two ZC inflation curves closely match.](./Fig/1.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate and plot the diagram thus obtained. The test shows that under the interpolation method HybridForward such difference remains localized in a small neighbourhood of the bumping node (05-Feb-19), as desired.

![Figure 27: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and HybridForward) remains localized in a neighbourhood of the bumped node.](./Fig/1.png)

We next repeat the hedging test of Fig. 20, for the interpolation method HybridForward. We obtain the desired behaviour also for this method. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1.

![Figure 28: The quantities $H_i(T)$ as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity $T = 5Y6M$. These quantities are equal to zero when $T_i$ is far from $T$ and the nonzero $H_i(T)$ are concentrated at nodes $i$ such that $T_i$ is close to the maturity $T = 5Y6M$, as desidred.](./Fig/1.png)

### 4.1.6.4 Linear Zero

In this section we compare the curve constructed with the method Linear Zero with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Figure 29: The difference between the inflation curve with Build Method HybridConstantForward and the one with LinearZero method. Both curves have been normalized by dividing them by $I(ValuationDate)$, so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/1.png)

![Figure 30: The difference between the inflation ZC Rates implied by the normalized inflation curves with Build Method HybridConstantForward and with LinearZero method. The two ZC inflation curves closely match.](./Fig/1.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate and plot the diagram thus obtained. The test shows that under the interpolation method LinearZero such difference remains localized in a small neighbourhood of the bumping node (05-Feb-19), as desired.

![Figure 31: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and LinearZero) remains localized in a neighbourhood of the bumped node.](./Fig/1.png)

We next repeat the hedging test of Fig. 20, for the interpolation method LinearZero. We obtain the desired behaviour also for this method. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1.

![Figure 32: The quantities $H_i(T)$ as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity $T = 5Y6M$. These quantities are equal to zero when $T_i$ is far from $T$ and the nonzero $H_i(T)$ are concentrated at nodes $i$ such that $T_i$ is close to the maturity $T = 5Y6M$, as desired.](./Fig/1.png)

### 4.1.6.5 Linear Forward

In this section we compare the curve constructed with the method Linear Forward with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match, although some discrepancies can be observed.

![Figure 34: Left: the inflation ZC Rates implied by the normalized inflation curves, interpolated with Build Methods HybridConstantForward and LinearForward. Right: the difference between the two ZC rate curves. The two curves are very close but some small differences can be observed for various maturities.](./Fig/1.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate (05-Feb-19) and plot the diagram thus obtained. For the build method LinearForward the next figures show that such difference is spread over a wide interval and does not remain localized around the bumped node.

![Figure 35: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and LinearForward). Whereas in the HybridConstantForward method the difference is clearly concentrated around the bumped node (05-Feb-19), for the curve interpolated with the LinearForward method, we see that such difference is scattered over a much wider interval.](./Fig/1.png)

The next figure shows the hedging test for the interpolation method LinearForward. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1. In this case, we see that the quantities $H_i(T)$ are different than zero and non-negligible for a very large set of maturities $T_i$, stretching from 1 month up to 7Y. This behaviour is not the desired behaviour for an interpolation method.

![Figure 36: The quantities $H_i(T)$ as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity $T = 5Y6M$. These quantities are different than zero and non-negligible for a very large set of maturities $T_i$, stretching from 1 month up to 7Y.](./Fig/1.png)

### 4.1.6.6 Quadratic Zero

![Figure 37: Left: the inflation curves interpolated in the two methods HybridConstantForward and QuadraticZero. Right: the difference between the two curves. Both curves have been normalized by dividing them by $I(ValuationDate)$, so that both are equal to 1 at Valuation Date. The two inflation curves closely match.](./Fig/1.png)

![Figure 38: Left: the inflation ZC Rates implied by the normalized inflation curves, interpolated with Build Methods HybridConstantForward and QuadraticZero. Right: the difference between the two ZC inflation curves. The two curves are very close.](./Fig/1.png)

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate (05-Feb-19)

![Figure 39: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and QuadraticZero). Whereas in the HybridConstantForward method the difference is clearly concentrated around the bumped node (05-Feb-19), for the curve interpolated with the QuadraticZero method, we see that such difference is scattered over a much wider interval.](./Fig/1.png)

The next figure shows the hedging test for the interpolation method QuadraticZero. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1. In this case, we see that the quantities $H_i(T)$ are different than zero and non-negligible for a very large set of maturities $T$, stretching from 5 Y up to 70Y. This behaviour is not the desired behaviour for an interpolation method.

![Locality of Risks Quadratic Zero](./Fig/1.png)

Figure 40: The quantities $H_i(T)$ as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity $T = 5Y6M$. These quantities are different than zero and non-negligible for a very large set of maturities $T$, stretching from 5Y up to 70Y.

### 4.1.6.7 Cubic Zero

In this section we compare the curve constructed with the method CubicZero with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Inflation Curve CubicZero](./Fig/2.png)

Figure 41: Left: the inflation curves interpolated in the two methods HybridConstantForward and CubicZero. Right: the difference between the two curves. Both curves have been normalized by dividing them by $I(ValuationDate)$, so that both are equal to 1 at Valuation Date. The two inflation curves closely match.

![Inflation ZC Rates CubicZero](./Fig/3.png)

Figure 42: Left: the inflation ZC Rates implied by the normalized inflation curves, interpolated with Build Methods HybridConstantForward and CubicZero. Right: the difference between the two ZC inflation curves. The two curves are very close.

In the next test, we consider the impact of the build method on the determination of the inflation curve risk. We consider a maturity of $T = 5Y$ and bump the corresponding Zero Rate by 1 bp. For each build method we then consider the difference between the base curve and the curve obtained by bumping the 5Y zero rate (05-Feb-19)

![Inflation Risk Cubic_Zero](./Fig/4.png)

Figure 43: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and Cubic_Zero). Whereas in the HybridConstantForward method the difference is clearly concentrated around the bumped node (05-Feb-19), for the curve interpolated with the CubicZero method, we see that such difference is scattered over a much wider interval.

The next figure shows the hedging test for the interpolation method CubicZero. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1. In this case, we see that for maturity $T = 5Y6M$ the quantities $H_i(T)$ are different than zero and non-negligible for a very large set of maturities $T$, stretching from 21M up to 9Y. This behaviour is not the desired behaviour for an interpolation method.

![Locality of Risks Cubic_Zero](./Fig/5.png)

Figure 44: The quantities $H_i(T)$ as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity $T = 5Y6M$. These quantities are different than zero and non-negligible for a very large set of maturities $T$, stretching from 21M up to 9Y.

### 4.1.6.8 Quadratic Forward

In this section we compare the curve constructed with the method QuadraticForward with the one built with HybridConstantForward method (both normalized at the Valuation Date). In the first test, we compare the two curves pointwise and plot their difference. We see that the two curves closely match.

![Inflation Curve QuadraticForward](./Fig/6.png)

Figure 45: Left: the inflation curves interpolated in the two methods HybridConstantForward and QuadraticZero. Right: the difference between the two curves. Both curves have been normalized by dividing them by $I(ValuationDate)$, so that both are equal to 1 at Valuation Date. The two inflation curves closely match.

![Inflation ZC Rates QuadraticForward](./Fig/7.png)

Figure 46: Left: the inflation ZC Rates implied by the normalized inflation curves, interpolated with Build Methods HybridConstantForward and QuadraticForward. Right: the difference between the two ZC inflation curves. The two curves are very close.

![Inflation Risk Quadratic_Forward](./Fig/8.png)

Figure 47: The difference between the base inflation curves and the bumped inflation curves in the two build methods (HybridConstantForward and QuadraticForward). Whereas in the HybridConstantForward method the difference is clearly concentrated around the bumped node (05-Feb-19), for the curve interpolated with the QuadraticForward method, we see that such difference is scattered over a much wider interval.

The next figure shows the hedging test for the interpolation method QuadraticForward. The maturity and the meaning of the quantities $H_i(T)$ are the same as in Sect. 4.1.6.1. In this case, we see that the quantities $H_i(T)$ are different than zero and non-negligible for a very large set of maturities $T$, stretching from 22M up to 9Y. This behaviour is not the desired behaviour for an interpolation method.

![Locality of Risks Quadratic Forward](./Fig/1.png)

Figure 48: The quantities $H_i(T)$ as $i$ runs in the ZeroRate interpolation nodes of the UKRPI inflation curve, for maturity $T = 5Y6M$. These quantities are different than zero and non-negligible for a very large set of maturities $T$, stretching from 22M up to 9Y.

### 4.1.7 FlatInflationInterpLimit

Unfortunately the combination of bootstrapping together with the bracketing required for computing inflation with DIR can produce unstable results with the builder failing to return a curve. This tends to happen when settlement date is near a bracketing date and at the short end of the curve, usually up to 2Y, where monthly instruments are used. The bootstrapper needs to take big swings in order to hit an apparent innocuous curve. See FO document ([7]) for more details.

For example, if we take the curve FRCPXTOB, last CPI date 1 July 2013 and InflationDelayInput of 3M and change the Valuation date to 29th of August and Settlement Date to 02-September-13, the curve doesn't build and an error is returned. MVQL curve builder also failed to work due to the root solver not being able to bracket the root appropriately.

One solution is to set "InflationMethod" equal to "APPROX" (as opposed to EXACT) which is already the default value.

![Zero rates bootstrapped to DIR curve](./Fig/2.png)

Figure 49: Zero rates bootstrapped to DIR curve (with FLAT short end) using InflationMethod = APPROX. In red the values obtained from the GetInflationValue function.

A better alternative is to use the field "FlatInflationInterpLimit". It controls where FLAT instruments (with fixings on the first of the month) end. ShortEndInflationInterpolation controls the behaviour at the short-end but only up to 350d, hence the setting above allows us to extend that to the period specified in that setting.

Recall than in this context FLAT means fixings on the first of the month. So if InflationInterpolation is DIR, the interpolation within a month will still be linear.

We test this by changing the curve ValuationDate to 30th of August and Settlement date to 3rd of September. Without specifying this field, the curve can't be built.

![Repricing instruments when FlatInflationInterpLimit is set to 22M](./Fig/3.png)

Figure 50: Repricing instruments when FlatInflationInterpLimit is set to 22M. We reprice curve instruments with GetInflationValue function (green dots), via the DiscFact function (blue dots) and from inflation ZC rates (red dots).

In V210 a new type of inflation interpolation was introduced, namely "MODFLAT". When using MODFLAT InflationInterpolation the behaviour is the same as FLAT, unless the ValuationDate and SettlementDate of the curve happen to be in different months (usually settlement date is a couple of days after valuation date), in which case the InflationDelayInput gets increased by a month.

We test this by repricing instruments in two scenarios. One in which both settlement date and Valuation date are in the same month and another in which they are on different months.

In the first one we reprice the instruments with the InflationDelayInput specified in the curve, in the second one we reprice them using the previous inflationDelayInput plus one month. We do this for both ShortEndInflationInterpolation YoY and MODFLAT (FLAT in this instance is not allowed).

The results are satisfactory as we reprice the instruments perfectly in both instances. See for example figure (51).

### 4.1.9 Independent Implementation of Inflation Curve

In this section we present the results of MRM's independent implementation of the inflation curve based on the market data inputs that are used to build inflation curve in the DBA framework. Using our independent implementation of the curve, we have been able to exactly match (upto machine precision) the inflation outputs (projected inflation, and/or projected inflation rate equivalently) produced by the by DBA inflation curve. This test provides a strong validation of correctness of implementation of the inflation curve within the DBA framework. Below, we outline our testing and results.

For the purposes of our testing, we have relied on the market data inputs that are used for constructing the inflation curve in DBA. We consider the UKRPI inflation curve. The inflation curve is constructed for COB 5 – Feb – 2014. The key parameter values for the curve construction are provided in Table 23. The market data inputs used for curve construction are provided in Tables 24, 25 and 26.

| ValuationDate | 05-Feb-14 |
| SettlementDate | 05-Feb-14 |
| UseType | INFLATION |
| CurveType | SPREAD |
| DiscountBasis | ACT/365.25 |
| BuildMethod | HYBRID_CONSTANT_FORWARD |
| InflationInterpolation | FLAT |
| ShortEndInflationInterpolation | YOY |
| BuildMethodCutOff | 37m |
| InflationDelayInput | 2M |
| InflationDelayOutput | 2M |
| SwapBasis | 30/360 |
| SwapFrequency | ANNUALLY |

Table 23: The the key parameter inputs for the construction of UKRPI inflation curve.

| Maturity | ZeroRate |
| --------- | --------- |
| 1M | 2.6037% |
| 2M | 2.5040% |
| 3M | 2.3723% |
| 4M | 2.5651% |
| 5M | 2.6434% |
| 6M | 2.7702% |
| 7M | 2.6535% |
| 8M | 2.4830% |
| 9M | 2.4723% |
| 10M | 2.4928% |
| 11M | 2.5540% |
| 12M | 2.6460% |
| 13M | 2.7232% |
| 14M | 2.7295% |
| 15M | 2.6658% |
| 16M | 2.6900% |
| 2Y | 2.7200% |
| 3Y | 2.8760% |
| 4Y | 2.9670% |
| 5Y | 3.0340% |
| 6Y | 3.0760% |
| 7Y | 3.1180% |
| 8Y | 3.1560% |
| 9Y | 3.1950% |
| 10Y | 3.2340% |
| 12Y | 3.3190% |
| 15Y | 3.4430% |
| 20Y | 3.5730% |
| 25Y | 3.6120% |
| 30Y | 3.6410% |

| Settle | Maturity | Spread |
| ------ | -------- | ------ |
| 2y | 01-Jan-14 | 99.3848% |
| 2y | 01-Feb-14 | 99.8436% |
| 3y | 01-Jan-14 | 99.4766% |
| 5y | 01-Jan-14 | 99.6732% |
| 5y | 01-Feb-14 | 99.8258% |
| 5y | 01-Mar-14 | 100.2526% |
| 5y | 01-Apr-14 | 100.3850% |
| 5y | 01-May-14 | 100.3125% |
| 5y | 01-Jun-14 | 99.9268% |
| 5y | 01-Jul-14 | 99.9973% |
| 5y | 01-Aug-14 | 100.2033% |
| 5y | 01-Sep-14 | 100.0625% |
| 5y | 01-Oct-14 | 99.9410% |
| 5y | 01-Nov-14 | 100.0045% |
| 5y | 01-Dec-14 | 100.0045% |

Table 25: The seasonality coefficients that are used as inputs for the construction of inflation curve. These are provided as an input to the DBA inflation curve through the Spreads table.

| Date | Index |
| ---- | ----- |
| 01-Jan-02 | 173.30 |
| 01-Feb-02 | 173.80 |

Our methodology follows the basic principles of inflation curve construction as set forth in the FO Document [7]. In this document it is emphasized that although an inflation curve is not strictly the same as an interest rate curve, the choice of modelling an inflation curve as inheriting the curve framework is justified by the opportunity of re-use the codes and the methods already developed in DBAnalytics for the curve objects.

In the same order of ideas, the use of the curve framework for inflation curves allows us to take advantage of the interpolation methods already introduced for the interest rate curves, through the field BuildMethod. Therefore, all the interpolation methods already in use to implement an interest rate curve can be reused for the constructing inflation curves.

The main idea of curve construction (in the interest rate case) is to solve for the discount factor at each maturity, so that, with the interpolation method chosen by the BuildMethod field, we can recover the price of input market instruments. The inflation curve must therefore be able to give us a projected inflation forward for any given set date in the future. Equivalently, the inflation curve should provide us with the projected inflation rate for a set future date. The inflation rate is related to the projected inflation forward through the following formulas:

$i_{Rate}(T) = \left(\frac{I_{Rate}(T)}{I(T_0)}\right)^{\frac{1}{T-T_0}} - 1 \quad \text{for } T - T_0 \geq 1,$

$i_{Rate}(T) = \frac{I_{Rate}(T)}{I_{Rate}(T-1y)} - 1 \quad \text{for } T - T_0 \geq 1, \quad (16)$

Where $T_0$ denoted the valuation date, and $T$ denoted the future date.

An inflation curve object is provided with a table of of historical inflation values (CPIFigures table).

The inflation curve can be naturally mapped onto a rate curve $D(T)$ using the following expression:

$I(T) = \frac{I(T_0)}{D(T-nM)} \cdot S(T-nM) \iota(T), \quad (17)$

where $I(T_0)$ is the spot value of inflation (i.e. inflation on settlement date), and is obtained from the CPIFigures table by applying appropriate time lag specified by InflationDelayInput $nM$. The seasonality adjustment coefficient $S(T-nM)$ is obtained from the Spreads table. In particular, for the data in Table 25 the seasonality adjustment is determined as follows:

• For $T < 2$ seasonality coefficient is set to 1, as it is assumed that the ZC swap rates for the market instruments in Table 24 already include the impact of seasonality.

• For $2 < T \leq 5$ the seasonality coeffiecients are obtained by linearly interpolating in log-space the corresponding (lagged) coefficients from the 25 table for 2Y and 5Y.

• for $T > 5$ the seasonality (lagged) coefficients for 5Y are taken.

The rate curve $D(T)$ is constructed, with appropriate lag, using the following inputs:

• The valuation date is specificed by appropriate $nM$ lag to the inflation curve valuation date. The lag specified by the InflationDelayInput parameter.

• The discount factors for corresponding maturities are obtained from the ZC swap rates specified in the Swaps.

• An appropriate interpolation scheme is used to obtain the discount factor for intermediate dates (i.e. dates not falling on input swap maturity dates). The interpolation scheme is specified by the BuildMethod parameter. In particular, for the our UKRPI curve the BuildMethod is HYBRID_CONSTANT_FORWARD. This build method assumes CONSTANT_FORWARD interpolation at short end and HYBRID_FORWARD at long end. The boundary between the two methods is specified by the parameter BuildMethodCutOff, which is set to 37m in our case. More details on the interpolation scheme and relevant results are presented in Section 4.1.9.1, below.

Finally, $\iota(T)$ represents the interpolation used to determine the inflation for a day inside a month. This can correspond to either FLAT or DIR, and has been discussed previously in Section 4.1.1.

The results of the independent implementation are shown in Figure 52. The projected inflation for the independent implementation has been obtained by using Eq. 17, with inputs determined by the procedure outlined above. On the other hand, for comparison, the projected inflation rate from the DBA curve has been obtained using the standard DBA function GetInflationValue(). The projected inflation rates have been obtained by further using Eq. 16. The results show a practically perfect match of our independent imlementation with results obtained from the DBA inflation curve. This test indicates the correctness of implementation of the inflation curve within the DBA framework.

![Figure 52](./Fig/9.png)

Figure 52: The results of independent implementation of the inflation curve. The figures show the comparison between the outputs from our independently implemented inflation curve and the DBA inflation curve. The top graphs show the values of projected inflation (left) and the equivalent inflation rate (right) extracted from the two inflation curves for month start dates for maturities upto 70 years. The curves on the two graphs are indistinguishable to the eye (the difference is close to the order of machine precision). The difference between the two curves is shown in the bottom graphs for projected inflation (left) and inflation rate (right).

### 4.1.9.1 Build Methods

Denote the discount factor for an intermediate date (date not falling on the knot points of the curve) as $D(t)$. Assuming that $t \in [t_{i-1}, t_i]$ we define:

$D(t) = D(t_{i-1}) \exp \left(- \int_{t_{i-1}}^t ds f_i(s) \right) = D(t_{i-1}) \exp (-F_i(t)), \quad (18)$

where $D(t_{i-1})$ is the value of discount factor at node $t_{i-1}$ and $f_i(s)$ is the instantaneous forward in the interval $t \in [t_{i-1}, t_i]$. $F_i(t)$ is the integral of the instantaneous forward between $t_{i-1}$ and $t$.

We introduce the constant forward between the knot points $\{t_i\}$ as follows:

$f_i = \frac{1}{(t_i - t_{i-1})} \ln \left[ \frac{D(t_{i-1})}{D(t_i)} \right], \quad (19)$

#### 4.1.9.1.1 CONSTANT_FORWARD

For the constant forward method the instantaneous forwards are assumed constant over the interval $t \in [t_{i-1}, t_i]$. This leads to the following expressions:

$f_i(t) = f_{i-1}, \quad (20)$
$F_i(t) = f_{i-1} \cdot (t - t_{i-1}), \quad (21)$

#### 4.1.9.1.2 HYBRID_FORWARD

For the hybrid forward method the instantaneous forwards are assumed to be piecewise quadratic. In this method one begins by firstly re-defining forwards on knot points as follows:

$\tilde{f_i} = f_{i-1} \left( \frac{t_i - t_{i-1}}{t_{i+1} - t_{i-1}} \right) + f_i \cdot \left( \frac{t_{i+1} - t_i}{t_{i+1} - t_{i-1}} \right), \quad (22)$

In words, the knot points of the constant forward rate intervals are interpolated from a straight line joining the centres of both adjoining step regions. Following this, one assumes a piecewise quadratic behaviour for the instantaneous forward:

$f_i(t) = \tilde{f}_{i-1} + \frac{\tilde{f_i} - \tilde{f}_{i-1}}{t_i - t_{i-1}} \cdot (t - t_{i-1}) + c_i \cdot (t - t_{i-1})(t - t_i), \quad (23)$

$F_i(t) = \tilde{f}_{i-1} \cdot (t - t_{i-1}) + \frac{1}{2} \left[ \frac{\tilde{f_i} - \tilde{f}_{i-1}}{t_i - t_{i-1}} t_i - t_{i-1} - c_i \cdot (t_i - t_{i-1}) \right] (t - t_{i-1})^2 + \frac{c_i}{3} (t - t_{i-1})^3, \quad (24)$

The coefficients $c_i$ are determined by matching the discount factors produced by the hybrid-forward interpolation scheme with those obtained from the input instruments directly. The results of bootstrapping for the UKRPI curve are shown in Table 27.

| Maturity | $t_i$ | $D(t_i)$ | $f_i$ | $c_i$ | $F_i(t_i)$ |
|----------|-------|----------|-------|-------|-----------|
| 1M | 0.0849 | 1.004758 | -0.055929 | 27.162064 | -0.004747 |
| 2M | 0.1697 | 0.998424 | 0.009292 | -34.483656 | 0.006324 |
| 3M | 0.2464 | 0.995287 | 0.056932 | 12.698074 | 0.003147 |
| 4M | 0.3313 | 0.990231 | 0.050049 | -9.724159 | 0.005093 |
| 5M | 0.4134 | 0.987497 | 0.046618 | -1.511894 | 0.002765 |
| 6M | 0.4983 | 0.987463 | 0.017301 | 4.027271 | 0.000034 |
| 7M | 0.5804 | 0.988586 | -0.006835 | 15.236863 | -0.001136 |
| 8M | 0.6653 | 0.985102 | 0.013429 | -11.765545 | 0.003531 |
| 9M | 0.7502 | 0.981643 | 0.041523 | -4.672111 | 0.003518 |
| 10M | 0.8323 | 0.980094 | 0.030149 | 4.714423 | 0.001578 |
| 11M | 0.9172 | 0.978553 | 0.018886 | 2.219603 | 0.001574 |
| 1Y | 0.9993 | 0.976276 | 0.023532 | -18.723674 | 0.002329 |
| 13M | 1.0842 | 0.980215 | -0.008919 | 43.409220 | -0.004026 |
| 14M | 1.1691 | 0.973253 | 0.018272 | -36.423126 | 0.007128 |
| 15M | 1.2457 | 0.97008 | 0.062239 | 16.586015 | 0.003266 |
| 16M | 1.3306 | 0.964361 | 0.055447 | -13.313701 | 0.005913 |
| 17M | 1.4127 | 0.961611 | 0.051930 | 2.506227 | 0.002855 |
| 18M | 1.4976 | 0.960889 | 0.023226 | 2.122439 | 0.000860 |
| 19M | 1.5797 | 0.960856 | 0.004485 | 12.665060 | -0.000174 |
| 20M | 1.6646 | 0.957407 | 0.019761 | -9.449849 | 0.003596 |
| 21M | 1.7495 | 0.953984 | 0.042285 | -6.453655 | 0.003582 |
| 22M | 1.8316 | 0.95308 | 0.026622 | 11.444187 | 0.000948 |
| 23M | 1.9165 | 0.950396 | 0.022204 | -4.409354 | 0.002819 |
| 2Y | 1.9986 | 0.947742 | 0.033643 | -0.275287 | 0.002797 |
| 3Y | 3.0007 | 0.918455 | 0.033849 | 0.008419 | 0.031389 |
| 4Y | 4.0000 | 0.889627 | 0.031619 | 0.000020 | 0.031891 |
| 5Y | 4.9993 | 0.861186 | 0.032213 | -0.001137 | 0.032491 |
| 6Y | 5.9986 | 0.833786 | 0.032435 | 0.001321 | 0.032334 |
| 7Y | 7.0007 | 0.806601 | 0.032718 | -0.000194 | 0.033148 |
| 8Y | 8.0000 | 0.779909 | 0.033378 | 0.000346 | 0.033651 |
| 9Y | 8.9993 | 0.753481 | 0.034086 | -0.000103 | 0.034474 |
| 10Y | 9.9986 | 0.727399 | 0.034875 | 0.000355 | 0.035229 |
| 12Y | 12.0000 | 0.67583 | 0.035749 | -0.000175 | 0.07353 |
| 25Y | 24.9993 | 0.411859 | 0.037937 | 0.000124 | 0.184944 |
| 30Y | 29.9986 | 0.342021 | 0.037081 | -0.000098 | 0.185810 |
| 40Y | 40.0000 | 0.24104 | 0.036440 | 0.000050 | 0.349908 |
| 50Y | 49.9986 | 0.169137 | 0.035208 | -0.000022 | 0.354251 |
| 60Y | 60.0000 | 0.119927 | 0.034904 | 0.000030 | 0.343827 |
| 70Y | 69.9986 | 0.084218 | 0.034865 | 0.000000 | 0.353478 |

Table 27: The results of bootstrapping procedure for HYBRID_FORWARD method. These are provided as an input to the DBA inflation curve through the CPIFigures table.

### 4.1.10 Inflation Rates with Bilateral Clearing - Mars Request ID: 2021Feb25-LIMZHOU-16823

We test here the new feature of the inflation curve, introduced by DBA and submitted for approval in the Mars request 2021Feb25-LIMZHOU-16823, The new property is the table "Clearing Spreads", triggered by the body property "UseInflationClearingSpreads". Inflation payer swaps and other CPI index related products may be dealt via bilateral clearing rather than LCH clearing. Thus, to price such products, the Inflation curve needs to be able to provide bilateral rates. DBA is using a 'ClearingSpreads' subtable to get the bilateral rates from base LCH rates in inflation curve object. This validation report checks that the 'ClearingSpreads' subtable provides this facility. That is, it checks whether the difference in zero rate of Inflation payer swap when cleared by LCH and zero rate of the Inflation payer swap when cleared bilaterally matches the spreads given in the 'ClearingSpreads' subtable.

The Inflation curve has the body property 'BaseClearingHouse' which has the name of the base clearing house. That is, the 'ZeroRate' column of 'Swaps' subtable gives the Zero Rates corresponding to the base clearing house. The other clearinghouse is given in the 'ClearingHouse' column of the 'ClearingSpreads' subtable. Base clearing house is usually 'LCH' and the other clearing house is usually 'BILATERAL' but both clearing houses can take other values too.

#### 4.1.10.1 ZeroRate Test

In the first test, the spread is given by flat .0002. ZeroRate for both the base('LCH') and other('BILATERAL') clearinghouse is computed with spread given as a flat .0002. The following table gives the values. As can be seen from the last column 'Diff', the difference given in spreads matches almost exactly with difference between computed ZeroRates.

| | Date | ClearingSpread | SwapRate_LCH | SwapRate_BILATERAL | SwapRateDiff | Diff |
|---|----------|--------------|------------|-------------------|-------------|----------------|
| 0 | 20201223 | 0.0002 | 0.011625 | 0.011825 | 0.0002 | -2.203641e-17 |
| 1 | 20210123 | 0.0002 | 0.010325 | 0.010525 | 0.0002 | 2.000082e-16 |
| 2 | 20210323 | 0.0002 | 0.012225 | 0.012425 | 0.0002 | -2.440810e-16 |
| 3 | 20210423 | 0.0002 | 0.015113 | 0.015313 | 0.0002 | -2.203641e-17 |
| 4 | 20210523 | 0.0002 | 0.015875 | 0.016075 | 0.0002 | -2.440810e-16 |
| 5 | 20210623 | 0.0002 | 0.023025 | 0.023225 | 0.0002 | -2.203641e-17 |
| 6 | 20210723 | 0.0002 | 0.027525 | 0.027725 | 0.0002 | -4.661256e-16 |
| 7 | 20210823 | 0.0002 | 0.028225 | 0.028425 | 0.0002 | -2.203641e-17 |
| 8 | 20210923 | 0.0002 | 0.024088 | 0.024288 | 0.0002 | -2.440810e-16 |
| 9 | 20211023 | 0.0002 | 0.032352 | 0.032552 | 0.0002 | -2.203641e-17 |
| 10 | 20221023 | 0.0002 | 0.032802 | 0.033002 | 0.0002 | -2.203641e-17 |
| 11 | 20231023 | 0.0002 | 0.033679 | 0.033879 | 0.0002 | -2.203641e-17 |
| 12 | 20241023 | 0.0002 | 0.034382 | 0.034582 | 0.0002 | -2.203641e-17 |
| 13 | 20251023 | 0.0002 | 0.034914 | 0.035114 | 0.0002 | -2.203641e-17 |
| 14 | 20261023 | 0.0002 | 0.035195 | 0.035395 | 0.0002 | -2.203641e-17 |
| 15 | 20271023 | 0.0002 | 0.035376 | 0.035576 | 0.0002 | -2.203641e-17 |
| 16 | 20281023 | 0.0002 | 0.035528 | 0.035728 | 0.0002 | -2.203641e-17 |
| 17 | 20291023 | 0.0002 | 0.035666 | 0.035866 | 0.0002 | -2.203641e-17 |
| 18 | 20301023 | 0.0002 | 0.035489 | 0.035689 | 0.0002 | -2.203641e-17 |
| 19 | 20321023 | 0.0002 | 0.035161 | 0.035361 | 0.0002 | -2.203641e-17 |
| 20 | 20351023 | 0.0002 | 0.034718 | 0.034918 | 0.0002 | -2.203641e-17 |
| 21 | 20401023 | 0.0002 | 0.033817 | 0.034017 | 0.0002 | -2.203641e-17 |
| 22 | 20451023 | 0.0002 | 0.032485 | 0.032685 | 0.0002 | -2.203641e-17 |
| 23 | 20501023 | 0.0002 | 0.031295 | 0.031495 | 0.0002 | -2.203641e-17 |
| 24 | 20551023 | 0.0002 | 0.030410 | 0.030610 | 0.0002 | -2.203641e-17 |
| 25 | 20601023 | 0.0002 | 0.029635 | 0.029835 | 0.0002 | -2.203641e-17 |
| 26 | 20801023 | 0.0002 | 0.029435 | 0.029635 | 0.0002 | -2.203641e-17 |
| 29 | 20901023 | 0.0002 | 0.029445 | 0.029645 | 0.0002 | -2.203641e-17 |

Table 28: The table gives the value of different swaprates and the clearing spread with relevant differences in the case of Flat clearing spreads.

The plots 53 and 54 show that the difference between clearingspread and calculated difference between Swaprate under clearinghouses LCH and BILATERAL is insignificant. The first figure plots both swap rates(computed). The second figure shows the difference between clearing house spreads calculated difference between swap rates is very close to zero: the difference plot is reported on a scale by $10^{-6}$, which shows that the difference is very close to zero.

![SwapRates(GBP) wrt Maturity](./Fig/1.png)

![Difference between ClearingSpead and calculated Swap rate difference](./Fig/2.png)

Figure 53: SwapRates with respect tomaturities for both clearing houses

Figure 54: Difference between clearinghouse spread and computed difference between swap rates.

| | Date | ClearingSpread | SwapRate_LCH | SwapRate_BILATERAL | SwapRateDiff | Diff |
|---|----------|--------------|------------|-------------------|-------------|----------------|
| 0 | 20201223 | 0.0001 | 0.011625 | 0.011725 | 0.0001 | -1.101820e-17 |
| 1 | 20210123 | 0.00015 | 0.010325 | 0.010475 | 0.00015 | 1.500062e-16 |
| 2 | 20210323 | 0.0002 | 0.012225 | 0.012425 | 0.0002 | -2.440810e-16 |
| 3 | 20210423 | 0.00025 | 0.015113 | 0.015363 | 0.00025 | -2.754551e-17 |
| 4 | 20210523 | 0.0003 | 0.015875 | 0.016175 | 0.0003 | -3.661215e-16 |
| 5 | 20210623 | 0.00035 | 0.023025 | 0.023375 | 0.00035 | -3.855872e-17 |
| 6 | 20210723 | 0.0004 | 0.027525 | 0.027925 | 0.0004 | -9.322512e-16 |

Table 29: The table gives the value of different swaprates and the linearly increasing clearing spread with relevant differences.

#### 4.1.10.2 Pricing Test

The next tests are done using Inflation payer swaps with maturities 6M and 30Y. The start date the securities is 4/23/2020 and 10/23/2020 respectively. The end dates are 4/23/2021 and 10/23/2050 respectively. The MULTISWAP security has two legs, the floating leg is given by "INFLATIONRETURN-RATIO-2MFLAT" which is the difference in inflation index(under clearance with appropriate clearinghouse) between Maturity and RollDate(start date) of the Swap. The fixed leg is the same difference calculated using ZeroRate under appropriate clearing house. In the examples chosen, the Clearing house selected is 'BILATERAL' (given in the bodyproperty 'ClearingHouse' of the security object). Thus the ZeroRate used is $ZeroRate_{LCH} + Spread$. When the Securities are priced, they have almost zero prices, as given by the following table.

| | Swap Maturities | FloatingLegs | FixedLegs | Prices |
|---|---------------|-------------|----------|---------|
| 0 | 6M | INFLATIONRETURN-RATIO-2MFLAT | 1.015313 | -5.684342e-14 |
| 1 | 30Y | INFLATIONRETURN-RATIO-2MFLAT | 2.535209 | 2.398252e-09 |

#### 4.1.10.3 Delta Test

The next tests are getting the delta of the above securities with respect to clearingspreads. As can be seen from the tables(for 6m and 30y security respectively) below, we have significant delta only for the bucket of relevant maturity(6m for 6m maturity swap and 30y for 30y maturity swap). The below table gives the bucketwise delta for 6m swap

| | Maturity | Value |
|---|----------|-------|
| 0 | 2M | 1.421085e-14 |
| 1 | 3M | 0.000000e+00 |
| 2 | 4M | 0.000000e+00 |
| 3 | 5M | 0.000000e+00 |
| 4 | 6M | -9.998283e-03 |
| 5 | 7M | 0.000000e+00 |
| 6 | 8M | 0.000000e+00 |
| 7 | 9M | 0.000000e+00 |
| 8 | 10M | 0.000000e+00 |
| 9 | 11M | 0.000000e+00 |
| 10 | 1Y | 0.000000e+00 |
| 11 | 2Y | -2.842171e-14 |
| 12 | 3Y | 0.000000e+00 |
| 13 | 4Y | 5.684342e-14 |
| 14 | 5Y | 0.000000e+00 |
| 15 | 6Y | 0.000000e+00 |
| 16 | 7Y | 0.000000e+00 |
| 17 | 8Y | -2.842171e-14 |
| 18 | 9Y | 0.000000e+00 |
| 19 | 10Y | 0.000000e+00 |
| 20 | 12Y | 0.000000e+00 |
| 27 | 45Y | 0.000000e+00 |

Next, we do the first test i.e - comparison between Swap/ZeroRate when the spreads are linearly increasing from .0001 to .0004. The results are tabulated below. As can be seen from the last column 'Diff', the difference given in spreads matches almost exactly with difference between computed ZeroRates.

| | Date | ClearingSpread | SwapRate_LCH | SwapRate_BILATERAL | SwapRateDiff | Diff |
|---|----------|--------------|------------|-------------------|-------------|----------------|
| 0 | 20201223 | 0.0001 | 0.011625 | 0.011725 | 0.0001 | -1.101820e-17 |
| 1 | 20210123 | 0.00015 | 0.010325 | 0.010475 | 0.00015 | 1.500062e-16 |
| 2 | 20210323 | 0.0002 | 0.012225 | 0.012425 | 0.0002 | -2.440810e-16 |
| 3 | 20210423 | 0.00025 | 0.015113 | 0.015363 | 0.00025 | -2.754551e-17 |
| 4 | 20210523 | 0.0003 | 0.015875 | 0.016175 | 0.0003 | -3.661215e-16 |
| 5 | 20210623 | 0.00035 | 0.023025 | 0.023375 | 0.00035 | -3.855872e-17 |
| 6 | 20210723 | 0.0004 | 0.027525 | 0.027925 | 0.0004 | -9.322512e-16 |

Table 30: The table gives the value of different swaprates and the linearly increasing clearing spread with relevant differences.

![SwapRates(GBP) with Linearly Increasing Spreads](./images/frame_00065.jpg)

![Difference between ClearingSpread and calculated Swap rate difference - Linear Spreads](./images/frame_00066.jpg)

Figure 55: SwapRates with respect to maturities for both clearing houses with linearly increasing spreads

Figure 56: Difference between clearinghouse spread and computed difference between swap rates with linearly increasing spreads.

#### 4.1.10.1.2 ZeroRate Test with Increasing Spreads

Figure 57: ZeroRates with respect to maturities for both clearing houses with linearly increasing spreads.

Figure 58: Difference between clearinghouse spread and computed difference between zero rates with linearly increasing spreads.

| | Date | ClearingSpread | ZeroRate_LCH | ZeroRate_BILATERAL | ZeroRateDiff | Diff |
|---|----------|--------------|------------|-------------------|-------------|----------------|
| 0 | 20201223 | 0.0001 | 0.011625 | 0.011725 | 0.0001 | -1.101820e-17 |
| 1 | 20210123 | 0.00015 | 0.010325 | 0.010475 | 0.00015 | 1.500062e-16 |
| 2 | 20210323 | 0.0002 | 0.012225 | 0.012425 | 0.0002 | -2.440810e-16 |
| 3 | 20210423 | 0.00025 | 0.015113 | 0.015363 | 0.00025 | -2.754551e-17 |
| 4 | 20210523 | 0.0003 | 0.015875 | 0.016175 | 0.0003 | -3.661215e-16 |
| 5 | 20210623 | 0.00035 | 0.023025 | 0.023375 | 0.00035 | -3.855872e-17 |
| 6 | 20210723 | 0.0004 | 0.027525 | 0.027925 | 0.0004 | -9.322512e-16 |

Table 31: The table gives the value of different zero rates and the linearly increasing clearing spread with relevant differences.


| | Date | ClearingSpread | SwapRate_LCH | SwapRate_BILATERAL | SwapRateDiff | Diff |
|---|----------|--------------|------------|-------------------|-------------|----------------|
| 0 | 20201223 | 0.0002 | 0.011625 | 0.011825 | 0.0002 | -2.203641e-17 |
| 1 | 20210123 | 0.0002 | 0.010325 | 0.010525 | 0.0002 | 2.000082e-16 |
| 2 | 20210323 | 0.0002 | 0.012225 | 0.012425 | 0.0002 | -2.440810e-16 |
| 3 | 20210423 | 0.0002 | 0.015113 | 0.015313 | 0.0002 | -2.203641e-17 |
| 4 | 20210523 | 0.0002 | 0.015875 | 0.016075 | 0.0002 | -2.440810e-16 |
| 5 | 20210623 | 0.0002 | 0.023025 | 0.023225 | 0.0002 | -2.203641e-17 |
| 6 | 20210723 | 0.0002 | 0.027525 | 0.027725 | 0.0002 | -4.661256e-16 |

Table 32: The table gives the value of different swap rates and the constant clearing spread with relevant differences.

![SwapRates with respect to maturities for both clearing houses with constant spreads](./images/frame_00067.jpg)

Figure 59: SwapRates with respect to maturities for both clearing houses with constant spreads.

![Difference between ClearingSpread and calculated Swap rate difference - Constant Spreads](./images/frame_00068.jpg)

Figure 60: Difference between clearinghouse spread and computed difference between swap rates with constant spreads.

#### 4.1.10.1.4 ZeroRate Test with Base Clearing House Switched

| | Date | ClearingSpread | ZeroRate_BILATERAL | ZeroRate_LCH | ZeroRateDiff | Diff |
|---|----------|--------------|------------|-------------------|-------------|----------------|
| 0 | 20201223 | -0.0002 | 0.011825 | 0.011625 | -0.0002 | 2.203641e-17 |
| 1 | 20210123 | -0.0002 | 0.010525 | 0.010325 | -0.0002 | -2.000082e-16 |
| 2 | 20210323 | -0.0002 | 0.012425 | 0.012225 | -0.0002 | 2.440810e-16 |
| 3 | 20210423 | -0.0002 | 0.015313 | 0.015113 | -0.0002 | 2.203641e-17 |
| 4 | 20210523 | -0.0002 | 0.016075 | 0.015875 | -0.0002 | 2.440810e-16 |
| 5 | 20210623 | -0.0002 | 0.023225 | 0.023025 | -0.0002 | 2.203641e-17 |
| 6 | 20210723 | -0.0002 | 0.027725 | 0.027525 | -0.0002 | 4.661256e-16 |

Table 33: The table gives the value of different zero rates with base clearing house switched and the constant clearing spread with relevant differences.


Figure 59: SwapRates with respect to maturities for both clearing houses with constant spreads.

Figure 60: Difference between clearinghouse spread and computed difference between swap rates with constant spreads.

#### 4.1.10.1.4 ZeroRate test with base clearing house switched

Finally, we switch the base and other clearing houses to validate that the model works correctly regardless of which clearing house is designated as the base.

Figure 61: ZeroRates with respect to maturities for both clearing houses with constant spreads.

Figure 62: Difference between clearinghouse spread and computed difference between zero rates with constant spreads.





## ZeroRate test with increasing spreads

Next, we do the first test i.e - comparison between Swap/ZeroRate when the spreads are linearly increasing from .0001 to .0004. The results are tabulated below. As can be seen from the last column 'Diff', the difference given in spreads matches almost exactly with difference between computed ZeroRates.

| | Date | ClearingSpread | SwapRate_BILATERAL | SwapRate_LCH | SwapRateDiff | Diff |
|---|------------|---------------|-------------------|--------------|--------------|-------------|
| 0 | 20201223 | 0.00010 | 0.011625 | 0.011725 | 0.00010 | 2.110264e-16 |
| 0 | 20201223 | 0.00010 | 0.011625 | 0.011725 | 0.00010 | 2.150283e-16 |
| 1 | 20210123 | 0.00011 | 0.013225 | 0.013335 | 0.00011 | 2.765583e-16 |
| 2 | 20210323 | 0.00013 | 0.012225 | 0.012355 | 0.00013 | -2.886522e-16 |
| 3 | 20210423 | 0.00014 | 0.015113 | 0.015253 | 0.00014 | 2.900241e-17 |
| 4 | 20210523 | 0.00015 | 0.015875 | 0.016025 | 0.00015 | 9.448622e-17 |
| 5 | 20210623 | 0.00016 | 0.023025 | 0.023185 | 0.00016 | -6.201636e-17 |
| 6 | 20210723 | 0.00017 | 0.027525 | 0.027695 | 0.00017 | 3.469447e-18 |
| 7 | 20210823 | 0.00018 | 0.028225 | 0.028405 | 0.00018 | 6.900947e-17 |
| 8 | 20210923 | 0.00019 | 0.024088 | 0.024278 | 0.00019 | -3.095939e-16 |
| 9 | 20211023 | 0.00020 | 0.032352 | 0.032552 | 0.00020 | -2.200930e-17 |
| 10 | 20221023 | 0.00021 | 0.032802 | 0.033012 | 0.00021 | 4.347651e-17 |
| 11 | 20231023 | 0.00022 | 0.033679 | 0.033899 | 0.00022 | -1.130281e-16 |
| 12 | 20241023 | 0.00023 | 0.034382 | 0.034612 | 0.00023 | -4.754227e-17 |
| 13 | 20251023 | 0.00024 | 0.034914 | 0.035154 | 0.00024 | -4.783278e-17 |
| 14 | 20261023 | 0.00025 | 0.035195 | 0.035395 | 0.0002 | -2.203641e-17 |
| 15 | 20271023 | 0.00026 | 0.035376 | 0.035576 | 0.0002 | -2.203641e-17 |
| 16 | 20281023 | 0.00027 | 0.035528 | 0.035728 | 0.0002 | -2.203641e-17 |
| 17 | 20291023 | 0.00028 | 0.035666 | 0.035866 | 0.0002 | -2.203641e-17 |
| 18 | 20301023 | 0.00029 | 0.035489 | 0.035689 | 0.0002 | -2.203641e-17 |
| 19 | 20321023 | 0.00030 | 0.035161 | 0.035361 | 0.0002 | -2.203641e-17 |
| 20 | 20351023 | 0.00031 | 0.034718 | 0.034918 | 0.0002 | -2.203641e-17 |
| 21 | 20401023 | 0.00032 | 0.033817 | 0.034017 | 0.0002 | -2.203641e-17 |
| 22 | 20451023 | 0.00033 | 0.032485 | 0.032685 | 0.0002 | -2.203641e-17 |
| 23 | 20501023 | 0.00034 | 0.031295 | 0.031495 | 0.0002 | -2.203641e-17 |
| 24 | 20551023 | 0.00035 | 0.030410 | 0.030610 | 0.0002 | -2.203641e-17 |
| 25 | 20601023 | 0.00036 | 0.029920 | 0.030120 | 0.0002 | -2.203641e-17 |
| 26 | 20651023 | 0.00037 | 0.029689 | 0.029889 | 0.0002 | -2.203641e-17 |
| 27 | 20701023 | 0.00038 | 0.029695 | 0.029895 | 0.0002 | -2.203641e-17 |
| 28 | 20801023 | 0.00039 | 0.029435 | 0.029635 | 0.0002 | -2.203641e-17 |
| 29 | 20901023 | 0.00040 | 0.029445 | 0.029645 | 0.0002 | -2.203641e-17 |

## Table 32: The table with constant spread of 0.0002

The table gives the value of different swaprates and the clearing spread with relevant differences in the case of switched clearing house.

The plots 57 and 58 show that the difference between clearingspread and calculated difference between swap rates under clearinghouses LCH and BILATERAL is insignificant. The first figure plots both swap rates(computed). The second figure shows the difference between clearing house spreads calculated difference between swap rates is very close to zero; the difference plot is reported on a scale by 10^-6, which shows that the difference is very close to zero.
![Figure 57: SwapRates with respect to maturities for both clearinghouses](./SwapRates_maturity.png)

![Figure 58: Difference between clearinghouse spread and computed difference between swap rates](./Difference_clearingspread.png)

## 4.1.11 Inflation Rates with Bilateral Clearing - Mars Request ID: 2022Aug04-LIMZHOU-18923

In this section, we test the implementation of the model change approval request with MARS ID 2022Aug04-LIMZHOU-18923. The request is for the approval of the setting UseInflationClearingSpreads = YES and InflationInterpolation = 'DIR' in inflation curves (i.e. curves of UseType = 'INFLATION'), such as USCPI curves. Specifically, the setting allows to specify bilateral inflation rates by their clearing spreads to LCH inflation rates for inflation curves with a linear interpolation. The bilateral rates are obtained from the LCH base rate by specifying clearing spreads in the subtable 'ClearingSpreads' of the inflation curve. That is, the subtable provides the clearing spreads to the related products may be dealt via bilateral clearing, rather than LCH clearing.

For the testing of bilateral inflation rates with flat interpolation, i.e. with InflationInterpolation = 'FLAT', such as in the case of UKRPI curves, we refer to Section 4.1.10.

In the following, we consider an inflation curve object with valuation date = 2022-04-22, settlement date = 2022-04-26, and Currency = 'USCPI'. We have the base clearing house specified as BaseClearingHouse = 'LCH'. That is, the subtable Swaps in the inflation curve object contains the zero rates corresponding to the LCH clearing house, and the subtable ClearingSpreads in the inflation curve contains the bilateral clearing spreads to the LCH base house. Moreover, we consider ShortEndInflationInterpolation = YOY, which means that for short maturities <1y, the inflation rate is defined as the par rate of a YoY swap with that maturity. For longer maturities ≥ 1y, it is defined as the par rate of a ZC swap with that maturity.

### 4.1.11.1 Comparison of Inflation Swap Rates

In this section, we test whether the difference in swap rates of inflation swaps with bilateral clearing and of inflation swaps cleared by the LCH matches the spreads given in the ClearingSpreads subtable for flat and linearly decreasing clearing spreads. To this end, we extract (via the dba function GetInflationValue) the bilateral CPI figures for a range of maturities and manually compute the bilateral inflation rates from these CPI figures. We then compare these bilateral inflation rates against the inflation rates in the Swaps subtable (LCH rates) of the inflation curve. The objective is to check whether their difference exactly matches the spreads in the ClearingSpreads subtable of the inflation curve object. That is, we expect to see that for maturities < 1y, it holds YOY['BILATERAL'] - YOY['LCH'] = ClearingSpread, where YOY and ZC denote the par swap rates of YOY and ZC swaps, respectively.

### Flat Clearing Spreads

In the first test, we set the clearing spreads to -0.001 flat and compute the bilateral inflation rates manually in order to compare them against the LCH inflation rates in the Swaps subtable of the inflation curve. The obtained results are depicted in Table 33. In particular, the last column 'ClearingSpread - Swap Rate Diffs.' shows that the clearing spreads (with LCH as base clearing house) and the difference between the bilateral and LCH zero rates match. Note that clearing spreads are not applied to 2m maturity (i.e. the maturity date 2022-06-01) as the CPI fixing for that maturity has already been published.

| | Date | ClearingSpread | SwapRate_BILATERAL | SwapRate_LCH | SwapRateDiff | Diff |
|---|------------|---------------|-------------------|--------------|--------------|-------------|
| 0 | 20201223 | 0.00010 | 0.011625 | 0.011725 | 0.00010 | 2.110264e-16 |
| 0 | 20201223 | 0.00010 | 0.011625 | 0.011725 | 0.00010 | 2.150283e-16 |
| 1 | 20210123 | 0.00011 | 0.013225 | 0.013335 | 0.00011 | 2.765583e-16 |
| 2 | 20210323 | 0.00013 | 0.012225 | 0.012355 | 0.00013 | -2.886522e-16 |
| 3 | 20210423 | 0.00014 | 0.015113 | 0.015253 | 0.00014 | 2.900241e-17 |
| 4 | 20210523 | 0.00015 | 0.015875 | 0.016025 | 0.00015 | 9.448622e-17 |
| 5 | 20210623 | 0.00016 | 0.023025 | 0.023185 | 0.00016 | -6.201636e-17 |
| 6 | 20210723 | 0.00017 | 0.027525 | 0.027695 | 0.00017 | 3.469447e-18 |
| 7 | 20210823 | 0.00018 | 0.028225 | 0.028405 | 0.00018 | 6.900947e-17 |
| 8 | 20210923 | 0.00019 | 0.024088 | 0.024278 | 0.00019 | -3.095939e-16 |
| 9 | 20211023 | 0.00020 | 0.032352 | 0.032552 | 0.00020 | -2.200930e-17 |
| 10 | 20221023 | 0.00021 | 0.032802 | 0.033012 | 0.00021 | 4.347651e-17 |
| 11 | 20231023 | 0.00022 | 0.033679 | 0.033899 | 0.00022 | -1.130281e-16 |
| 12 | 20241023 | 0.00023 | 0.034382 | 0.034612 | 0.00023 | -4.754227e-17 |
| 13 | 20251023 | 0.00024 | 0.034914 | 0.035154 | 0.00024 | -4.783278e-17 |
| 14 | 20261023 | 0.00025 | 0.035195 | 0.035395 | 0.0002 | -2.203641e-17 |
| 15 | 20271023 | 0.00026 | 0.035376 | 0.035576 | 0.0002 | -2.203641e-17 |
| 16 | 20281023 | 0.00027 | 0.035528 | 0.035728 | 0.0002 | -2.203641e-17 |
| 17 | 20291023 | 0.00028 | 0.035666 | 0.035866 | 0.0002 | -2.203641e-17 |
| 18 | 20301023 | 0.00029 | 0.035489 | 0.035689 | 0.0002 | -2.203641e-17 |
| 19 | 20321023 | 0.00030 | 0.035161 | 0.035361 | 0.0002 | -2.203641e-17 |
| 20 | 20351023 | 0.00031 | 0.034718 | 0.034918 | 0.0002 | -2.203641e-17 |
| 21 | 20401023 | 0.00032 | 0.033817 | 0.034017 | 0.0002 | -2.203641e-17 |
| 22 | 20451023 | 0.00033 | 0.032485 | 0.032685 | 0.0002 | -2.203641e-17 |
| 23 | 20501023 | 0.00034 | 0.031295 | 0.031495 | 0.0002 | -2.203641e-17 |
| 24 | 20551023 | 0.00035 | 0.030410 | 0.030610 | 0.0002 | -2.203641e-17 |
| 25 | 20601023 | 0.00036 | 0.029920 | 0.030120 | 0.0002 | -2.203641e-17 |
| 26 | 20651023 | 0.00037 | 0.029689 | 0.029889 | 0.0002 | -2.203641e-17 |
| 27 | 20701023 | 0.00038 | 0.029695 | 0.029895 | 0.0002 | -2.203641e-17 |
| 28 | 20801023 | 0.00039 | 0.029435 | 0.029635 | 0.0002 | -2.203641e-17 |
| 29 | 20901023 | 0.00040 | 0.029445 | 0.029645 | 0.0002 | -2.203641e-17 |

## Table 33: Comparison between manually computed bilateral inflation rates and the LCH inflation rates for flat clearing spreads.

| Instrument | Maturity | ClearingSpread | Swap Rate (Bilateral) | Swap Rate (LCH) | Swap Rate Diffs. | ClearingSpread - Swap Rate Diffs. |
|------------|----------|----------------|----------------------|-----------------|-----------------|----------------------------------|
| YOY | 2022-06-01 | -0.001 | 0.085425 | 0.085425 | 0.000 | -1.000000e-03 |
| YOY | 2022-07-01 | -0.001 | 0.080654 | 0.081654 | -0.001 | -5.542442e-16 |
| YOY | 2022-08-01 | -0.001 | 0.074540 | 0.075540 | -0.001 | -5.542442e-16 |
| YOY | 2022-09-01 | -0.001 | 0.074540 | 0.075540 | -0.001 | -1.101549e-16 |
| YOY | 2022-10-01 | -0.001 | 0.073604 | 0.074604 | -0.001 | 3.338343e-16 |
| YOY | 2022-11-01 | -0.001 | 0.075226 | 0.076226 | -0.001 | -3.321995e-16 |
| YOY | 2022-12-01 | -0.001 | 0.075738 | 0.076738 | -0.001 | 1.118897e-16 |
| YOY | 2023-01-01 | -0.001 | 0.068493 | 0.069493 | -0.001 | 1.118897e-16 |
| YOY | 2023-02-01 | -0.001 | 0.064019 | 0.065019 | -0.001 | -3.321995e-16 |
| YOY | 2023-03-01 | -0.001 | 0.062586 | 0.063586 | -0.001 | -1.101549e-16 |
| ZC | 2023-04-26 | -0.001 | 0.054288 | 0.055287 | -0.001 | -3.321995e-16 |
| ZC | 2024-04-26 | -0.001 | 0.044912 | 0.045912 | -0.001 | -3.321995e-16 |
| ZC | 2025-04-26 | -0.001 | 0.040100 | 0.041100 | -0.001 | -1.101549e-16 |
| ZC | 2026-04-26 | -0.001 | 0.037250 | 0.038250 | -0.001 | -1.101549e-16 |
| ZC | 2027-04-26 | -0.001 | 0.035437 | 0.036437 | -0.001 | 1.118897e-16 |
| ZC | 2028-04-26 | -0.001 | 0.034087 | 0.035087 | -0.001 | 1.118897e-16 |
| ZC | 2029-04-26 | -0.001 | 0.033062 | 0.034062 | -0.001 | 1.118897e-16 |
| ZC | 2030-04-26 | -0.001 | 0.032350 | 0.033350 | -0.001 | -1.101549e-16 |
| ZC | 2031-04-26 | -0.001 | 0.031700 | 0.032700 | -0.001 | 1.118897e-16 |
| ZC | 2032-04-26 | -0.001 | 0.031275 | 0.032275 | -0.001 | 1.118897e-16 |
| ZC | 2034-04-26 | -0.001 | 0.030537 | 0.031537 | -0.001 | 1.118897e-16 |
| ZC | 2037-04-26 | -0.001 | 0.029538 | 0.030538 | -0.001 | -1.101549e-16 |
| ZC | 2042-04-26 | -0.001 | 0.028287 | 0.029287 | -0.001 | 1.118897e-16 |
| ZC | 2047-04-26 | -0.001 | 0.027537 | 0.028538 | -0.001 | 1.118897e-16 |
| ZC | 2052-04-26 | -0.001 | 0.027538 | 0.028538 | -0.001 | -1.101549e-16 |

Figures 59 and 60 illustrate that the difference between ClearingSpread and the difference between the swap rates from the different clearing houses is insignificant in the case of flat spreads. Specifically, Figure 59 shows the manually computed bilateral swap rates against the swap rates of the LCH clearing house. Figure 60 provides that the difference between ClearingSpread and the swap rate differences is nearly zero. Note that the 2m maturity swap rates have been excluded for plotting.

![Figure 59: Bilateral and LCH swap rates as a function of maturity for flat ClearingSpread](./SwapRates_bilateral_LCH.png)

![Figure 60: Difference between ClearingSpread and Swap Rate Differences as a function of maturity for flat ClearingSpreads](./Difference_clearingspread_swaprate.png)

### Decreasing Clearing Spreads

In the second test, we set the clearing spreads to be linearly decreasing from -0.001 on and compute the bilateral inflation rates manually in order to compare them against the LCH inflation rates in the Swaps subtable of the inflation curve.

The obtained results are reported in Table 34. In particular, the last column "Difference" shows that the clearing spreads (with LCH as base clearing house) and the difference between the bilateral and LCH zero rates match. Note that the clearing spreads are not applied to the 2m maturity (i.e. the maturity date 2022-06-01) as the CPI fixing for that maturity has already been published.

| Instrument | Maturity | ClearingSpread | Swap Rate (Bilateral) | Swap Rate (LCH) | Swap Rate Diffs. | ClearingSpread - Swap Rate Diffs. |
|------------|----------|----------------|----------------------|-----------------|-----------------|----------------------------------|
| YOY | 2022-06-01 | -0.001000 | 0.085425 | 0.085425 | 0.000000 | -1.000000e-03 |
| YOY | 2022-06-01 | -0.001000 | 0.085425 | 0.081654 | -0.001107 | -5.501242e-16 |
| YOY | 2022-07-01 | -0.001107 | 0.080547 | 0.081654 | -0.001107 | -5.501242e-16 |
| YOY | 2022-08-01 | -0.001214 | 0.077632 | 0.078846 | -0.001214 | -5.462211e-16 |
| YOY | 2022-09-01 | -0.001321 | 0.074219 | 0.075540 | -0.001321 | -9.801188e-17 |
| YOY | 2022-10-01 | -0.001429 | 0.073175 | 0.074604 | -0.001429 | -9.389191e-17 |
| YOY | 2022-11-01 | -0.001536 | 0.074691 | 0.076226 | -0.001536 | -5.338611e-16 |
| YOY | 2022-12-01 | -0.001643 | 0.075095 | 0.076738 | -0.001643 | 1.361758e-16 |
| YOY | 2023-01-01 | -0.001750 | 0.067743 | 0.069493 | -0.001750 | -3.037934e-16 |
| YOY | 2023-02-01 | -0.001857 | 0.063162 | 0.065019 | -0.001857 | -7.762888e-17 |
| YOY | 2023-03-01 | -0.001964 | 0.061622 | 0.063586 | -0.001964 | 1.483189e-16 |
| ZC | 2023-04-26 | -0.002071 | 0.053216 | 0.055287 | -0.002071 | -7.365228e-16 |
| ZC | 2024-04-26 | -0.002179 | 0.043734 | 0.045912 | -0.002179 | -2.875304e-16 |
| ZC | 2025-04-26 | -0.002286 | 0.038814 | 0.041100 | -0.002286 | -2.836273e-16 |
| ZC | 2026-04-26 | -0.002393 | 0.035857 | 0.038250 | -0.002393 | -5.724587e-17 |
| ZC | 2027-04-26 | -0.002500 | 0.033937 | 0.036437 | -0.002500 | -2.753874e-16 |
| ZC | 2028-04-26 | -0.002607 | 0.032480 | 0.035087 | -0.002607 | -4.943962e-17 |
| ZC | 2029-04-26 | -0.002714 | 0.031348 | 0.034062 | -0.002714 | -4.510281e-17 |
| ZC | 2030-04-26 | -0.002821 | 0.030529 | 0.033350 | -0.002821 | -4.119968e-17 |
| ZC | 2031-04-26 | -0.002929 | 0.029771 | 0.032700 | -0.002929 | -3.729655e-17 |
| ZC | 2032-04-26 | -0.003036 | 0.029239 | 0.032275 | -0.003036 | -2.550044e-16 |
| ZC | 2034-04-26 | -0.003143 | 0.028395 | 0.031537 | -0.003143 | -2.905662e-17 |
| ZC | 2037-04-26 | -0.003250 | 0.027288 | 0.030538 | -0.003250 | -2.515349e-17 |
| ZC | 2042-04-26 | -0.003357 | 0.025930 | 0.029287 | -0.003357 | -2.081668e-17 |
| ZC | 2047-04-26 | -0.003464 | 0.025173 | 0.028638 | -0.003464 | -1.691355e-17 |
| ZC | 2052-04-26 | -0.003571 | 0.024966 | 0.028538 | -0.003571 | -1.301043e-17 |

**Table 34**: Comparison between manually computed bilateral inflation rates and the LCH inflation rates for linearly decreasing clearing spreads. The difference between both rates matches the clearing spreads in the subtable ClearingSpreads of the inflation curve object, except for the 2m maturity (i.e. the maturity date 2022-06-01). The reason is that the CPI fixing for the 2m maturity has already been published, such that the clearing spread is not applied to that maturity.

Figures 61 and 62 illustrate that the difference between ClearingSpread and the difference between the swap rates from the different clearing houses is also insignificant in the case of linearly decreasing spreads. Specifically, Figure 61 shows the manually computed bilateral swap rates against the swap rates of the LCH clearing house. Figure 62 provides that the difference between ClearingSpread and swap rate differences is nearly zero. Note that the 2m maturity swap rates have been excluded for plotting.

Figure 61: Bilateral and LCH swap rates as a function of maturity for linearly decreasing ClearingSpread.

Figure 62: Difference between ClearingSpread and Swap Rate Differences (i.e. Swap Rate (Bilateral) minus Swap Rate (LCH)) as a function of maturity for linearly decreasing ClearingSpreads (the last column in Table 34). The difference is negligible.

### 4.1.11.2 PV and Delta of Inflation Swaps

In this section, we set up inflation swaps with ClearingHouse = BILATERAL and price them under the modes PRICE and CLEARINGSPREADDELTA in order to confirm the correct implementation of the bilateral clearing spreads with DIR interpolation. Specifically, we set up YOY payer swaps with 3m, 6m, and 9m maturity, struck at the 3m, 6m, and 9m bilateral swap rates of the inflation curve (i.e. the strikes are the par bilateral inflation rates obtained from the inflation curve with the ClearingSpreads subtable), respectively. Similarly, we set up ZC payer swap with 2y, 5y, and 

Table 35 shows that the considered swaps have zero PV, which confirms that the par bilateral inflation rates are correctly obtained.

| Swap maturity | Strike | PV |
|---------------|---------|------------|
| 3m | 1.080654 | 5.684342e-14 |
| 6m | 1.073604 | -5.684342e-14 |
| 9m | 1.068493 | 0.000000e+00 |
| 2y | 1.091842 | -4.137235e-09 |
| 5y | 1.190199 | -3.196845e-09 |
| 30y | 2.259074 | -2.121510e-09 |

Table 35: PV of par bilateral YOY and ZC swaps with maturities 3m, 6m, 9m, 2y, 5y, and 30y for the USCPI curve. The PVs of the swaps are zero, showing that the par bilateral inflation rates are correctly obtained.

Table 36 shows the delta of the considered swaps with respect to clearing spreads for different maturity buckets.

We can clearly observe that the only bucket giving significant delta for the 3m swap is the 3m bucket, that the only bucket giving significant delta for the 6m swap is the 6m bucket, etc.. This is expected if the swaps are correctly obtained from the curve. Note that for the maturities marked with '–' per swap instrument, there is no risk bucket in the result object and hence there is no impact of the swap with respect to this maturity bucket.

| Maturity | Swap_3m | Swap_6m | Swap_9m | Swap_2y | Swap_5y | Swap_30y |
|----------|---------|---------|---------|---------|---------|----------|
| 2m | 0.000000 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 3m | -0.009983 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 2.842171e-14 | 0.000000e+00 |
| 4m | 0.000000 | 0.000000e+00 | -1.421085e-14 | 0.000000e+00 | 2.842171e-14 | 0.000000e+00 |
| 5m | 0.000000 | -1.421085e-14 | -1.421085e-14 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 6m | – | -9.936486e-03 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 7m | – | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 8m | – | 0.000000e+00 | -1.421085e-14 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 9m | – | – | -9.872357e-03 | 0.000000e+00 | 0.000000e+00 | -2.842171e-14 |
| 10m | – | – | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 |
| 11m | – | – | 0.000000e+00 | 7.105427e-14 | 4.263256e-14 | 0.000000e+00 |
| 1y | – | – | 0.000000e+00 | 2.842171e-14 | 9.947598e-14 | 0.000000e+00 |
| 2y | – | – | – | -3.907906e-02 | 5.684342e-14 | 0.000000e+00 |
| 3y | – | – | – | 0.000000e+00 | 9.236983e-14 | 0.000000e+00 |
| 4y | – | – | – | – | 0.000000e+00 | 0.000000e+00 |
| 5y | – | – | – | – | -5.005114e-02 | 4.973799e-14 |
| 6y | – | – | – | – | 0.000000e+00 | 0.000000e+00 |
| 7y | – | – | – | – | – | -2.842171e-14 |
| 8y | – | – | – | – | – | 0.000000e+00 |
| 9y | – | – | – | – | – | 4.263256e-14 |
| 10y | – | – | – | – | – | 6.252776e-13 |
| 12y | – | – | – | – | – | 2.415845e-13 |
| 15y | – | – | – | – | – | 1.278977e-13 |
| 20y | – | – | – | – | – | 5.684342e-14 |
| 25y | – | – | – | – | – | 4.121148e-13 |
| 30y | – | – | – | – | – | -3.245732e-01 |
| 35y | – | – | – | – | – | 0.000000e+00 |

Table 36: Delta with respect to clearing spreads of par bilateral YOY and ZC swaps with maturities 3m, 6m, 9m, 2y, 5y, and 30y for the USCPI curve. The delta is computed with respect to the clearing spread for different maturity buckets. Note that for the maturities marked with '–' per swap instrument, there is no risk bucket in the result object and hence there is no impact of the swap with respect to this maturity bucket.

## 4.2 Product Testing: InflAssetSwap

Here we consider a InflAssetSwap trade in a SWAP DBA security template. More specifically, it receives semi-annual payments based on INFLATION ratio with USCPI as underlying, whereas it pays quarterly payments with Libor plus a spread. Swap effective date is 15th July 2015, and end date is 15th July 2025.

The Receive leg is denoted by the name "Inflation" in the security object. So we denote the PV of this leg as $PV_{Infl}$ and it is calculated as per the following equation:

$PV_{Infl} = N_{Infl} \cdot \sum_{i=1}^{n} \Delta_i \cdot DF_{funding}(T_{i,p}) \cdot \left(M \cdot \frac{I(T_{i,s})}{I_0} + spread_{Infl}\right)  \tag{25}$

The Pay leg is denoted by the name "Float" in the security object. So we denote the PV of Pay leg as $PV_{Float}$ and it is calculated as follows:

$PV_{Float} = N_{Float} \cdot \sum_{j=1}^{m} \Delta_j \cdot DF_{funding}(T_{j,p}) \cdot (L(0; T_{j,s}, T_{j,s} + 3M) + spread_{Float})  \tag{26}$

Here $T_{i,p}$, $T_{i,s}$ denote the PayDate and SetDate of the $i^{th}$ cashflow,

$DF(.)$ denotes the discount factor calculated from Nominal Curve at time $t$,

$I(.)$ denotes the Inflation forward value at time t seen at time 0,

$L(0; t, t + 3M)$ represents the USD 3M LIBOR rate at time $t$ seen at time 0,

$N_{Infl}$, $N_{Float}$ denote the trade notional for Inflation and Float legs, respectively,

$M$ denote the Multiplier for Rec leg,

$\Delta_i$ denotes $i^{th}$ time fraction between setdate and paydate.

Price of the trade is computed by adding the PVs of both the legs, i.e.,

$PV = PV_{Infl} + PV_{Float}  \tag{27}$

Some more trade details are provided below:

* Valuation Date: 29th September, 2023
* Report Currency: USD
* Curve Currency: USD
* Funding Name: eurstr
* Inflation Leg Notional ($N_{Infl}$): -75,000,000 USD
* Float Leg Notional ($N_{Float}$): 73,223,970.53 USD
* Inflation Leg Multiplier ($M$) is 0.375% for all coupon but the last one where it is 100%
* $I_0$ := 237.14365
* $spread_{Infl}$ for Inflation Leg is 0 for all coupon but the last one where it is -97.63%
* $spread_{Float}$ for Float Leg: 0.31%
* LIBORFallBackType: ISDA-BBG
* FixingMethod: HYBRID

Now we present the testings for the said deal. All the testings were done in DBA Version 1300. The corresponding model is DBOPT – RateDeterministic_InflationDeterministic.

### 4.2.1 EOD Testing

#### 4.2.1.1 Cashflow Replication of the Trade

Below table shows Inflation leg of the trade. The replication is presented only where PayDate is after the Valuation Date (i.e., after 2023-09-29).

| SetDates | PayDates | Coupon | Coupon Mon. | PvLot | PV Man. | Error |
|----------|----------|--------|-------------|-------|---------|-------|
| 20240115 | 20240116 | 0.00486 | 0.00486 | -179092.1597 | -179092.1597 | 0 |
| 20240715 | 20240715 | 0.00493 | 0.00493 | -176718.0914 | -176718.0914 | 0 |
| 20250115 | 20250115 | 0.00497 | 0.00497 | -173506.6908 | -173506.6908 | 0 |
| 20250715 | 20250715 | 0.00505 | 0.00505 | -172200.9231 | -172200.9231 | -2.91E-10 |
| 20250715 | 20250715 | 0.37147 | 0.37147 | -25312545.68 | -25312545.68 | -1.676E-07 |

**Table 37**: Cashflow replication of the Inflation leg of the InflAssetSwap trade.

#### 4.2.1.2 Stability Testing: USD Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USD curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

**Figure 63**: PV of the InflAssetSwap as a function of USD curve shifts. Effect on PV while shifting the nominal curve is due to the effect of discounting on the Inflation Leg. When Curve is absolutely shifted, discount factor decreases, hence the PV of the Inflation Leg with shift amount. Note that the Notional of the Inflation Leg is negative. Hence the trend reverses from decreasing to increasing.

**Figure 64**: USD FLATDELTA of InflAssetSwap as a function of USD curve shifts.

**Figure 65**: USCPI FLATDELTA of InflAssetSwap as a function of USD curve shifts.

**Figure 66**: USD FLATGAMMA of InflAssetSwap as a function of USD curve shifts.

**Figure 67**: USCPI FLATGAMMA of InflAssetSwap as a function of USD curve shifts.

#### 4.2.1.3 Stability Testing: USCPI Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USCPI Inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

Inflation curve shifts. With increasing shifts in Inflation zero rates, Inflation forwards increases, hence coupon in Inflation Leg of the trade. Considering the negative notional of the Inflation Leg, this will lead to decrease in PV as expected.

**Figure 69**: USD FLATDELTA of InflAssetSwap as a function of USCPI Inflation curve shifts.

**Figure 70**: USCPI FLATDELTA of InflAssetSwap as a function of USCPI Inflation curve shifts.

**Figure 71**: USD FLATGAMMA of InflAssetSwap as a function of USCPI Inflation curve shifts.

**Figure 72**: USCPI FLATGAMMA of InflAssetSwap as a function of USCPI Inflation curve shifts.

#### 4.2.1.4 Taylor Expansion Consistency Testing

Now we show the Taylor series based approximate PVs for the said trade.

In the following plots, we shift the underlying curves separately and see that the PV computed using DBA pricing is approximated well by manually calculated PV using Taylor series approximation around zero shift for both IR curve and Inflation curve.

**Figure 73**: PV computed using DBA vs manually computed PV using Taylor approximation for InflAssetSwap as a function of USD curve shifts.

**Figure 74**: PV computed using DBA vs manually computed PV using Taylor approximation for InflAssetSwap as a function of USCPI curve shifts.

Now we simultaneously shift the underlying curves and checked the PV profile and calculated the relative difference of DBA and Manual calculated Taylor Approximated PVs. Overall, The 3D plot surface plot shows PV changes smoothly under underlying curve shifts. The contour plot of relative errors shows the close match between DBA and Taylor approximated numbers with differences only being significant for large moves in risk factors. This is expected and results show adequacy of Delta and Gamma risks for risk management.

### 4.2.2 CCAR Testing

In this section, we test the InflAssetSwap trade as described in 4.2 under the recent CCAR 2023 scenarios and compare them with the Base scenario.

#### 4.2.2.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product under Base and latest 2023 CCAR scenarios.

**Figure 77**: Plot of the zero rate of USD Curve under the Base scenario and the CCAR scenarios.

#### 4.2.2.2 Stability Testing: USD Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USD curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

**Figure 78**: PV of the InflAssetSwap as a function of USD curve shifts.

**Figure 79**: USD FLATDELTA of InflAssetSwap as a function of USD curve shifts.

**Figure 80**: USCPI FLATDELTA of InflAssetSwap as a function of USD curve shifts.

**Figure 81**: USD FLATGAMMA of InflAssetSwap as a function of USD curve shifts.

**Figure 82**: USCPI FLATGAMMA of InflAssetSwap as a function of USD curve shifts.

#### 4.2.2.3 Stability Testing: USCPI Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflAssetSwap trade as detailed in 4.2 under parallel shifts of the USCPI Inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

## Document Summary
- **Document Title**: DBOPT-RATEDETERMINISTIC_INFLATIONDETERMINISTIC.pdf
- **Organization**: Deutsche Bank Risk
- **Date**: May 10, 2024
- **Classification**: INTERNAL ONLY

## Key Figures and Content

![Figure 83: PV of the InflAssetSwap as a function of USCPI Inflation curve shifts](./InflAssetSwap_PV_USCPI.png)

![Figure 84: USD FLATDELTA of InflAssetSwap as a function of USCPI Inflation curve shifts](./USD_FLATDELTA_InflAssetSwap.png)

![Figure 85: USCPI FLATDELTA of InflAssetSwap as a function of USCPI Inflation curve shifts](./USCPI_FLATDELTA_InflAssetSwap.png)

![Figure 86: USD FLATGAMMA of InflAssetSwap as a function of USCPI Inflation curve shifts](./USD_FLATGAMMA_InflAssetSwap.png)

![Figure 87: USCPI FLATGAMMA of InflAssetSwap as a function of USCPI Inflation curve shifts](./USCPI_FLATGAMMA_InflAssetSwap.png)

### Section 4.2.3 IRRBB Testing
In this section, we test the stability of the InflAssetSwap trade as described in section 4.2 under the IRRBB scenarios and compare them with the Base scenario.

#### 4.2.3.1 Scenario Curves
Presented below chart shows the scenario curves for the underlying rate curves affecting this product. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, the effects of each scenario are as expected by their names, for example, the parallel up is a parallel shift of the base curve.

![Figure 88: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and all IRRBB scenarios](./ZeroRate_USD_AllScenarios.png)

![Figure 89: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the parallel scenarios](./ZeroRate_USD_ParallelScenarios.png)

![Figure 90: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the short scenarios](./ZeroRate_USD_ShortScenarios.png)

![Figure 91: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the long scenarios](./ZeroRate_USD_LongScenarios.png)

![Figure 92: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the steepener/flattener scenarios](./ZeroRate_USD_SteepenerFlattener.png)

![Figure 93: Plot of the zero rate of the InflAssetSwap under USD curve shifts for the Base scenario and the negative steepener/flattener scenarios](./ZeroRate_USD_NegativeSteepenerFlattener.png)

#### 4.2.3.2 Stability Testing : USD Curve Shift
We test the stability of the PV under absolute shifts of the USD Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 94: PV of the InflAssetSwap under USD curve shifts for the Base scenario and all IRRBB scenarios](./PV_USD_AllScenarios.png)

![Figure 95: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the parallel scenarios](./PV_USD_ParallelScenarios.png)

![Figure 96: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the short scenarios](./PV_USD_ShortScenarios.png)

![Figure 97: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the long scenarios](./PV_USD_LongScenarios.png)

![Figure 98: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the steepener/flattener scenarios](./PV_USD_SteepenerFlattener.png)

![Figure 99: PV of the InflAssetSwap under USD curve shifts for the Base scenario and the negative steepener/flattener scenarios](./PV_USD_NegativeSteepenerFlattener.png)

#### 4.2.3.3 Stability Testing : USCPI Curve Shift
We test the stability of the PV under absolute shifts of the USCPI Inflation Curve for the Base and the IRRBB scenarios. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, we can observe that the PV profiles behave as expected and change smoothly under the considered shifts.

![Figure 100: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and all IRRBB scenarios](./PV_USCPI_AllScenarios.png)

![Figure 101: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the parallel scenarios](./PV_USCPI_ParallelScenarios.png)

![Figure 102: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the short scenarios](./PV_USCPI_ShortScenarios.png)

![Figure 103: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the long scenarios](./PV_USCPI_LongScenarios.png)

![Figure 104: PV of the InflAssetSwap under USCPI curve shifts for the steepener/flattener scenarios](./PV_USCPI_SteepenerFlattener.png)

![Figure 105: PV of the InflAssetSwap under USCPI curve shifts for the Base scenario and the negative steepener/flattener scenarios](./PV_USCPI_NegativeSteepenerFlattener.png)

### Multivariate Testing
In this section, we show the results of the multivariate test for the InflAssetSwap trade as described in Subsection 4.2.

### Table 38: Risk factors used for the InflAssetSwap MultiVariate Testing.
| Type | Currency | AssetName | RiskFactor | Sensitity | MRM Shock Available |
|------|----------|-----------|------------|-----------|---------------------|
| IRCURVE | USD | USD | SWAP | YES | YES |
| INFLATIONCURVE | USCPI | USCPI | CLEARINGSPREAD | YES | NO |
| INFLATIONCURVE | USCPI | USCPI | SWAP | YES | YES |
| IRCURVE | EUR | EUR | CCYSPREAD | YES | YES |
| IRCURVE | EUR | EUR | DISCOUNTSPREAD | YES | YES |
| IRCURVE | EUR | EUR | SWAP | YES | YES |

![Figure 106: Netvalue (USD) InflAssetSwap comparing Up Scenario and Down Scenario](./Netvalue_InflAssetSwap.png)

### 4.3 Product Testing : InflSwapYOY

Here we consider an InflSwapYOY trade in a MULTISWAP DBA security template. More specifically, it receives annual payments based on INFLATION return with CPXTEMU as underlying, whereas it pays annual payments with Libor plus a spread. Swap effective date is 11th October 2019, and end date is 11th October 2033.

The receive leg coupon is computed by adding a convexity adjustment to the 1 year inflation return. Denote the PV of the Receive leg as PV_Rec and calculated as follows:

FixingMethod for the security is RATESET which means that the rate for the Pay leg (RateIndexType = LIBOR) is taken from the security. The security flag that provides the rate for the Pay leg here is "PreviousCoupon" which is zero. Therefore, coupon is constant (given by spread) and PV of the Pay leg (denoted by PV_Pay) is obtained as follows:

where T_i,p, T_i,s denote the PayDate and SetDate of the i^th cashflow,

CMT(T_i,s - 1y, T_i,s) denotes the convexity adjustment for the inflation return,

DF_(·) denotes the discount factor calculated from Nominal Curve at time t,

I(·) denotes the Inflation forward value at time t seen at time 0,

Δ_i denotes i^th time fraction between setdate and paydate.

Price of the trade is computed by subtracting the Pay leg PV from the Rec leg PV, i.e.,
PV = PV_Rec - PV_Pay

Some more trade details are provided below:
• Valuation Date : 6th October, 2023
• Report Currency : EUR
• Curve Currency : EUR
• Funding Name : usdois
• Notional (N) : 275 EUR
• spread : 1.24 %

Now we present the testings for the said deal. All the testings were done in DBA Version 1300. The correponding model is DBOPT - RateDeterministic_InflationDeterministic.

#### 4.3.1 EOD Testing
##### 4.3.1.1 Effect of Convexity Adjustment on PV

Here we show the effect of convexity adjustment in the Receive leg coupon given by (28). In the following tables, we see that there is significant difference in the Price when pricing with vs without CMT object.

Table 39: Comparing PV of the InflSwapYOY trade when priced with vs without convexity adjustment as the inflation curve is shifted.

Table 40: Comparing PV of the InflSwapYOY trade when priced with vs without convexity adjustment as the IR curve is shifted.

##### 4.3.1.2 Cashflow Replication of the Trade

Below table shows Receive leg of the trade. The replication is presented only where PayDate is after the ValuationDate (i.e., after 2023-10-06).

Table 41: Cashflow replication of the Receive leg of the InflSwapYOY trade.

##### 4.3.1.3 Stability Testing : EUR Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapYOY trade as detailed in 4.3 under parallel shifts of the EUR curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 107: PV of the InflSwapYOY as a function of EUR curve shifts. Effect on PV while shifting the nominal curve is due to discounting. When Curve is absolutely shifted, discount factor decreases, hence the PV with shift amount.](./Figure_107_PV_InflSwapYOY_EUR_curve_shifts.png)

##### 4.3.1.4 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapYOY trade as detailed in 4.3 under parallel shifts of the CPXTEMU Inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 112: PV of the InflSwapYOY as a function of CPXTEMU Inflation curve shifts. With increasing shifts in Inflation zero rates, Inflation forwards increases, hence coupon in Receive leg of the trade. This will lead to increase in PV as expected.](./Figure_112_PV_InflSwapYOY_CPXTEMU_curve_shifts.png)

##### 4.3.1.5 Taylor Expansion Consistency Testing

Now we show the Taylor series based approximate PVs for the said trade.

In the following plots, we shift the underlying curves separately and see that the PV computed using DBA pricing is approximated well by manually calculated PV using Taylor series approximation around zero shift for both IR curve and Inflation curve.

![Figure 117: PV computed using DBA vs manually computed PV using Taylor approximation for InflSwapYOY as a function of parallel shift of EUR Curve.](./Figure_117_PV_DBA_vs_Taylor_EUR_curve.png)

![Figure 118: PV computed using DBA vs manually computed PV using Taylor approximation for InflSwapYOY as a function of parallel shift of CPXTEMU curve.](./Figure_118_PV_DBA_vs_Taylor_CPXTEMU_curve.png)

Now we simultaneously shift the underlying curves and checked the PV profile and calculated the relative difference of DBA and Manual calculated Taylor Approximated PVs. Overall, The 3D plot surface plot shows PV changes smoothly under underlying curve shifts. The contour plot of relative errors shows the close match between DBA and Taylor approximated numbers with differences only being significant for large moves in risk factors. This is expected and results shows adequacy of Delta and Gamma risks for risk management.

Presented below are plots:

![Figure 119: PV of the InflSwapYOY as a function of simultaneous shifts of EUR Curve and CPXTEMU curve.](./Figure_119_PV_InflSwapYOY_3D.png)

![Figure 120: Relative error between DBA and Taylor Approximate PVs of the InflSwapYOY as a function of simultaneous shifts of EUR Curve and CPXTEMU curve.](./Figure_120_Relative_Error_DBA_vs_Taylor.png)

#### 4.3.2 CCAR Testing

##### 4.3.2.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product under Base and latest 2023 CCAR scenarios.

![Figure 121: Plot of the zero rate of EUR Curve under the Base scenario and the CCAR scenarios.](./Figure_121_Zero_Rate_EUR_CCAR.png)

##### 4.3.2.2 Stability Testing : EUR Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapYOY trade as detailed in 4.3 under parallel shifts of the EUR curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 122: PV of the InflSwapYOY as a function of EUR curve shifts.](./Figure_122_PV_InflSwapYOY_EUR_CCAR.png)

![Figure 123: EUR FLATDELTA of InflSwapYOY as a function of EUR curve shifts.](./Figure_123_EUR_FLATDELTA_CCAR.png)

![Figure 124: CPXTEMU FLATDELTA of InflSwapYOY as a function of EUR curve shifts.](./Figure_124_CPXTEMU_FLATDELTA_EUR_CCAR.png)

![Figure 125: EUR FLATGAMMA of InflSwapYOY as a function of EUR curve shifts.](./Figure_125_EUR_FLATGAMMA_EUR_CCAR.png)

![Figure 126: CPXTEMU FLATGAMMA of InflSwapYOY as a function of EUR curve shifts.](./Figure_126_CPXTEMU_FLATGAMMA_EUR_CCAR.png)

##### 4.3.2.3 Stability Testing : CPXTEMU Inflation Curve Shift

Here we checked the Stability of PV, Flat Deltas and Flat Gammas of the InflSwapYOY trade as detailed in 4.3 under parallel shifts of the CPXTEMU Inflation curve. In particular, we can observe that the PV, Flatdelta and Flatgamma profiles change smoothly under the considered shifts in all scenarios, as expected.

![Figure 127: PV of the InflSwapYOY as a function of CPXTEMU Inflation curve shifts.](./Figure_127_PV_InflSwapYOY_CPXTEMU_CCAR.png)

![Figure 128: EUR FLATDELTA of InflSwapYOY as a function of CPXTEMU Inflation curve shifts.](./Figure_128_EUR_FLATDELTA_CPXTEMU_CCAR.png)

![Figure 129: CPXTEMU FLATDELTA of InflSwapYOY as a function of CPXTEMU Inflation curve shifts.](./Figure_129_CPXTEMU_FLATDELTA_CPXTEMU_CCAR.png)

![Figure 130: EUR FLATGAMMA of InflSwapYOY as a function of CPXTEMU Inflation curve shifts.](./Figure_130_EUR_FLATGAMMA_CPXTEMU_CCAR.png)

![Figure 131: CPXTEMU FLATGAMMA of InflSwapYOY as a function of CPXTEMU Inflation curve shifts.](./Figure_131_CPXTEMU_FLATGAMMA_CPXTEMU_CCAR.png)

#### 4.3.3 IRRBB Testing

In this section, we test the stability of the InflSwapYOY trade as described in section 4.3 under the IRRBB scenarios and compare them with the Base scenario.

##### 4.3.3.1 Scenario Curves

Presented below chart shows the scenario curves for the underlying rate curves affecting this product. Note that for each considered shift, we first show a plot of the Base scenario and all IRRBB scenarios, before we split the IRRBB scenarios into meaningful groups for better clarity. In all figures, the effects of each scenario are as expected by their names, for example, the parallel up is a parallel shift of the base curve.

![Figure 132: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and all IRRBB scenarios.](./Figure_132_Zero_Rate_InflSwapYOY_IRRBB.png)

![Figure 133: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and the parallel scenarios.](./Figure_133_Zero_Rate_InflSwapYOY_Parallel_IRRBB.png)

![Figure 134: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and the short scenarios.](./Figure_134_Zero_Rate_InflSwapYOY_Short_IRRBB.png)

![Figure 135: Plot of the zero rate of the InflSwapYOY under EUR curve shifts for the Base scenario and the long scenarios.](./Figure_135_Zero_Rate_InflSwapYOY_Long_IRRBB.png)
